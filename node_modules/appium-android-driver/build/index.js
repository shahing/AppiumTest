#!/usr/bin/env node
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CHROMIUM_WIN = exports.WEBVIEW_BASE = exports.WEBVIEW_WIN = exports.NATIVE_WIN = exports.webviewHelpers = exports.commonCapConstraints = exports.startServer = exports.AndroidDriver = exports.androidCommands = exports.androidHelpers = exports.default = void 0;

require("source-map-support/register");

var _yargs = _interopRequireDefault(require("yargs"));

var _asyncbox = require("asyncbox");

var server = _interopRequireWildcard(require("./lib/server"));

var driver = _interopRequireWildcard(require("./lib/driver"));

var androidHelperIndex = _interopRequireWildcard(require("./lib/android-helpers"));

var commandIndex = _interopRequireWildcard(require("./lib/commands/index"));

var webview = _interopRequireWildcard(require("./lib/webview-helpers"));

var caps = _interopRequireWildcard(require("./lib/desired-caps"));

const {
  startServer
} = server;
exports.startServer = startServer;
const DEFAULT_HOST = "localhost";
const DEFAULT_PORT = 4723;

async function main() {
  let port = _yargs.default.argv.port || DEFAULT_PORT;
  let host = _yargs.default.argv.host || DEFAULT_HOST;
  return await startServer(port, host);
}

if (require.main === module) {
  (0, _asyncbox.asyncify)(main);
}

const {
  AndroidDriver
} = driver;
exports.AndroidDriver = AndroidDriver;
const {
  helpers: webviewHelpers,
  NATIVE_WIN,
  WEBVIEW_WIN,
  WEBVIEW_BASE,
  CHROMIUM_WIN
} = webview;
exports.CHROMIUM_WIN = CHROMIUM_WIN;
exports.WEBVIEW_BASE = WEBVIEW_BASE;
exports.WEBVIEW_WIN = WEBVIEW_WIN;
exports.NATIVE_WIN = NATIVE_WIN;
exports.webviewHelpers = webviewHelpers;
const {
  commonCapConstraints
} = caps;
exports.commonCapConstraints = commonCapConstraints;
const {
  commands: androidCommands
} = commandIndex;
exports.androidCommands = androidCommands;
const {
  helpers: androidHelpers
} = androidHelperIndex;
exports.androidHelpers = androidHelpers;
var _default = AndroidDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInN0YXJ0U2VydmVyIiwic2VydmVyIiwiREVGQVVMVF9IT1NUIiwiREVGQVVMVF9QT1JUIiwibWFpbiIsInBvcnQiLCJ5YXJncyIsImFyZ3YiLCJob3N0IiwicmVxdWlyZSIsIm1vZHVsZSIsIkFuZHJvaWREcml2ZXIiLCJkcml2ZXIiLCJoZWxwZXJzIiwid2Vidmlld0hlbHBlcnMiLCJOQVRJVkVfV0lOIiwiV0VCVklFV19XSU4iLCJXRUJWSUVXX0JBU0UiLCJDSFJPTUlVTV9XSU4iLCJ3ZWJ2aWV3IiwiY29tbW9uQ2FwQ29uc3RyYWludHMiLCJjYXBzIiwiY29tbWFuZHMiLCJhbmRyb2lkQ29tbWFuZHMiLCJjb21tYW5kSW5kZXgiLCJhbmRyb2lkSGVscGVycyIsImFuZHJvaWRIZWxwZXJJbmRleCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBbUJBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQXBCQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBa0JDLE1BQXhCOztBQUVBLE1BQU1DLFlBQVksR0FBRyxXQUFyQjtBQUNBLE1BQU1DLFlBQVksR0FBRyxJQUFyQjs7QUFFQSxlQUFlQyxJQUFmLEdBQXVCO0FBQ3JCLE1BQUlDLElBQUksR0FBR0MsZUFBTUMsSUFBTixDQUFXRixJQUFYLElBQW1CRixZQUE5QjtBQUNBLE1BQUlLLElBQUksR0FBR0YsZUFBTUMsSUFBTixDQUFXQyxJQUFYLElBQW1CTixZQUE5QjtBQUNBLFNBQU8sTUFBTUYsV0FBVyxDQUFDSyxJQUFELEVBQU9HLElBQVAsQ0FBeEI7QUFDRDs7QUFFRCxJQUFJQyxPQUFPLENBQUNMLElBQVIsS0FBaUJNLE1BQXJCLEVBQTZCO0FBQzNCLDBCQUFTTixJQUFUO0FBQ0Q7O0FBVUQsTUFBTTtBQUFFTyxFQUFBQTtBQUFGLElBQW9CQyxNQUExQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLE9BQU8sRUFBRUMsY0FBWDtBQUEyQkMsRUFBQUEsVUFBM0I7QUFBdUNDLEVBQUFBLFdBQXZDO0FBQW9EQyxFQUFBQSxZQUFwRDtBQUNFQyxFQUFBQTtBQURGLElBQ21CQyxPQUR6Qjs7Ozs7O0FBRUEsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQTJCQyxJQUFqQzs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLFFBQVEsRUFBRUM7QUFBWixJQUFnQ0MsWUFBdEM7O0FBQ0EsTUFBTTtBQUFFWCxFQUFBQSxPQUFPLEVBQUVZO0FBQVgsSUFBOEJDLGtCQUFwQzs7ZUFHZWYsYSIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbi8vIHRyYW5zcGlsZTptYWluXG5cbmltcG9ydCB5YXJncyBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBhc3luY2lmeSB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCAqIGFzIHNlcnZlciBmcm9tICcuL2xpYi9zZXJ2ZXInO1xuXG5cbmNvbnN0IHsgc3RhcnRTZXJ2ZXIgfSA9IHNlcnZlcjtcblxuY29uc3QgREVGQVVMVF9IT1NUID0gXCJsb2NhbGhvc3RcIjtcbmNvbnN0IERFRkFVTFRfUE9SVCA9IDQ3MjM7XG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4gKCkge1xuICBsZXQgcG9ydCA9IHlhcmdzLmFyZ3YucG9ydCB8fCBERUZBVUxUX1BPUlQ7XG4gIGxldCBob3N0ID0geWFyZ3MuYXJndi5ob3N0IHx8IERFRkFVTFRfSE9TVDtcbiAgcmV0dXJuIGF3YWl0IHN0YXJ0U2VydmVyKHBvcnQsIGhvc3QpO1xufVxuXG5pZiAocmVxdWlyZS5tYWluID09PSBtb2R1bGUpIHtcbiAgYXN5bmNpZnkobWFpbik7XG59XG5cblxuaW1wb3J0ICogYXMgZHJpdmVyIGZyb20gJy4vbGliL2RyaXZlcic7XG5pbXBvcnQgKiBhcyBhbmRyb2lkSGVscGVySW5kZXggZnJvbSAnLi9saWIvYW5kcm9pZC1oZWxwZXJzJztcbmltcG9ydCAqIGFzIGNvbW1hbmRJbmRleCBmcm9tICcuL2xpYi9jb21tYW5kcy9pbmRleCc7XG5pbXBvcnQgKiBhcyB3ZWJ2aWV3IGZyb20gJy4vbGliL3dlYnZpZXctaGVscGVycyc7XG5pbXBvcnQgKiBhcyBjYXBzIGZyb20gJy4vbGliL2Rlc2lyZWQtY2Fwcyc7XG5cblxuY29uc3QgeyBBbmRyb2lkRHJpdmVyIH0gPSBkcml2ZXI7XG5jb25zdCB7IGhlbHBlcnM6IHdlYnZpZXdIZWxwZXJzLCBOQVRJVkVfV0lOLCBXRUJWSUVXX1dJTiwgV0VCVklFV19CQVNFLFxuICAgICAgICBDSFJPTUlVTV9XSU4gfSA9IHdlYnZpZXc7XG5jb25zdCB7IGNvbW1vbkNhcENvbnN0cmFpbnRzIH0gPSBjYXBzO1xuY29uc3QgeyBjb21tYW5kczogYW5kcm9pZENvbW1hbmRzIH0gPSBjb21tYW5kSW5kZXg7XG5jb25zdCB7IGhlbHBlcnM6IGFuZHJvaWRIZWxwZXJzIH0gPSBhbmRyb2lkSGVscGVySW5kZXg7XG5cblxuZXhwb3J0IGRlZmF1bHQgQW5kcm9pZERyaXZlcjtcbmV4cG9ydCB7XG4gIGFuZHJvaWRIZWxwZXJzLCBhbmRyb2lkQ29tbWFuZHMsIEFuZHJvaWREcml2ZXIsIHN0YXJ0U2VydmVyLFxuICBjb21tb25DYXBDb25zdHJhaW50cywgd2Vidmlld0hlbHBlcnMsIE5BVElWRV9XSU4sIFdFQlZJRVdfV0lOLFxuICBXRUJWSUVXX0JBU0UsIENIUk9NSVVNX1dJTixcbn07XG4iXSwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii4uIn0=
