"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _androidHelpers = _interopRequireDefault(require("../android-helpers"));

var _lodash = _interopRequireDefault(require("lodash"));

var _temp = _interopRequireDefault(require("temp"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("../logger"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _jimp = _interopRequireDefault(require("jimp"));

var _teen_process = require("teen_process");

const swipeStepsPerSec = 28;
const dragStepsPerSec = 40;
const CONTAINER_PATH_MARKER = '@';
const CONTAINER_PATH_PATTERN = new RegExp(`^${CONTAINER_PATH_MARKER}([^/]+)/(.+)`);
const ANDROID_MEDIA_RESCAN_INTENT = 'android.intent.action.MEDIA_SCANNER_SCAN_FILE';
let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.keyevent = async function (keycode, metastate = null) {
  _logger.default.warn("keyevent will be deprecated use pressKeyCode");

  return await this.pressKeyCode(keycode, metastate);
};

commands.pressKeyCode = async function (keycode, metastate = null) {
  return await this.bootstrap.sendAction("pressKeyCode", {
    keycode,
    metastate
  });
};

commands.longPressKeyCode = async function (keycode, metastate = null) {
  return await this.bootstrap.sendAction("longPressKeyCode", {
    keycode,
    metastate
  });
};

commands.getOrientation = async function () {
  let params = {
    naturalOrientation: !!this.opts.androidNaturalOrientation
  };
  let orientation = await this.bootstrap.sendAction("orientation", params);
  return orientation.toUpperCase();
};

commands.setOrientation = async function (orientation) {
  orientation = orientation.toUpperCase();
  let params = {
    orientation,
    naturalOrientation: !!this.opts.androidNaturalOrientation
  };
  return await this.bootstrap.sendAction("orientation", params);
};

commands.fakeFlick = async function (xSpeed, ySpeed) {
  return await this.bootstrap.sendAction('flick', {
    xSpeed,
    ySpeed
  });
};

commands.fakeFlickElement = async function (elementId, xoffset, yoffset, speed) {
  let params = {
    xoffset,
    yoffset,
    speed,
    elementId
  };
  return await this.bootstrap.sendAction('element:flick', params);
};

commands.swipe = async function (startX, startY, endX, endY, duration, touchCount, elId) {
  if (startX === 'null') {
    startX = 0.5;
  }

  if (startY === 'null') {
    startY = 0.5;
  }

  let swipeOpts = {
    startX,
    startY,
    endX,
    endY,
    steps: Math.round(duration * swipeStepsPerSec)
  };

  if (_appiumSupport.util.hasValue(elId)) {
    swipeOpts.elementId = elId;
  }

  return await this.doSwipe(swipeOpts);
};

commands.doSwipe = async function (swipeOpts) {
  if (_appiumSupport.util.hasValue(swipeOpts.elementId)) {
    return await this.bootstrap.sendAction("element:swipe", swipeOpts);
  } else {
    return await this.bootstrap.sendAction("swipe", swipeOpts);
  }
};

commands.pinchClose = async function (startX, startY, endX, endY, duration, percent, steps, elId) {
  let pinchOpts = {
    direction: 'in',
    elementId: elId,
    percent,
    steps
  };
  return await this.bootstrap.sendAction("element:pinch", pinchOpts);
};

commands.pinchOpen = async function (startX, startY, endX, endY, duration, percent, steps, elId) {
  let pinchOpts = {
    direction: 'out',
    elementId: elId,
    percent,
    steps
  };
  return await this.bootstrap.sendAction("element:pinch", pinchOpts);
};

commands.flick = async function (element, xSpeed, ySpeed, xOffset, yOffset, speed) {
  if (element) {
    await this.fakeFlickElement(element, xOffset, yOffset, speed);
  } else {
    await this.fakeFlick(xSpeed, ySpeed);
  }
};

commands.drag = async function (startX, startY, endX, endY, duration, touchCount, elementId, destElId) {
  let dragOpts = {
    elementId,
    destElId,
    startX,
    startY,
    endX,
    endY,
    steps: Math.round(duration * dragStepsPerSec)
  };
  return await this.doDrag(dragOpts);
};

commands.doDrag = async function (dragOpts) {
  if (_appiumSupport.util.hasValue(dragOpts.elementId)) {
    return await this.bootstrap.sendAction("element:drag", dragOpts);
  } else {
    return await this.bootstrap.sendAction("drag", dragOpts);
  }
};

commands.lock = async function (seconds) {
  await this.adb.lock();

  if (isNaN(seconds)) {
    return;
  }

  const floatSeconds = parseFloat(seconds);

  if (floatSeconds <= 0) {
    return;
  }

  await _bluebird.default.delay(1000 * floatSeconds);
  await this.unlock();
};

commands.isLocked = async function () {
  return await this.adb.isScreenLocked();
};

commands.unlock = async function () {
  return await _androidHelpers.default.unlock(this, this.adb, this.caps);
};

commands.openNotifications = async function () {
  return await this.bootstrap.sendAction("openNotification");
};

commands.setLocation = async function (latitude, longitude) {
  return await this.adb.sendTelnetCommand(`geo fix ${longitude} ${latitude}`);
};

function parseContainerPath(remotePath) {
  const match = CONTAINER_PATH_PATTERN.exec(remotePath);

  if (!match) {
    _logger.default.errorAndThrow(`It is expected that package identifier is separated from the relative path with a single slash. ` + `'${remotePath}' is given instead`);
  }

  return [match[1], _path.default.posix.resolve(`/data/data/${match[1]}`, match[2])];
}

commands.pullFile = async function (remotePath) {
  if (remotePath.endsWith('/')) {
    _logger.default.errorAndThrow(`It is expected that remote path points to a file and not to a folder. ` + `'${remotePath}' is given instead`);
  }

  let tmpDestination = null;

  if (remotePath.startsWith(CONTAINER_PATH_MARKER)) {
    const [packageId, pathInContainer] = parseContainerPath(remotePath);

    _logger.default.info(`Parsed package identifier '${packageId}' from '${remotePath}'. Will get the data from '${pathInContainer}'`);

    tmpDestination = `/data/local/tmp/${_path.default.posix.basename(pathInContainer)}`;

    try {
      await this.adb.shell(['run-as', packageId, `chmod 777 '${pathInContainer.replace(/'/g, '\\\'')}'`]);
      await this.adb.shell(['cp', '-f', pathInContainer, tmpDestination]);
    } catch (e) {
      _logger.default.errorAndThrow(`Cannot access the container of '${packageId}' application. ` + `Is the application installed and has 'debuggable' build option set to true? ` + `Original error: ${e.message}`);
    }
  }

  const localFile = _temp.default.path({
    prefix: 'appium',
    suffix: '.tmp'
  });

  try {
    await this.adb.pull(_lodash.default.isString(tmpDestination) ? tmpDestination : remotePath, localFile);
    const data = await _appiumSupport.fs.readFile(localFile);
    return Buffer.from(data).toString('base64');
  } finally {
    if (await _appiumSupport.fs.exists(localFile)) {
      await _appiumSupport.fs.unlink(localFile);
    }

    if (_lodash.default.isString(tmpDestination)) {
      await this.adb.shell(['rm', '-f', tmpDestination]);
    }
  }
};

commands.pushFile = async function (remotePath, base64Data) {
  if (remotePath.endsWith('/')) {
    _logger.default.errorAndThrow(`It is expected that remote path points to a file and not to a folder. ` + `'${remotePath}' is given instead`);
  }

  const localFile = _temp.default.path({
    prefix: 'appium',
    suffix: '.tmp'
  });

  if (_lodash.default.isArray(base64Data)) {
    base64Data = Buffer.from(base64Data).toString('utf8');
  }

  const content = Buffer.from(base64Data, 'base64');
  let tmpDestination = null;

  try {
    await _appiumSupport.fs.writeFile(localFile, content.toString('binary'), 'binary');

    if (remotePath.startsWith(CONTAINER_PATH_MARKER)) {
      const [packageId, pathInContainer] = parseContainerPath(remotePath);

      _logger.default.info(`Parsed package identifier '${packageId}' from '${remotePath}'. Will put the data into '${pathInContainer}'`);

      tmpDestination = `/data/local/tmp/${_path.default.posix.basename(pathInContainer)}`;

      try {
        await this.adb.shell(['run-as', packageId, `mkdir -p '${_path.default.posix.dirname(pathInContainer).replace(/'/g, '\\\'')}'`]);
        await this.adb.shell(['run-as', packageId, `touch '${pathInContainer.replace(/'/g, '\\\'')}'`]);
        await this.adb.shell(['run-as', packageId, `chmod 777 '${pathInContainer.replace(/'/g, '\\\'')}'`]);
        await this.adb.push(localFile, tmpDestination);
        await this.adb.shell(['cp', '-f', tmpDestination, pathInContainer]);
      } catch (e) {
        _logger.default.errorAndThrow(`Cannot access the container of '${packageId}' application. ` + `Is the application installed and has 'debuggable' build option set to true? ` + `Original error: ${e.message}`);
      }
    } else {
      await this.adb.push(localFile, remotePath);

      _logger.default.info("After pushing media file, broadcasting media scan intent");

      try {
        await this.adb.shell(['am', 'broadcast', '-a', ANDROID_MEDIA_RESCAN_INTENT, '-d', `file://${remotePath}`]);
      } catch (e) {
        _logger.default.warn(`Got error broadcasting media scan intent: ${e.message}; ignoring`);
      }
    }
  } finally {
    if (await _appiumSupport.fs.exists(localFile)) {
      await _appiumSupport.fs.unlink(localFile);
    }

    if (_lodash.default.isString(tmpDestination)) {
      await this.adb.shell(['rm', '-f', tmpDestination]);
    }
  }
};

commands.pullFolder = async function (remotePath) {
  let localFolder = _temp.default.path({
    prefix: 'appium'
  });

  await this.adb.pull(remotePath, localFolder);
  return (await _appiumSupport.zip.toInMemoryZip(localFolder)).toString('base64');
};

commands.fingerprint = async function (fingerprintId) {
  if (!this.isEmulator()) {
    _logger.default.errorAndThrow("fingerprint method is only available for emulators");
  }

  await this.adb.fingerprint(fingerprintId);
};

commands.sendSMS = async function (phoneNumber, message) {
  if (!this.isEmulator()) {
    _logger.default.errorAndThrow("sendSMS method is only available for emulators");
  }

  await this.adb.sendSMS(phoneNumber, message);
};

commands.gsmCall = async function (phoneNumber, action) {
  if (!this.isEmulator()) {
    _logger.default.errorAndThrow("gsmCall method is only available for emulators");
  }

  await this.adb.gsmCall(phoneNumber, action);
};

commands.gsmSignal = async function (signalStrengh) {
  if (!this.isEmulator()) {
    _logger.default.errorAndThrow("gsmSignal method is only available for emulators");
  }

  await this.adb.gsmSignal(signalStrengh);
};

commands.gsmVoice = async function (state) {
  if (!this.isEmulator()) {
    _logger.default.errorAndThrow("gsmVoice method is only available for emulators");
  }

  await this.adb.gsmVoice(state);
};

commands.powerAC = async function (state) {
  if (!this.isEmulator()) {
    _logger.default.errorAndThrow("powerAC method is only available for emulators");
  }

  await this.adb.powerAC(state);
};

commands.powerCapacity = async function (batteryPercent) {
  if (!this.isEmulator()) {
    _logger.default.errorAndThrow("powerCapacity method is only available for emulators");
  }

  await this.adb.powerCapacity(batteryPercent);
};

commands.networkSpeed = async function (networkSpeed) {
  if (!this.isEmulator()) {
    _logger.default.errorAndThrow("networkSpeed method is only available for emulators");
  }

  await this.adb.networkSpeed(networkSpeed);
};

helpers.getScreenshotDataWithAdbShell = async function (adb, opts) {
  const localFile = _temp.default.path({
    prefix: 'appium',
    suffix: '.png'
  });

  if (await _appiumSupport.fs.exists(localFile)) {
    await _appiumSupport.fs.unlink(localFile);
  }

  try {
    const pngDir = opts.androidScreenshotPath || '/data/local/tmp/';

    const png = _path.default.posix.resolve(pngDir, 'screenshot.png');

    const cmd = ['/system/bin/rm', `${png};`, '/system/bin/screencap', '-p', png];
    await adb.shell(cmd);

    if (!(await adb.fileSize(png))) {
      throw new Error('The size of the taken screenshot equals to zero.');
    }

    await adb.pull(png, localFile);
    return await _jimp.default.read(localFile);
  } finally {
    if (await _appiumSupport.fs.exists(localFile)) {
      await _appiumSupport.fs.unlink(localFile);
    }
  }
};

helpers.getScreenshotDataWithAdbExecOut = async function (adb) {
  let {
    stdout,
    stderr,
    code
  } = await (0, _teen_process.exec)(adb.executable.path, adb.executable.defaultArgs.concat(['exec-out', '/system/bin/screencap', '-p']), {
    encoding: 'binary',
    isBuffer: true
  });

  if (code || stderr.length) {
    throw new Error(`Screenshot returned error, code: '${code}', stderr: '${stderr.toString()}'`);
  }

  if (!stdout.length) {
    throw new Error('Screenshot returned no data');
  }

  return await _jimp.default.read(stdout);
};

commands.getScreenshot = async function () {
  const apiLevel = await this.adb.getApiLevel();
  let image = null;

  if (apiLevel > 20) {
    try {
      image = await this.getScreenshotDataWithAdbExecOut(this.adb);
    } catch (e) {
      _logger.default.info(`Cannot get screenshot data with 'adb exec-out' because of '${e.message}'. ` + `Defaulting to 'adb shell' call`);
    }
  }

  if (!image) {
    try {
      image = await this.getScreenshotDataWithAdbShell(this.adb, this.opts);
    } catch (e) {
      const err = `Cannot get screenshot data because of '${e.message}'. ` + `Make sure the 'LayoutParams.FLAG_SECURE' is not set for ` + `the current view`;

      _logger.default.errorAndThrow(err);
    }
  }

  if (apiLevel < 23) {
    let screenOrientation = await this.adb.getScreenOrientation();

    try {
      image = await image.rotate(-90 * screenOrientation);
    } catch (err) {
      _logger.default.warn(`Could not rotate screenshot due to error: ${err}`);
    }
  }

  const getBuffer = _bluebird.default.promisify(image.getBuffer, {
    context: image
  });

  const imgBuffer = await getBuffer(_jimp.default.MIME_PNG);
  return imgBuffer.toString('base64');
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
