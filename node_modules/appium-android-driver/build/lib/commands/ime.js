"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumBaseDriver = require("appium-base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.isIMEActivated = async function () {
  return true;
};

commands.availableIMEEngines = async function () {
  _logger.default.debug("Retrieving available IMEs");

  let engines = await this.adb.availableIMEs();

  _logger.default.debug(`Engines: ${JSON.stringify(engines)}`);

  return engines;
};

commands.getActiveIMEEngine = async function () {
  _logger.default.debug("Retrieving current default IME");

  return await this.adb.defaultIME();
};

commands.activateIMEEngine = async function (imeId) {
  _logger.default.debug(`Attempting to activate IME ${imeId}`);

  let availableEngines = await this.adb.availableIMEs();

  if (availableEngines.indexOf(imeId) === -1) {
    _logger.default.debug("IME not found, failing");

    throw new _appiumBaseDriver.errors.IMENotAvailableError();
  }

  _logger.default.debug("Found installed IME, attempting to activate");

  await this.adb.enableIME(imeId);
  await this.adb.setIME(imeId);
};

commands.deactivateIMEEngine = async function () {
  let currentEngine = await this.getActiveIMEEngine();

  _logger.default.debug(`Attempting to deactivate ${currentEngine}`);

  await this.adb.disableIME(currentEngine);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9pbWUuanMiXSwibmFtZXMiOlsiY29tbWFuZHMiLCJoZWxwZXJzIiwiZXh0ZW5zaW9ucyIsImlzSU1FQWN0aXZhdGVkIiwiYXZhaWxhYmxlSU1FRW5naW5lcyIsImxvZyIsImRlYnVnIiwiZW5naW5lcyIsImFkYiIsImF2YWlsYWJsZUlNRXMiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0QWN0aXZlSU1FRW5naW5lIiwiZGVmYXVsdElNRSIsImFjdGl2YXRlSU1FRW5naW5lIiwiaW1lSWQiLCJhdmFpbGFibGVFbmdpbmVzIiwiaW5kZXhPZiIsImVycm9ycyIsIklNRU5vdEF2YWlsYWJsZUVycm9yIiwiZW5hYmxlSU1FIiwic2V0SU1FIiwiZGVhY3RpdmF0ZUlNRUVuZ2luZSIsImN1cnJlbnRFbmdpbmUiLCJkaXNhYmxlSU1FIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7Ozs7QUFFQUYsUUFBUSxDQUFDRyxjQUFULEdBQTBCLGtCQUFrQjtBQUUxQyxTQUFPLElBQVA7QUFDRCxDQUhEOztBQUtBSCxRQUFRLENBQUNJLG1CQUFULEdBQStCLGtCQUFrQjtBQUMvQ0Msa0JBQUlDLEtBQUosQ0FBVSwyQkFBVjs7QUFDQSxNQUFJQyxPQUFPLEdBQUcsTUFBTSxLQUFLQyxHQUFMLENBQVNDLGFBQVQsRUFBcEI7O0FBQ0FKLGtCQUFJQyxLQUFKLENBQVcsWUFBV0ksSUFBSSxDQUFDQyxTQUFMLENBQWVKLE9BQWYsQ0FBd0IsRUFBOUM7O0FBQ0EsU0FBT0EsT0FBUDtBQUNELENBTEQ7O0FBT0FQLFFBQVEsQ0FBQ1ksa0JBQVQsR0FBOEIsa0JBQWtCO0FBQzlDUCxrQkFBSUMsS0FBSixDQUFVLGdDQUFWOztBQUNBLFNBQU8sTUFBTSxLQUFLRSxHQUFMLENBQVNLLFVBQVQsRUFBYjtBQUNELENBSEQ7O0FBS0FiLFFBQVEsQ0FBQ2MsaUJBQVQsR0FBNkIsZ0JBQWdCQyxLQUFoQixFQUF1QjtBQUNsRFYsa0JBQUlDLEtBQUosQ0FBVyw4QkFBNkJTLEtBQU0sRUFBOUM7O0FBQ0EsTUFBSUMsZ0JBQWdCLEdBQUcsTUFBTSxLQUFLUixHQUFMLENBQVNDLGFBQVQsRUFBN0I7O0FBQ0EsTUFBSU8sZ0JBQWdCLENBQUNDLE9BQWpCLENBQXlCRixLQUF6QixNQUFvQyxDQUFDLENBQXpDLEVBQTRDO0FBQzFDVixvQkFBSUMsS0FBSixDQUFVLHdCQUFWOztBQUNBLFVBQU0sSUFBSVkseUJBQU9DLG9CQUFYLEVBQU47QUFDRDs7QUFDRGQsa0JBQUlDLEtBQUosQ0FBVSw2Q0FBVjs7QUFDQSxRQUFNLEtBQUtFLEdBQUwsQ0FBU1ksU0FBVCxDQUFtQkwsS0FBbkIsQ0FBTjtBQUNBLFFBQU0sS0FBS1AsR0FBTCxDQUFTYSxNQUFULENBQWdCTixLQUFoQixDQUFOO0FBQ0QsQ0FWRDs7QUFZQWYsUUFBUSxDQUFDc0IsbUJBQVQsR0FBK0Isa0JBQWtCO0FBQy9DLE1BQUlDLGFBQWEsR0FBRyxNQUFNLEtBQUtYLGtCQUFMLEVBQTFCOztBQUNBUCxrQkFBSUMsS0FBSixDQUFXLDRCQUEyQmlCLGFBQWMsRUFBcEQ7O0FBQ0EsUUFBTSxLQUFLZixHQUFMLENBQVNnQixVQUFULENBQW9CRCxhQUFwQixDQUFOO0FBQ0QsQ0FKRDs7QUFNQUUsTUFBTSxDQUFDQyxNQUFQLENBQWN4QixVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuY29tbWFuZHMuaXNJTUVBY3RpdmF0ZWQgPSBhc3luYyBmdW5jdGlvbiAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAvLyBJTUUgaXMgYWx3YXlzIGFjdGl2YXRlZCBvbiBBbmRyb2lkIGRldmljZXNcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5jb21tYW5kcy5hdmFpbGFibGVJTUVFbmdpbmVzID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsb2cuZGVidWcoXCJSZXRyaWV2aW5nIGF2YWlsYWJsZSBJTUVzXCIpO1xuICBsZXQgZW5naW5lcyA9IGF3YWl0IHRoaXMuYWRiLmF2YWlsYWJsZUlNRXMoKTtcbiAgbG9nLmRlYnVnKGBFbmdpbmVzOiAke0pTT04uc3RyaW5naWZ5KGVuZ2luZXMpfWApO1xuICByZXR1cm4gZW5naW5lcztcbn07XG5cbmNvbW1hbmRzLmdldEFjdGl2ZUlNRUVuZ2luZSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgbG9nLmRlYnVnKFwiUmV0cmlldmluZyBjdXJyZW50IGRlZmF1bHQgSU1FXCIpO1xuICByZXR1cm4gYXdhaXQgdGhpcy5hZGIuZGVmYXVsdElNRSgpO1xufTtcblxuY29tbWFuZHMuYWN0aXZhdGVJTUVFbmdpbmUgPSBhc3luYyBmdW5jdGlvbiAoaW1lSWQpIHtcbiAgbG9nLmRlYnVnKGBBdHRlbXB0aW5nIHRvIGFjdGl2YXRlIElNRSAke2ltZUlkfWApO1xuICBsZXQgYXZhaWxhYmxlRW5naW5lcyA9IGF3YWl0IHRoaXMuYWRiLmF2YWlsYWJsZUlNRXMoKTtcbiAgaWYgKGF2YWlsYWJsZUVuZ2luZXMuaW5kZXhPZihpbWVJZCkgPT09IC0xKSB7XG4gICAgbG9nLmRlYnVnKFwiSU1FIG5vdCBmb3VuZCwgZmFpbGluZ1wiKTtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLklNRU5vdEF2YWlsYWJsZUVycm9yKCk7XG4gIH1cbiAgbG9nLmRlYnVnKFwiRm91bmQgaW5zdGFsbGVkIElNRSwgYXR0ZW1wdGluZyB0byBhY3RpdmF0ZVwiKTtcbiAgYXdhaXQgdGhpcy5hZGIuZW5hYmxlSU1FKGltZUlkKTtcbiAgYXdhaXQgdGhpcy5hZGIuc2V0SU1FKGltZUlkKTtcbn07XG5cbmNvbW1hbmRzLmRlYWN0aXZhdGVJTUVFbmdpbmUgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGxldCBjdXJyZW50RW5naW5lID0gYXdhaXQgdGhpcy5nZXRBY3RpdmVJTUVFbmdpbmUoKTtcbiAgbG9nLmRlYnVnKGBBdHRlbXB0aW5nIHRvIGRlYWN0aXZhdGUgJHtjdXJyZW50RW5naW5lfWApO1xuICBhd2FpdCB0aGlzLmFkYi5kaXNhYmxlSU1FKGN1cnJlbnRFbmdpbmUpO1xufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2ltZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
