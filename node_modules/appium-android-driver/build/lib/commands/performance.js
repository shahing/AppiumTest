"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NETWORK_KEYS = exports.BATTERY_KEYS = exports.MEMORY_KEYS = exports.CPU_KEYS = exports.SUPPORTED_PERFORMANCE_DATA_TYPES = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _asyncbox = require("asyncbox");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const NETWORK_KEYS = [['bucketStart', 'activeTime', 'rxBytes', 'rxPackets', 'txBytes', 'txPackets', 'operations', 'bucketDuration'], ['st', 'activeTime', 'rb', 'rp', 'tb', 'tp', 'op', 'bucketDuration']];
exports.NETWORK_KEYS = NETWORK_KEYS;
const CPU_KEYS = ['user', 'kernel'];
exports.CPU_KEYS = CPU_KEYS;
const BATTERY_KEYS = ['power'];
exports.BATTERY_KEYS = BATTERY_KEYS;
const MEMORY_KEYS = ['totalPrivateDirty', 'nativePrivateDirty', 'dalvikPrivateDirty', 'eglPrivateDirty', 'glPrivateDirty', 'totalPss', 'nativePss', 'dalvikPss', 'eglPss', 'glPss', 'nativeHeapAllocatedSize', 'nativeHeapSize'];
exports.MEMORY_KEYS = MEMORY_KEYS;
const SUPPORTED_PERFORMANCE_DATA_TYPES = {
  cpuinfo: 'the amount of cpu by user and kernel process - cpu information for applications on real devices and simulators',
  memoryinfo: 'the amount of memory used by the process - memory information for applications on real devices and simulators',
  batteryinfo: 'the remaining battery power - battery power information for applications on real devices and simulators',
  networkinfo: 'the network statistics - network rx/tx information for applications on real devices and simulators'
};
exports.SUPPORTED_PERFORMANCE_DATA_TYPES = SUPPORTED_PERFORMANCE_DATA_TYPES;
const RETRY_PAUSE = 1000;

commands.getPerformanceDataTypes = function () {
  return _lodash.default.keys(SUPPORTED_PERFORMANCE_DATA_TYPES);
};

commands.getPerformanceData = async function (packageName, dataType, dataReadTimeout = 2) {
  let data;

  switch (dataType) {
    case 'batteryinfo':
      data = await this.getBatteryInfo(dataReadTimeout);
      break;

    case 'cpuinfo':
      data = await this.getCPUInfo(packageName, dataReadTimeout);
      break;

    case 'memoryinfo':
      data = await this.getMemoryInfo(packageName, dataReadTimeout);
      break;

    case 'networkinfo':
      data = await this.getNetworkTrafficInfo(dataReadTimeout);
      break;

    default:
      throw new Error(`No performance data of type '${dataType}' found.`);
  }

  return data;
};

helpers.getCPUInfo = async function (packageName, dataReadTimeout = 2) {
  return await (0, _asyncbox.retryInterval)(dataReadTimeout, RETRY_PAUSE, async () => {
    const cmd = ['dumpsys', 'cpuinfo', '|', 'grep', `'${packageName}'`];
    const data = await this.adb.shell(cmd);

    if (_lodash.default.isEmpty(data)) {
      throw new Error('No data from dumpsys');
    }

    const userMatch = /([\d.]+)%\s+user/.exec(data);
    const kernelMatch = /([\d.]+)%\s+kernel/.exec(data);

    if (!userMatch || !kernelMatch) {
      throw new Error(`Unable to parse cpu data: '${data}'`);
    }

    return [_lodash.default.clone(CPU_KEYS), [userMatch[1], kernelMatch[1]]];
  });
};

helpers.getBatteryInfo = async function (dataReadTimeout = 2) {
  return await (0, _asyncbox.retryInterval)(dataReadTimeout, RETRY_PAUSE, async () => {
    let cmd = ['dumpsys', 'battery', '|', 'grep', 'level'];
    let data = await this.adb.shell(cmd);
    if (!data) throw new Error('No data from dumpsys');
    let power = parseInt((data.split(':')[1] || '').trim(), 10);

    if (!Number.isNaN(power)) {
      return [_lodash.default.clone(BATTERY_KEYS), [power.toString()]];
    } else {
      throw new Error(`Unable to parse battery data: '${data}'`);
    }
  });
};

helpers.getMemoryInfo = async function (packageName, dataReadTimeout = 2) {
  return await (0, _asyncbox.retryInterval)(dataReadTimeout, RETRY_PAUSE, async () => {
    let cmd = ['dumpsys', 'meminfo', `'${packageName}'`, '|', 'grep', '-E', "'Native|Dalvik|EGL|GL|TOTAL'"];
    let data = await this.adb.shell(cmd);
    if (!data) throw new Error('No data from dumpsys');
    let totalPrivateDirty, totalPss, nativePrivateDirty, nativePss, nativeHeapSize, nativeHeapAllocatedSize, dalvikPrivateDirty, dalvikPss, eglPrivateDirty, eglPss, glPrivateDirty, glPss;
    let apilevel = await this.adb.getApiLevel();

    for (let line of data.split('\n')) {
      let entries = line.trim().split(' ').filter(Boolean);

      if (apilevel > 18) {
        let type = entries[0];
        let subType = entries[1];

        if (type === 'Native' && subType === 'Heap') {
          nativePss = entries[2];
          nativePrivateDirty = entries[3];
          nativeHeapSize = entries[6];
          nativeHeapAllocatedSize = entries[7];
        } else if (type === 'Dalvik' && subType === 'Heap') {
          dalvikPss = entries[2];
          dalvikPrivateDirty = entries[3];
        } else if (type === 'EGL' && subType === 'mtrack') {
          eglPss = entries[2];
          eglPrivateDirty = entries[3];
        } else if (type === 'GL' && subType === 'mtrack') {
          glPss = entries[2];
          glPrivateDirty = entries[3];
        } else if (type === 'TOTAL' && entries.length === 8) {
          totalPss = entries[1];
          totalPrivateDirty = entries[2];
        }
      } else {
        let type = entries[0];

        if (type === 'Native') {
          nativePss = entries[1];
          nativePrivateDirty = entries[3];
          nativeHeapSize = entries[4];
          nativeHeapAllocatedSize = entries[5];
        } else if (type === 'Dalvik') {
          dalvikPss = entries[1];
          dalvikPrivateDirty = entries[3];
        } else if (type === 'EGL') {
          eglPss = entries[1];
          eglPrivateDirty = entries[3];
        } else if (type === 'GL') {
          glPss = entries[1];
          glPrivateDirty = entries[3];
        } else if (type === 'TOTAL') {
          totalPss = entries[1];
          totalPrivateDirty = entries[3];
        }
      }
    }

    if (totalPrivateDirty && totalPrivateDirty !== 'nodex') {
      let headers = _lodash.default.clone(MEMORY_KEYS);

      let data = [totalPrivateDirty, nativePrivateDirty, dalvikPrivateDirty, eglPrivateDirty, glPrivateDirty, totalPss, nativePss, dalvikPss, eglPss, glPss, nativeHeapAllocatedSize, nativeHeapSize];
      return [headers, data];
    } else {
      throw new Error(`Unable to parse memory data: '${data}'`);
    }
  });
};

helpers.getNetworkTrafficInfo = async function (dataReadTimeout = 2) {
  return await (0, _asyncbox.retryInterval)(dataReadTimeout, RETRY_PAUSE, async () => {
    let returnValue = [];
    let bucketDuration, bucketStart, activeTime, rxBytes, rxPackets, txBytes, txPackets, operations;
    let cmd = ['dumpsys', 'netstats'];
    let data = await this.adb.shell(cmd);
    if (!data) throw new Error('No data from dumpsys');
    let index = 0;
    let fromXtstats = data.indexOf("Xt stats:");
    let start = data.indexOf("Pending bytes:", fromXtstats);
    let delimiter = data.indexOf(":", start + 1);
    let end = data.indexOf("\n", delimiter + 1);
    let pendingBytes = data.substring(delimiter + 1, end).trim();

    if (end > delimiter) {
      start = data.indexOf("bucketDuration", end + 1);
      delimiter = data.indexOf("=", start + 1);
      end = data.indexOf("\n", delimiter + 1);
      bucketDuration = data.substring(delimiter + 1, end).trim();
    }

    if (start >= 0) {
      data = data.substring(end + 1, data.length);
      let arrayList = data.split("\n");

      if (arrayList.length > 0) {
        start = -1;

        for (let j = 0; j < NETWORK_KEYS.length; ++j) {
          start = arrayList[0].indexOf(NETWORK_KEYS[j][0]);

          if (start >= 0) {
            index = j;
            returnValue[0] = [];

            for (let k = 0; k < NETWORK_KEYS[j].length; ++k) {
              returnValue[0][k] = NETWORK_KEYS[j][k];
            }

            break;
          }
        }

        let returnIndex = 1;

        for (let i = 0; i < arrayList.length; i++) {
          data = arrayList[i];
          start = data.indexOf(NETWORK_KEYS[index][0]);

          if (start >= 0) {
            delimiter = data.indexOf("=", start + 1);
            end = data.indexOf(" ", delimiter + 1);
            bucketStart = data.substring(delimiter + 1, end).trim();

            if (end > delimiter) {
              start = data.indexOf(NETWORK_KEYS[index][1], end + 1);

              if (start >= 0) {
                delimiter = data.indexOf("=", start + 1);
                end = data.indexOf(" ", delimiter + 1);
                activeTime = data.substring(delimiter + 1, end).trim();
              }
            }

            if (end > delimiter) {
              start = data.indexOf(NETWORK_KEYS[index][2], end + 1);

              if (start >= 0) {
                delimiter = data.indexOf("=", start + 1);
                end = data.indexOf(" ", delimiter + 1);
                rxBytes = data.substring(delimiter + 1, end).trim();
              }
            }

            if (end > delimiter) {
              start = data.indexOf(NETWORK_KEYS[index][3], end + 1);

              if (start >= 0) {
                delimiter = data.indexOf("=", start + 1);
                end = data.indexOf(" ", delimiter + 1);
                rxPackets = data.substring(delimiter + 1, end).trim();
              }
            }

            if (end > delimiter) {
              start = data.indexOf(NETWORK_KEYS[index][4], end + 1);

              if (start >= 0) {
                delimiter = data.indexOf("=", start + 1);
                end = data.indexOf(" ", delimiter + 1);
                txBytes = data.substring(delimiter + 1, end).trim();
              }
            }

            if (end > delimiter) {
              start = data.indexOf(NETWORK_KEYS[index][5], end + 1);

              if (start >= 0) {
                delimiter = data.indexOf("=", start + 1);
                end = data.indexOf(" ", delimiter + 1);
                txPackets = data.substring(delimiter + 1, end).trim();
              }
            }

            if (end > delimiter) {
              start = data.indexOf(NETWORK_KEYS[index][6], end + 1);

              if (start >= 0) {
                delimiter = data.indexOf("=", start + 1);
                end = data.length;
                operations = data.substring(delimiter + 1, end).trim();
              }
            }

            returnValue[returnIndex++] = [bucketStart, activeTime, rxBytes, rxPackets, txBytes, txPackets, operations, bucketDuration];
          }
        }
      }
    }

    if (!_lodash.default.isEqual(pendingBytes, "") && !_lodash.default.isUndefined(pendingBytes) && !_lodash.default.isEqual(pendingBytes, "nodex")) {
      return returnValue;
    } else {
      throw new Error(`Unable to parse network traffic data: '${data}'`);
    }
  });
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
