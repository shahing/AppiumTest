"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _fs2 = _interopRequireDefault(require("fs"));

var _url = _interopRequireDefault(require("url"));

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _teen_process = require("teen_process");

var _path = _interopRequireDefault(require("path"));

var _v = _interopRequireDefault(require("v8"));

let commands = {},
    extensions = {};
exports.commands = commands;
const RETRY_PAUSE = 300;
const RETRY_TIMEOUT = 5000;
const MAX_RECORDING_TIME_SEC = 60 * 3;
const MAX_TIME_SEC = 60 * 30;
const DEFAULT_RECORDING_TIME_SEC = MAX_RECORDING_TIME_SEC;
const PROCESS_SHUTDOWN_TIMEOUT = 10 * 1000;
const SCREENRECORD_BINARY = 'screenrecord';
const DEFAULT_EXT = '.mp4';
const MIN_EMULATOR_API_LEVEL = 27;
const FFMPEG_BINARY = `ffmpeg${_appiumSupport.system.isWindows() ? '.exe' : ''}`;

async function uploadRecordedMedia(adb, localFile, remotePath = null, uploadOptions = {}) {
  const {
    size
  } = await _appiumSupport.fs.stat(localFile);

  _logger.default.debug(`The size of the resulting screen recording is ${_appiumSupport.util.toReadableSizeString(size)}`);

  if (_lodash.default.isEmpty(remotePath)) {
    const maxMemoryLimit = _v.default.getHeapStatistics().total_available_size / 2;

    if (size >= maxMemoryLimit) {
      _logger.default.info(`The file might be too large to fit into the process memory ` + `(${_appiumSupport.util.toReadableSizeString(size)} >= ${_appiumSupport.util.toReadableSizeString(maxMemoryLimit)}). ` + `Provide a link to a remote writable location for video upload ` + `(http(s) and ftp protocols are supported) if you experience Out Of Memory errors`);
    }

    return (await _appiumSupport.fs.readFile(localFile)).toString('base64');
  }

  const remoteUrl = _url.default.parse(remotePath);

  let options = {};
  const {
    user,
    pass,
    method
  } = uploadOptions;

  if (remoteUrl.protocol.startsWith('http')) {
    options = {
      url: remoteUrl.href,
      method: method || 'PUT',
      multipart: [{
        body: _fs2.default.createReadStream(localFile)
      }]
    };

    if (user && pass) {
      options.auth = {
        user,
        pass
      };
    }
  } else if (remoteUrl.protocol.startsWith('ftp')) {
    options = {
      host: remoteUrl.hostname,
      port: remoteUrl.port || 21
    };

    if (user && pass) {
      options.user = user;
      options.pass = pass;
    }
  }

  await _appiumSupport.net.uploadFile(localFile, remotePath, options);
  return '';
}

async function verifyScreenRecordIsSupported(adb, isEmulator) {
  const apiLevel = await adb.getApiLevel();

  if (isEmulator && apiLevel < MIN_EMULATOR_API_LEVEL) {
    throw new Error(`Screen recording does not work on emulators running Android API level less than ${MIN_EMULATOR_API_LEVEL}`);
  }

  if (apiLevel < 19) {
    throw new Error(`Screen recording not available on API Level ${apiLevel}. Minimum API Level is 19.`);
  }
}

async function scheduleScreenRecord(adb, recordingProperties) {
  if (recordingProperties.stopped) {
    return;
  }

  const {
    startTimestamp,
    videoSize,
    bitRate,
    timeLimit,
    bugReport
  } = recordingProperties;
  let currentTimeLimit = MAX_RECORDING_TIME_SEC;

  if (_appiumSupport.util.hasValue(recordingProperties.currentTimeLimit)) {
    const currentTimeLimitInt = parseInt(recordingProperties.currentTimeLimit, 10);

    if (!isNaN(currentTimeLimitInt) && currentTimeLimitInt < MAX_RECORDING_TIME_SEC) {
      currentTimeLimit = currentTimeLimitInt;
    }
  }

  const pathOnDevice = `/sdcard/${Math.floor(new Date())}${DEFAULT_EXT}`;
  const recordingProc = adb.screenrecord(pathOnDevice, {
    videoSize,
    bitRate,
    timeLimit: currentTimeLimit,
    bugReport
  });
  recordingProc.on('end', () => {
    if (recordingProperties.stopped || !_appiumSupport.util.hasValue(timeLimit)) {
      return;
    }

    const currentDuration = process.hrtime(startTimestamp)[0];

    _logger.default.debug(`The overall screen recording duration is ${currentDuration}s so far`);

    const timeLimitInt = parseInt(timeLimit, 10);

    if (isNaN(timeLimitInt) || currentDuration >= timeLimitInt) {
      _logger.default.debug('There is no need to start the next recording chunk');

      return;
    }

    recordingProperties.currentTimeLimit = timeLimitInt - currentDuration;
    const chunkDuration = recordingProperties.currentTimeLimit < MAX_RECORDING_TIME_SEC ? recordingProperties.currentTimeLimit : MAX_RECORDING_TIME_SEC;

    _logger.default.debug(`Starting the next ${chunkDuration}s-chunk ` + `of screen recording in order to achieve ${timeLimitInt}s total duration`);

    scheduleScreenRecord(adb, recordingProperties).catch(e => {
      _logger.default.error(e.stack);

      recordingProperties.stopped = true;
    });
  });
  await recordingProc.start(0);

  try {
    await (0, _asyncbox.waitForCondition)(async () => await adb.fileExists(pathOnDevice), {
      waitMs: RETRY_TIMEOUT,
      intervalMs: RETRY_PAUSE
    });
  } catch (e) {
    throw new Error(`The expected screen record file '${pathOnDevice}' does not exist after ${RETRY_TIMEOUT}ms`);
  }

  recordingProperties.records.push(pathOnDevice);
  recordingProperties.recordingProcess = recordingProc;
}

async function mergeScreenRecords(mediaFiles) {
  try {
    await _appiumSupport.fs.which(FFMPEG_BINARY);
  } catch (e) {
    throw new Error(`${FFMPEG_BINARY} utility is not available in PATH. Please install it from https://www.ffmpeg.org/`);
  }

  const configContent = mediaFiles.map(x => `file '${x}'`).join('\n');

  const configFile = _path.default.resolve(_path.default.dirname(mediaFiles[0]), 'config.txt');

  await _appiumSupport.fs.writeFile(configFile, configContent, 'utf8');

  _logger.default.debug(`Generated ffmpeg merging config '${configFile}' with items:\n${configContent}`);

  const result = _path.default.resolve(_path.default.dirname(mediaFiles[0]), `merge_${Math.floor(new Date())}${DEFAULT_EXT}`);

  const args = ['-safe', '0', '-f', 'concat', '-i', configFile, '-c', 'copy', result];

  _logger.default.info(`Initiating screen records merging using the command '${FFMPEG_BINARY} ${args.join(' ')}'`);

  await (0, _teen_process.exec)(FFMPEG_BINARY, args);
  return result;
}

async function terminateBackgroundScreenRecording(adb, force = true) {
  const pids = (await adb.getPIDsByName(SCREENRECORD_BINARY)).map(p => `${p}`);

  if (_lodash.default.isEmpty(pids)) {
    return false;
  }

  try {
    await adb.shell(['kill', force ? '-15' : '-2', ...pids]);
    await (0, _asyncbox.waitForCondition)(async () => _lodash.default.isEmpty((await adb.getPIDsByName(SCREENRECORD_BINARY))), {
      waitMs: PROCESS_SHUTDOWN_TIMEOUT,
      intervalMs: 500
    });
    return true;
  } catch (err) {
    throw new Error(`Unable to stop the background screen recording: ${err.message}`);
  }
}

commands.startRecordingScreen = async function (options = {}) {
  await verifyScreenRecordIsSupported(this.adb, this.isEmulator());
  let result = '';
  const {
    videoSize,
    timeLimit = DEFAULT_RECORDING_TIME_SEC,
    bugReport,
    bitRate,
    forceRestart
  } = options;

  if (!forceRestart) {
    result = await this.stopRecordingScreen(options);
  }

  if (await terminateBackgroundScreenRecording(this.adb, true)) {
    _logger.default.warn(`There were some ${SCREENRECORD_BINARY} process leftovers running ` + `in the background. Make sure you stop screen recording each time after it is started, ` + `otherwise the recorded media might quickly exceed all the free space on the device under test.`);
  }

  if (!_lodash.default.isEmpty(this._screenRecordingProperties)) {
    for (const record of this._screenRecordingProperties.records || []) {
      await this.adb.rimraf(record);
    }

    this._screenRecordingProperties = null;
  }

  const timeout = parseFloat(timeLimit);

  if (isNaN(timeout) || timeout > MAX_TIME_SEC || timeout <= 0) {
    throw new Error(`The timeLimit value must be in range [1, ${MAX_TIME_SEC}] seconds. ` + `The value of '${timeLimit}' has been passed instead.`);
  }

  this._screenRecordingProperties = {
    startTimestamp: process.hrtime(),
    videoSize,
    timeLimit,
    currentTimeLimit: timeLimit,
    bitRate,
    bugReport,
    records: [],
    recordingProcess: null,
    stopped: false
  };
  await scheduleScreenRecord(this.adb, this._screenRecordingProperties);
  return result;
};

commands.stopRecordingScreen = async function (options = {}) {
  await verifyScreenRecordIsSupported(this.adb, this.isEmulator());

  if (!_lodash.default.isEmpty(this._screenRecordingProperties)) {
    this._screenRecordingProperties.stopped = true;
  }

  try {
    await terminateBackgroundScreenRecording(this.adb, false);
  } catch (err) {
    _logger.default.warn(err.message);

    if (!_lodash.default.isEmpty(this._screenRecordingProperties)) {
      _logger.default.warn('The resulting video might be corrupted');
    }
  }

  if (_lodash.default.isEmpty(this._screenRecordingProperties)) {
    _logger.default.info(`Screen recording has not been previously started by Appium. There is nothing to stop`);

    return '';
  }

  if (this._screenRecordingProperties.recordingProcess && this._screenRecordingProperties.recordingProcess.isRunning) {
    try {
      await this._screenRecordingProperties.recordingProcess.stop('SIGINT', PROCESS_SHUTDOWN_TIMEOUT);
    } catch (e) {
      _logger.default.errorAndThrow(`Unable to stop screen recording within ${PROCESS_SHUTDOWN_TIMEOUT}ms`);
    }

    this._screenRecordingProperties.recordingProcess = null;
  }

  if (_lodash.default.isEmpty(this._screenRecordingProperties.records)) {
    _logger.default.errorAndThrow(`No screen recordings have been stored on the device so far. ` + `Are you sure the ${SCREENRECORD_BINARY} utility works as expected?`);
  }

  const tmpRoot = await _appiumSupport.tempDir.openDir();

  try {
    const localRecords = [];

    for (const pathOnDevice of this._screenRecordingProperties.records) {
      localRecords.push(_path.default.resolve(tmpRoot, _path.default.posix.basename(pathOnDevice)));
      await this.adb.pull(pathOnDevice, _lodash.default.last(localRecords));
      await this.adb.rimraf(pathOnDevice);
    }

    let resultFilePath = _lodash.default.last(localRecords);

    if (localRecords.length > 1) {
      _logger.default.info(`Got ${localRecords.length} screen recordings. Trying to merge them`);

      try {
        resultFilePath = await mergeScreenRecords(localRecords);
      } catch (e) {
        _logger.default.warn(`Cannot merge the recorded files. The most recent screen recording is going to be returned as the result. ` + `Original error: ${e.message}`);
      }
    }

    const {
      remotePath,
      user,
      pass,
      method
    } = options;
    return await uploadRecordedMedia(this.adb, resultFilePath, remotePath, {
      user,
      pass,
      method
    });
  } finally {
    await _appiumSupport.fs.rimraf(tmpRoot);
    this._screenRecordingProperties = null;
  }
};

Object.assign(extensions, commands);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
