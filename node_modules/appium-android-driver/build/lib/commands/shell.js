"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _shellQuote = require("shell-quote");

let commands = {};
exports.commands = commands;

commands.mobileShell = async function (opts = {}) {
  if (!this.relaxedSecurityEnabled) {
    _logger.default.errorAndThrow(`Appium server must have relaxed security flag set in order to run any shell commands`);
  }

  const {
    command,
    args = [],
    timeout = 20000,
    includeStderr
  } = opts;

  if (!_lodash.default.isString(command)) {
    _logger.default.errorAndThrow(`The 'command' argument is mandatory'`);
  }

  const adbArgs = [...this.adb.executable.defaultArgs, 'shell', command, ...(_lodash.default.isArray(args) ? args : [args])];

  _logger.default.debug(`Running '${this.adb.executable.path} ${(0, _shellQuote.quote)(adbArgs)}'`);

  try {
    const {
      stdout,
      stderr
    } = await (0, _teen_process.exec)(this.adb.executable.path, adbArgs, {
      timeout
    });

    if (includeStderr) {
      return {
        stdout,
        stderr
      };
    }

    return stdout;
  } catch (err) {
    _logger.default.errorAndThrow(`Cannot execute the '${command}' shell command. ` + `Original error: ${err.message}. ` + `StdOut: ${err.stdout}. StdErr: ${err.stderr}`);
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zaGVsbC5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsIm1vYmlsZVNoZWxsIiwib3B0cyIsInJlbGF4ZWRTZWN1cml0eUVuYWJsZWQiLCJsb2ciLCJlcnJvckFuZFRocm93IiwiY29tbWFuZCIsImFyZ3MiLCJ0aW1lb3V0IiwiaW5jbHVkZVN0ZGVyciIsIl8iLCJpc1N0cmluZyIsImFkYkFyZ3MiLCJhZGIiLCJleGVjdXRhYmxlIiwiZGVmYXVsdEFyZ3MiLCJpc0FycmF5IiwiZGVidWciLCJwYXRoIiwic3Rkb3V0Iiwic3RkZXJyIiwiZXJyIiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjs7O0FBRUFBLFFBQVEsQ0FBQ0MsV0FBVCxHQUF1QixnQkFBZ0JDLElBQUksR0FBRyxFQUF2QixFQUEyQjtBQUNoRCxNQUFJLENBQUMsS0FBS0Msc0JBQVYsRUFBa0M7QUFDaENDLG9CQUFJQyxhQUFKLENBQW1CLHNGQUFuQjtBQUNEOztBQUVELFFBQU07QUFDSkMsSUFBQUEsT0FESTtBQUVKQyxJQUFBQSxJQUFJLEdBQUcsRUFGSDtBQUdKQyxJQUFBQSxPQUFPLEdBQUcsS0FITjtBQUlKQyxJQUFBQTtBQUpJLE1BS0ZQLElBTEo7O0FBT0EsTUFBSSxDQUFDUSxnQkFBRUMsUUFBRixDQUFXTCxPQUFYLENBQUwsRUFBMEI7QUFDeEJGLG9CQUFJQyxhQUFKLENBQW1CLHNDQUFuQjtBQUNEOztBQUVELFFBQU1PLE9BQU8sR0FBRyxDQUNkLEdBQUcsS0FBS0MsR0FBTCxDQUFTQyxVQUFULENBQW9CQyxXQURULEVBRWQsT0FGYyxFQUdkVCxPQUhjLEVBSWQsSUFBSUksZ0JBQUVNLE9BQUYsQ0FBVVQsSUFBVixJQUFrQkEsSUFBbEIsR0FBeUIsQ0FBQ0EsSUFBRCxDQUE3QixDQUpjLENBQWhCOztBQU1BSCxrQkFBSWEsS0FBSixDQUFXLFlBQVcsS0FBS0osR0FBTCxDQUFTQyxVQUFULENBQW9CSSxJQUFLLElBQUcsdUJBQU1OLE9BQU4sQ0FBZSxHQUFqRTs7QUFDQSxNQUFJO0FBQ0YsVUFBTTtBQUFDTyxNQUFBQSxNQUFEO0FBQVNDLE1BQUFBO0FBQVQsUUFBbUIsTUFBTSx3QkFBSyxLQUFLUCxHQUFMLENBQVNDLFVBQVQsQ0FBb0JJLElBQXpCLEVBQStCTixPQUEvQixFQUF3QztBQUFDSixNQUFBQTtBQUFELEtBQXhDLENBQS9COztBQUNBLFFBQUlDLGFBQUosRUFBbUI7QUFDakIsYUFBTztBQUNMVSxRQUFBQSxNQURLO0FBRUxDLFFBQUFBO0FBRkssT0FBUDtBQUlEOztBQUNELFdBQU9ELE1BQVA7QUFDRCxHQVRELENBU0UsT0FBT0UsR0FBUCxFQUFZO0FBQ1pqQixvQkFBSUMsYUFBSixDQUFtQix1QkFBc0JDLE9BQVEsbUJBQS9CLEdBQ0MsbUJBQWtCZSxHQUFHLENBQUNDLE9BQVEsSUFEL0IsR0FFQyxXQUFVRCxHQUFHLENBQUNGLE1BQU8sYUFBWUUsR0FBRyxDQUFDRCxNQUFPLEVBRi9EO0FBR0Q7QUFDRixDQXJDRDs7ZUF3Q2VwQixRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHsgcXVvdGUgfSBmcm9tICdzaGVsbC1xdW90ZSc7XG5cbmxldCBjb21tYW5kcyA9IHt9O1xuXG5jb21tYW5kcy5tb2JpbGVTaGVsbCA9IGFzeW5jIGZ1bmN0aW9uIChvcHRzID0ge30pIHtcbiAgaWYgKCF0aGlzLnJlbGF4ZWRTZWN1cml0eUVuYWJsZWQpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgQXBwaXVtIHNlcnZlciBtdXN0IGhhdmUgcmVsYXhlZCBzZWN1cml0eSBmbGFnIHNldCBpbiBvcmRlciB0byBydW4gYW55IHNoZWxsIGNvbW1hbmRzYCk7XG4gIH1cblxuICBjb25zdCB7XG4gICAgY29tbWFuZCxcbiAgICBhcmdzID0gW10sXG4gICAgdGltZW91dCA9IDIwMDAwLFxuICAgIGluY2x1ZGVTdGRlcnIsXG4gIH0gPSBvcHRzO1xuXG4gIGlmICghXy5pc1N0cmluZyhjb21tYW5kKSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBUaGUgJ2NvbW1hbmQnIGFyZ3VtZW50IGlzIG1hbmRhdG9yeSdgKTtcbiAgfVxuXG4gIGNvbnN0IGFkYkFyZ3MgPSBbXG4gICAgLi4udGhpcy5hZGIuZXhlY3V0YWJsZS5kZWZhdWx0QXJncyxcbiAgICAnc2hlbGwnLFxuICAgIGNvbW1hbmQsXG4gICAgLi4uKF8uaXNBcnJheShhcmdzKSA/IGFyZ3MgOiBbYXJnc10pXG4gIF07XG4gIGxvZy5kZWJ1ZyhgUnVubmluZyAnJHt0aGlzLmFkYi5leGVjdXRhYmxlLnBhdGh9ICR7cXVvdGUoYWRiQXJncyl9J2ApO1xuICB0cnkge1xuICAgIGNvbnN0IHtzdGRvdXQsIHN0ZGVycn0gPSBhd2FpdCBleGVjKHRoaXMuYWRiLmV4ZWN1dGFibGUucGF0aCwgYWRiQXJncywge3RpbWVvdXR9KTtcbiAgICBpZiAoaW5jbHVkZVN0ZGVycikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3Rkb3V0LFxuICAgICAgICBzdGRlcnJcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBzdGRvdXQ7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBDYW5ub3QgZXhlY3V0ZSB0aGUgJyR7Y29tbWFuZH0nIHNoZWxsIGNvbW1hbmQuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtlcnIubWVzc2FnZX0uIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGBTdGRPdXQ6ICR7ZXJyLnN0ZG91dH0uIFN0ZEVycjogJHtlcnIuc3RkZXJyfWApO1xuICB9XG59O1xuXG5leHBvcnQgeyBjb21tYW5kcyB9O1xuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9zaGVsbC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
