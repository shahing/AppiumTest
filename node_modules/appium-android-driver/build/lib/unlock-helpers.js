"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.FINGERPRINT_UNLOCK = exports.PATTERN_UNLOCK = exports.PASSWORD_UNLOCK = exports.PIN_UNLOCK = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

const PIN_UNLOCK = "pin";
exports.PIN_UNLOCK = PIN_UNLOCK;
const PASSWORD_UNLOCK = "password";
exports.PASSWORD_UNLOCK = PASSWORD_UNLOCK;
const PATTERN_UNLOCK = "pattern";
exports.PATTERN_UNLOCK = PATTERN_UNLOCK;
const FINGERPRINT_UNLOCK = "fingerprint";
exports.FINGERPRINT_UNLOCK = FINGERPRINT_UNLOCK;
const UNLOCK_TYPES = [PIN_UNLOCK, PASSWORD_UNLOCK, PATTERN_UNLOCK, FINGERPRINT_UNLOCK];
const KEYCODE_NUMPAD_ENTER = "66";
const UNLOCK_WAIT_TIME = 100;
const HIDE_KEYBOARD_WAIT_TIME = 100;
const INPUT_KEYS_WAIT_TIME = 100;
let helpers = {};
exports.helpers = helpers;

helpers.isValidUnlockType = function (type) {
  return UNLOCK_TYPES.indexOf(type) !== -1;
};

helpers.isValidKey = function (type, key) {
  if (_lodash.default.isUndefined(key)) {
    return false;
  }

  if (type === PIN_UNLOCK || type === FINGERPRINT_UNLOCK) {
    return /^[0-9]+$/.test(key.trim());
  }

  if (type === PATTERN_UNLOCK) {
    if (!/^[1-9]{2,9}$/.test(key.trim())) {
      return false;
    }

    return !/([1-9]).*?\1/.test(key.trim());
  }

  if (type === PASSWORD_UNLOCK) {
    return /.{4,}/g.test(key);
  }

  throw new Error(`Invalid unlock type ${type}`);
};

helpers.dismissKeyguard = async function (driver, adb) {
  let isKeyboardShown = await driver.isKeyboardShown();

  if (isKeyboardShown) {
    await driver.hideKeyboard();
    await (0, _asyncbox.sleep)(HIDE_KEYBOARD_WAIT_TIME);
  }

  _logger.default.info("Dismiss notifications from unlock view");

  await adb.shell(["service", "call", "notification", "1"]);
  await adb.back();

  if ((await adb.getApiLevel()) > 21) {
    _logger.default.info("Trying to dismiss keyguard");

    await adb.shell(["wm", "dismiss-keyguard"]);
    return;
  }

  _logger.default.info("Swiping up to dismiss keyguard");

  await helpers.swipeUp(driver);
};

helpers.swipeUp = async function (driver) {
  let windowSize = await driver.getWindowSize();
  let x0 = parseInt(windowSize.x / 2, 10);
  let y0 = windowSize.y - 10;
  let yP = 100;
  let actions = [{
    action: 'press',
    options: {
      element: null,
      x: x0,
      y: y0
    }
  }, {
    action: 'moveTo',
    options: {
      element: null,
      x: x0,
      y: yP
    }
  }, {
    action: 'release'
  }];
  await driver.performTouch(actions);
};

helpers.encodePassword = function (key) {
  return key.replace(/\s/ig, "%s");
};

helpers.stringKeyToArr = function (key) {
  return key.trim().replace(/\s+/g, '').split(/\s*/);
};

helpers.fingerprintUnlock = async function (adb, driver, capabilities) {
  if ((await adb.getApiLevel()) < 23) {
    throw new Error("Fingerprint unlock only works for Android 6+ emulators");
  }

  await adb.fingerprint(capabilities.unlockKey);
  await (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
};

helpers.pinUnlock = async function (adb, driver, capabilities) {
  _logger.default.info(`Trying to unlock device using pin ${capabilities.unlockKey}`);

  await helpers.dismissKeyguard(driver, adb);
  let keys = helpers.stringKeyToArr(capabilities.unlockKey);

  if ((await adb.getApiLevel()) >= 21) {
    let els = await driver.findElOrEls("id", "com.android.systemui:id/digit_text", true);

    if (_lodash.default.isEmpty(els)) {
      throw new Error("Error finding unlock pin buttons!");
    }

    let pins = {};

    for (let el of els) {
      let text = await driver.getAttribute("text", _appiumSupport.util.unwrapElement(el));
      pins[text] = el;
    }

    for (let pin of keys) {
      let el = pins[pin];
      await driver.click(_appiumSupport.util.unwrapElement(el));
    }
  } else {
    for (let pin of keys) {
      let el = await driver.findElOrEls('id', `com.android.keyguard:id/key${pin}`, false);

      if (el === null) {
        throw new Error(`Error finding unlock pin '${pin}' button!`);
      }

      await driver.click(_appiumSupport.util.unwrapElement(el));
    }
  }

  const el = await driver.findElOrEls('xpath', "//*[contains(@resource-id, 'id/key_enter')]", false);
  await driver.click(_appiumSupport.util.unwrapElement(el));
  await (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
};

helpers.passwordUnlock = async function (adb, driver, capabilities) {
  _logger.default.info(`Trying to unlock device using password ${capabilities.unlockKey}`);

  await helpers.dismissKeyguard(driver, adb);
  let key = capabilities.unlockKey;
  key = helpers.encodePassword(key);
  await adb.shell(["input", "text", key]);
  await (0, _asyncbox.sleep)(INPUT_KEYS_WAIT_TIME);
  await adb.shell(["input", "keyevent", KEYCODE_NUMPAD_ENTER]);
  await (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
};

helpers.getPatternKeyPosition = function (key, initPos, piece) {
  const cols = 3;
  const pins = 9;

  let xPos = (key, x, piece) => {
    return Math.round(x + (key % cols || cols) * piece - piece / 2);
  };

  let yPos = (key, y, piece) => {
    return Math.round(y + (Math.ceil((key % pins || pins) / cols) * piece - piece / 2));
  };

  return {
    x: xPos(key, initPos.x, piece),
    y: yPos(key, initPos.y, piece)
  };
};

helpers.getPatternActions = function (keys, initPos, piece) {
  let actions = [];
  let lastPos;

  for (let key of keys) {
    let keyPos = helpers.getPatternKeyPosition(key, initPos, piece);

    if (key === keys[0]) {
      actions.push({
        action: 'press',
        options: {
          element: null,
          x: keyPos.x,
          y: keyPos.y
        }
      });
      lastPos = keyPos;
      continue;
    }

    let moveTo = {
      x: 0,
      y: 0
    };
    let diffX = keyPos.x - lastPos.x;

    if (diffX > 0) {
      moveTo.x = piece;

      if (Math.abs(diffX) > piece) {
        moveTo.x += piece;
      }
    } else if (diffX < 0) {
      moveTo.x = -1 * piece;

      if (Math.abs(diffX) > piece) {
        moveTo.x -= piece;
      }
    }

    let diffY = keyPos.y - lastPos.y;

    if (diffY > 0) {
      moveTo.y = piece;

      if (Math.abs(diffY) > piece) {
        moveTo.y += piece;
      }
    } else if (diffY < 0) {
      moveTo.y = -1 * piece;

      if (Math.abs(diffY) > piece) {
        moveTo.y -= piece;
      }
    }

    actions.push({
      action: 'moveTo',
      options: {
        element: null,
        x: moveTo.x,
        y: moveTo.y
      }
    });
    lastPos = keyPos;
  }

  actions.push({
    action: 'release'
  });
  return actions;
};

helpers.patternUnlock = async function (adb, driver, capabilities) {
  _logger.default.info(`Trying to unlock device using pattern ${capabilities.unlockKey}`);

  await helpers.dismissKeyguard(driver, adb);
  let keys = helpers.stringKeyToArr(capabilities.unlockKey);
  let apiLevel = await adb.getApiLevel();
  let el = await driver.findElOrEls("id", `com.android.${apiLevel >= 21 ? 'systemui' : 'keyguard'}:id/lockPatternView`, false);
  let initPos = await driver.getLocation(_appiumSupport.util.unwrapElement(el));
  let size = await driver.getSize(_appiumSupport.util.unwrapElement(el));
  let actions = helpers.getPatternActions(keys, initPos, size.width / 3);
  await driver.performTouch(actions);
  await (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
};

helpers.PIN_UNLOCK = PIN_UNLOCK;
helpers.PASSWORD_UNLOCK = PASSWORD_UNLOCK;
helpers.PATTERN_UNLOCK = PATTERN_UNLOCK;
helpers.FINGERPRINT_UNLOCK = FINGERPRINT_UNLOCK;
var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
