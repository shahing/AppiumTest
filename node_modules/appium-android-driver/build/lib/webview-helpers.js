"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CHROMIUM_WIN = exports.WEBVIEW_BASE = exports.WEBVIEW_WIN = exports.NATIVE_WIN = exports.helpers = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _asyncbox = require("asyncbox");

const NATIVE_WIN = "NATIVE_APP";
exports.NATIVE_WIN = NATIVE_WIN;
const WEBVIEW_WIN = "WEBVIEW";
exports.WEBVIEW_WIN = WEBVIEW_WIN;
const WEBVIEW_BASE = `${WEBVIEW_WIN}_`;
exports.WEBVIEW_BASE = WEBVIEW_BASE;
const WEBVIEW_REGEXP = new RegExp(`@?webview_devtools_remote_(\\d+)`);
const WEBVIEW_PID_REGEXP = new RegExp(`${WEBVIEW_BASE}(\\d+)`);
const CHROMIUM_WIN = "CHROMIUM";
exports.CHROMIUM_WIN = CHROMIUM_WIN;
const CROSSWALK_SOCKET_SUFFIX = "_devtools_remote";
const CROSSWALK_REGEXP_STRING = `(\\S*)${CROSSWALK_SOCKET_SUFFIX}`;
const CROSSWALK_REGEXP = new RegExp(`@${CROSSWALK_REGEXP_STRING}`);
const CROSSWALK_PROCESS_REGEXP = new RegExp(WEBVIEW_BASE + CROSSWALK_REGEXP_STRING);
let helpers = {};
exports.helpers = helpers;

async function webviewsFromProcs(adb, deviceSocket) {
  let webviews = [];
  let out = await adb.shell(["cat", "/proc/net/unix"]);

  for (let line of out.split("\n")) {
    line = line.trim();

    if (deviceSocket) {
      if (line.indexOf(`@${deviceSocket}`) === line.length - deviceSocket.length - 1) {
        if (deviceSocket === "chrome_devtools_remote") {
          webviews.push(CHROMIUM_WIN);
          continue;
        }
      }
    }

    let webviewPid;
    let crosswalkWebviewSocket;

    if (webviewPid = line.match(WEBVIEW_REGEXP)) {
      webviews.push(`${WEBVIEW_BASE}${webviewPid[1]}`);
    } else if (crosswalkWebviewSocket = line.match(CROSSWALK_REGEXP)) {
      if (deviceSocket) {
        if (crosswalkWebviewSocket[0].slice(1) === deviceSocket) {
          webviews.push(`${WEBVIEW_BASE}${crosswalkWebviewSocket[1]}`);
        }
      } else {
        webviews.push(`${WEBVIEW_BASE}${crosswalkWebviewSocket[1]}${CROSSWALK_SOCKET_SUFFIX}`);
      }
    }
  }

  return _lodash.default.uniq(webviews);
}

helpers.procFromWebview = async function (adb, webview) {
  if (webview.match(WEBVIEW_PID_REGEXP) === null) {
    let processName = webview.match(CROSSWALK_PROCESS_REGEXP);

    if (processName === null) {
      throw new Error(`Could not find process name for webview ${webview}`);
    }

    return processName[1];
  }

  let pid = webview.match(/\d+$/);

  if (!pid) {
    throw new Error(`Could not find PID for webview ${webview}`);
  }

  pid = pid[0];

  _logger.default.debug(`${webview} mapped to pid ${pid}`);

  _logger.default.debug("Getting process name for webview");

  let out = await adb.shell("ps");
  let pkg = "unknown";
  let lines = out.split(/\r?\n/);
  const fullHeader = lines[0].trim();
  const header = fullHeader.split(/\s+/);
  const pidColumn = header.indexOf('PID');

  for (let line of lines) {
    const entries = line.trim().split(/\s+/);
    const pidEntry = entries[pidColumn];

    if (pidEntry === pid) {
      pkg = _lodash.default.last(entries);

      _logger.default.debug(`Parsed pid: '${pidEntry}' pkg: '${pkg}' from`);

      _logger.default.debug(`    ${fullHeader}`);

      _logger.default.debug(`    ${line}`);

      break;
    }
  }

  _logger.default.debug(`Returning process name: '${pkg}'`);

  return pkg;
};

helpers.getWebviews = async function (adb, deviceSocket) {
  _logger.default.debug("Getting a list of available webviews");

  let webviews = await webviewsFromProcs(adb, deviceSocket);

  if (deviceSocket) {
    return webviews;
  }

  webviews = await (0, _asyncbox.asyncmap)(webviews, async webviewName => {
    let pkg = await helpers.procFromWebview(adb, webviewName);
    return WEBVIEW_BASE + pkg;
  });

  _logger.default.debug(`Found webviews: ${JSON.stringify(webviews)}`);

  return webviews;
};

helpers.decorateChromeOptions = function (caps, opts, deviceId) {
  if (opts.chromeOptions) {
    if (opts.chromeOptions.Arguments) {
      opts.chromeOptions.args = [...(opts.chromeOptions.args || []), ...opts.chromeOptions.Arguments];
      delete opts.chromeOptions.Arguments;
    }

    for (let [opt, val] of _lodash.default.toPairs(opts.chromeOptions)) {
      if (_lodash.default.isUndefined(caps.chromeOptions[opt])) {
        caps.chromeOptions[opt] = val;
      } else {
        _logger.default.warn(`Cannot pass option ${caps.chromeOptions[opt]} because ` + "Appium needs it to make chromeDriver work");
      }
    }
  }

  caps.chromeOptions.androidDeviceSerial = deviceId;
  return caps;
};

var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi93ZWJ2aWV3LWhlbHBlcnMuanMiXSwibmFtZXMiOlsiTkFUSVZFX1dJTiIsIldFQlZJRVdfV0lOIiwiV0VCVklFV19CQVNFIiwiV0VCVklFV19SRUdFWFAiLCJSZWdFeHAiLCJXRUJWSUVXX1BJRF9SRUdFWFAiLCJDSFJPTUlVTV9XSU4iLCJDUk9TU1dBTEtfU09DS0VUX1NVRkZJWCIsIkNST1NTV0FMS19SRUdFWFBfU1RSSU5HIiwiQ1JPU1NXQUxLX1JFR0VYUCIsIkNST1NTV0FMS19QUk9DRVNTX1JFR0VYUCIsImhlbHBlcnMiLCJ3ZWJ2aWV3c0Zyb21Qcm9jcyIsImFkYiIsImRldmljZVNvY2tldCIsIndlYnZpZXdzIiwib3V0Iiwic2hlbGwiLCJsaW5lIiwic3BsaXQiLCJ0cmltIiwiaW5kZXhPZiIsImxlbmd0aCIsInB1c2giLCJ3ZWJ2aWV3UGlkIiwiY3Jvc3N3YWxrV2Vidmlld1NvY2tldCIsIm1hdGNoIiwic2xpY2UiLCJfIiwidW5pcSIsInByb2NGcm9tV2VidmlldyIsIndlYnZpZXciLCJwcm9jZXNzTmFtZSIsIkVycm9yIiwicGlkIiwibG9nZ2VyIiwiZGVidWciLCJwa2ciLCJsaW5lcyIsImZ1bGxIZWFkZXIiLCJoZWFkZXIiLCJwaWRDb2x1bW4iLCJlbnRyaWVzIiwicGlkRW50cnkiLCJsYXN0IiwiZ2V0V2Vidmlld3MiLCJ3ZWJ2aWV3TmFtZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZWNvcmF0ZUNocm9tZU9wdGlvbnMiLCJjYXBzIiwib3B0cyIsImRldmljZUlkIiwiY2hyb21lT3B0aW9ucyIsIkFyZ3VtZW50cyIsImFyZ3MiLCJvcHQiLCJ2YWwiLCJ0b1BhaXJzIiwiaXNVbmRlZmluZWQiLCJ3YXJuIiwiYW5kcm9pZERldmljZVNlcmlhbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxVQUFVLEdBQUcsWUFBbkI7O0FBQ0EsTUFBTUMsV0FBVyxHQUFHLFNBQXBCOztBQUNBLE1B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bUJFLElBQW5CLElBQTJCLEVBQS9CLENBQUQsRUFBcUMsR0FBR0osSUFBSSxDQUFDRSxhQUFMLENBQW1CQyxTQUEzRCxDQUExQjtBQUNBLGFBQU9ILElBQUksQ0FBQ0UsYUFBTCxDQUFtQkMsU0FBMUI7QUFDRDs7QUFDRCxTQUFLLElBQUksQ0FBQ0UsR0FBRCxFQUFNQyxHQUFOLENBQVQsSUFBdUI3QixnQkFBRThCLE9BQUYsQ0FBVVAsSUFBSSxDQUFDRSxhQUFmLENBQXZCLEVBQXNEO0FBQ3BELFVBQUl6QixnQkFBRStCLFdBQUYsQ0FBY1QsSUFBSSxDQUFDRyxhQUFMLENBQW1CRyxHQUFuQixDQUFkLENBQUosRUFBNEM7QUFDMUNOLFFBQUFBLElBQUksQ0FBQ0csYUFBTCxDQUFtQkcsR0FBbkIsSUFBMEJDLEdBQTFCO0FBQ0QsT0FGRCxNQUVPO0FBQ0x0Qix3QkFBT3lCLElBQVAsQ0FBYSxzQkFBcUJWLElBQUksQ0FBQ0csYUFBTCxDQUFtQkcsR0FBbkIsQ0FBd0IsV0FBOUMsR0FDQSwyQ0FEWjtBQUVEO0FBQ0Y7QUFDRjs7QUFHRE4sRUFBQUEsSUFBSSxDQUFDRyxhQUFMLENBQW1CUSxtQkFBbkIsR0FBeUNULFFBQXpDO0FBQ0EsU0FBT0YsSUFBUDtBQUNELENBckJEOztlQXVCZXZDLE8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBhc3luY21hcCB9IGZyb20gJ2FzeW5jYm94JztcblxuY29uc3QgTkFUSVZFX1dJTiA9IFwiTkFUSVZFX0FQUFwiO1xuY29uc3QgV0VCVklFV19XSU4gPSBcIldFQlZJRVdcIjtcbmNvbnN0IFdFQlZJRVdfQkFTRSA9IGAke1dFQlZJRVdfV0lOfV9gO1xuY29uc3QgV0VCVklFV19SRUdFWFAgPSBuZXcgUmVnRXhwKGBAP3dlYnZpZXdfZGV2dG9vbHNfcmVtb3RlXyhcXFxcZCspYCk7XG5jb25zdCBXRUJWSUVXX1BJRF9SRUdFWFAgPSBuZXcgUmVnRXhwKGAke1dFQlZJRVdfQkFTRX0oXFxcXGQrKWApO1xuY29uc3QgQ0hST01JVU1fV0lOID0gXCJDSFJPTUlVTVwiO1xuY29uc3QgQ1JPU1NXQUxLX1NPQ0tFVF9TVUZGSVggPSBcIl9kZXZ0b29sc19yZW1vdGVcIjtcbmNvbnN0IENST1NTV0FMS19SRUdFWFBfU1RSSU5HID0gYChcXFxcUyopJHtDUk9TU1dBTEtfU09DS0VUX1NVRkZJWH1gO1xuY29uc3QgQ1JPU1NXQUxLX1JFR0VYUCA9IG5ldyBSZWdFeHAoYEAke0NST1NTV0FMS19SRUdFWFBfU1RSSU5HfWApO1xuY29uc3QgQ1JPU1NXQUxLX1BST0NFU1NfUkVHRVhQID0gbmV3IFJlZ0V4cChXRUJWSUVXX0JBU0UgKyBDUk9TU1dBTEtfUkVHRVhQX1NUUklORyk7XG5cblxubGV0IGhlbHBlcnMgPSB7fTtcblxuLy8gVGhpcyBmdW5jdGlvbiBnZXRzIGEgbGlzdCBvZiBhbmRyb2lkIHN5c3RlbSBwcm9jZXNzZXMgYW5kIHJldHVybnMgb25lc1xuLy8gdGhhdCBsb29rIGxpa2Ugd2Vidmlld3MsIHdpdGggdGhlIGFwcHJvcHJpYXRlIHdlYnZpZXcgcHJlZml4IGFuZCB0aGVpciBQSUQuXG4vLyBJZiB3ZSBwYXNzIGluIGEgZGV2aWNlU29ja2V0LCB3ZSBvbmx5IGF0dGVtcHQgdG8gZmluZCB3ZWJ2aWV3cyB3aGljaCBtYXRjaFxuLy8gdGhhdCBzb2NrZXQgbmFtZSAodGhpcyBpcyBmb3IgYXBwcyB3aGljaCBlbWJlZCBDaHJvbWl1bSwgd2hpY2ggaXNuJ3QgdGhlXG4vLyBzYW1lIGFzIGNocm9tZS1iYWNrZWQgd2Vidmlld3MpXG4vLyBUT0RPOiBzb21lIG9mIHRoaXMgZnVuY3Rpb24gYmVsb25ncyBpbiBhcHBpdW0tYWRiXG5hc3luYyBmdW5jdGlvbiB3ZWJ2aWV3c0Zyb21Qcm9jcyAoYWRiLCBkZXZpY2VTb2NrZXQpIHtcbiAgbGV0IHdlYnZpZXdzID0gW107XG4gIGxldCBvdXQgPSBhd2FpdCBhZGIuc2hlbGwoW1wiY2F0XCIsIFwiL3Byb2MvbmV0L3VuaXhcIl0pO1xuICBmb3IgKGxldCBsaW5lIG9mIG91dC5zcGxpdChcIlxcblwiKSkge1xuICAgIGxpbmUgPSBsaW5lLnRyaW0oKTtcblxuICAgIGlmIChkZXZpY2VTb2NrZXQpIHtcbiAgICAgIGlmIChsaW5lLmluZGV4T2YoYEAke2RldmljZVNvY2tldH1gKSA9PT0gbGluZS5sZW5ndGggLSBkZXZpY2VTb2NrZXQubGVuZ3RoIC0gMSkge1xuICAgICAgICBpZiAoZGV2aWNlU29ja2V0ID09PSBcImNocm9tZV9kZXZ0b29sc19yZW1vdGVcIikge1xuICAgICAgICAgIHdlYnZpZXdzLnB1c2goQ0hST01JVU1fV0lOKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCB3ZWJ2aWV3UGlkO1xuICAgIGxldCBjcm9zc3dhbGtXZWJ2aWV3U29ja2V0O1xuICAgIGlmICgod2Vidmlld1BpZCA9IGxpbmUubWF0Y2goV0VCVklFV19SRUdFWFApKSkge1xuICAgICAgLy8gZm9yIG11bHRpcGxlIHdlYnZpZXdzIGEgbGlzdCBvZiAnV0VCVklFV188aW5kZXg+JyB3aWxsIGJlIHJldHVybmVkXG4gICAgICAvLyB3aGVyZSA8aW5kZXg+IGlzIHplcm8gYmFzZWQgKHNhbWUgaXMgaW4gc2VsZW5kcm9pZClcbiAgICAgIHdlYnZpZXdzLnB1c2goYCR7V0VCVklFV19CQVNFfSR7d2Vidmlld1BpZFsxXX1gKTtcbiAgICB9IGVsc2UgaWYgKChjcm9zc3dhbGtXZWJ2aWV3U29ja2V0ID0gbGluZS5tYXRjaChDUk9TU1dBTEtfUkVHRVhQKSkpIHtcbiAgICAgIGlmIChkZXZpY2VTb2NrZXQpIHtcbiAgICAgICAgaWYgKGNyb3Nzd2Fsa1dlYnZpZXdTb2NrZXRbMF0uc2xpY2UoMSkgPT09IGRldmljZVNvY2tldCkge1xuICAgICAgICAgIHdlYnZpZXdzLnB1c2goYCR7V0VCVklFV19CQVNFfSR7Y3Jvc3N3YWxrV2Vidmlld1NvY2tldFsxXX1gKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2Vidmlld3MucHVzaChgJHtXRUJWSUVXX0JBU0V9JHtjcm9zc3dhbGtXZWJ2aWV3U29ja2V0WzFdfSR7Q1JPU1NXQUxLX1NPQ0tFVF9TVUZGSVh9YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBfLnVuaXEod2Vidmlld3MpO1xufVxuXG4vLyBUYWtlIGEgd2VidmlldyBuYW1lIGxpa2UgV0VCVklFV180Mjk2IGFuZCB1c2UgJ2FkYiBzaGVsbCBwcycgdG8gZmlndXJlIG91dFxuLy8gd2hpY2ggYXBwIHBhY2thZ2UgaXMgYXNzb2NpYXRlZCB3aXRoIHRoYXQgd2Vidmlldy4gT25lIG9mIHRoZSByZWFzb25zIHdlXG4vLyB3YW50IHRvIGRvIHRoaXMgaXMgdG8gbWFrZSBzdXJlIHdlJ3JlIGxpc3Rpbmcgd2Vidmlld3MgZm9yIHRoZSBhY3R1YWwgQVVULFxuLy8gbm90IHNvbWUgb3RoZXIgcnVubmluZyBhcHBcbi8vIFRPRE86IHRoaXMgc2hvdWxkIGJlIGNhbGxlZCBwcm9jRnJvbVBpZCBhbmQgZXhpc3QgaW4gYXBwaXVtLWFkYlxuaGVscGVycy5wcm9jRnJvbVdlYnZpZXcgPSBhc3luYyBmdW5jdGlvbiAoYWRiLCB3ZWJ2aWV3KSB7XG4gIGlmICh3ZWJ2aWV3Lm1hdGNoKFdFQlZJRVdfUElEX1JFR0VYUCkgPT09IG51bGwpIHtcbiAgICBsZXQgcHJvY2Vzc05hbWUgPSB3ZWJ2aWV3Lm1hdGNoKENST1NTV0FMS19QUk9DRVNTX1JFR0VYUCk7XG4gICAgaWYgKHByb2Nlc3NOYW1lID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kIHByb2Nlc3MgbmFtZSBmb3Igd2VidmlldyAke3dlYnZpZXd9YCk7XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzTmFtZVsxXTtcbiAgfVxuXG4gIC8vIHdlYnZpZXdfZGV2dG9vbHNfcmVtb3RlXzQyOTYgPT4gNDI5NlxuICBsZXQgcGlkID0gd2Vidmlldy5tYXRjaCgvXFxkKyQvKTtcbiAgaWYgKCFwaWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kIFBJRCBmb3Igd2VidmlldyAke3dlYnZpZXd9YCk7XG4gIH1cbiAgcGlkID0gcGlkWzBdO1xuICBsb2dnZXIuZGVidWcoYCR7d2Vidmlld30gbWFwcGVkIHRvIHBpZCAke3BpZH1gKTtcbiAgbG9nZ2VyLmRlYnVnKFwiR2V0dGluZyBwcm9jZXNzIG5hbWUgZm9yIHdlYnZpZXdcIik7XG4gIGxldCBvdXQgPSBhd2FpdCBhZGIuc2hlbGwoXCJwc1wiKTtcbiAgbGV0IHBrZyA9IFwidW5rbm93blwiO1xuICBsZXQgbGluZXMgPSBvdXQuc3BsaXQoL1xccj9cXG4vKTtcblxuICAvKiBPdXRwdXQgb2YgcHMgaXMgbGlrZTpcbiAgIFVTRVIgICAgICAgUElEICBQUElEICBWU0laRSAgUlNTICAgV0NIQU4gICAgUEMgICAgICAgICBOQU1FICBfb3JfXG4gICBVU0VSICAgICAgIFBJRCAgUFBJRCAgVlNaICAgIFJTUyAgIFdDSEFOICAgIEFERFIgICAgIFMgTkFNRVxuICAgdTBfYTEzNiAgIDYyNDggIDE3OSAgIDk0NjAwMCA0ODE0NCBmZmZmZmZmZiA0MDA1OTAzZSBSIGNvbS5leGFtcGxlLnRlc3RcbiAgIHUwX2ExMzYgICA2MjQ5ICAxNzkgICA5NDYwMDAgNDgxNDQgZmZmZmZmZmYgICAgICAgICAgUiBjb20uZXhhbXBsZS50ZXN0XG4gICovXG4gIGNvbnN0IGZ1bGxIZWFkZXIgPSBsaW5lc1swXS50cmltKCk7XG4gIGNvbnN0IGhlYWRlciA9IGZ1bGxIZWFkZXIuc3BsaXQoL1xccysvKTtcbiAgY29uc3QgcGlkQ29sdW1uID0gaGVhZGVyLmluZGV4T2YoJ1BJRCcpO1xuXG4gIGZvciAobGV0IGxpbmUgb2YgbGluZXMpIHtcbiAgICBjb25zdCBlbnRyaWVzID0gbGluZS50cmltKCkuc3BsaXQoL1xccysvKTtcbiAgICBjb25zdCBwaWRFbnRyeSA9IGVudHJpZXNbcGlkQ29sdW1uXTtcbiAgICBpZiAocGlkRW50cnkgPT09IHBpZCkge1xuICAgICAgcGtnID0gXy5sYXN0KGVudHJpZXMpO1xuICAgICAgbG9nZ2VyLmRlYnVnKGBQYXJzZWQgcGlkOiAnJHtwaWRFbnRyeX0nIHBrZzogJyR7cGtnfScgZnJvbWApO1xuICAgICAgbG9nZ2VyLmRlYnVnKGAgICAgJHtmdWxsSGVhZGVyfWApO1xuICAgICAgbG9nZ2VyLmRlYnVnKGAgICAgJHtsaW5lfWApO1xuXG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBsb2dnZXIuZGVidWcoYFJldHVybmluZyBwcm9jZXNzIG5hbWU6ICcke3BrZ30nYCk7XG4gIHJldHVybiBwa2c7XG59O1xuXG4vLyBHZXQgYSBsaXN0IG9mIGF2YWlsYWJsZSB3ZWJ2aWV3cyBieSBpbnRyb3NwZWN0aW5nIHByb2Nlc3NlcyB3aXRoIGFkYiwgd2hlcmVcbi8vIHdlYnZpZXdzIGFyZSBsaXN0ZWQuIEl0J3MgcG9zc2libGUgdG8gcGFzcyBpbiBhICdkZXZpY2VTb2NrZXQnIGFyZywgd2hpY2hcbi8vIGxpbWl0cyB0aGUgd2VidmlldyBwb3NzaWJpbGl0aWVzIHRvIHRoZSBvbmUgcnVubmluZyBvbiB0aGUgQ2hyb21pdW0gZGV2dG9vbHNcbi8vIHNvY2tldCB3ZSdyZSBpbnRlcmVzdGVkIGluIChzZWUgbm90ZSBvbiB3ZWJ2aWV3c0Zyb21Qcm9jcylcbmhlbHBlcnMuZ2V0V2Vidmlld3MgPSBhc3luYyBmdW5jdGlvbiAoYWRiLCBkZXZpY2VTb2NrZXQpIHtcbiAgbG9nZ2VyLmRlYnVnKFwiR2V0dGluZyBhIGxpc3Qgb2YgYXZhaWxhYmxlIHdlYnZpZXdzXCIpO1xuICBsZXQgd2Vidmlld3MgPSBhd2FpdCB3ZWJ2aWV3c0Zyb21Qcm9jcyhhZGIsIGRldmljZVNvY2tldCk7XG5cbiAgaWYgKGRldmljZVNvY2tldCkge1xuICAgIHJldHVybiB3ZWJ2aWV3cztcbiAgfVxuXG4gIHdlYnZpZXdzID0gYXdhaXQgYXN5bmNtYXAod2Vidmlld3MsIGFzeW5jICh3ZWJ2aWV3TmFtZSkgPT4ge1xuICAgIGxldCBwa2cgPSBhd2FpdCBoZWxwZXJzLnByb2NGcm9tV2VidmlldyhhZGIsIHdlYnZpZXdOYW1lKTtcbiAgICByZXR1cm4gV0VCVklFV19CQVNFICsgcGtnO1xuICB9KTtcbiAgbG9nZ2VyLmRlYnVnKGBGb3VuZCB3ZWJ2aWV3czogJHtKU09OLnN0cmluZ2lmeSh3ZWJ2aWV3cyl9YCk7XG4gIHJldHVybiB3ZWJ2aWV3cztcbn07XG5cbmhlbHBlcnMuZGVjb3JhdGVDaHJvbWVPcHRpb25zID0gZnVuY3Rpb24gKGNhcHMsIG9wdHMsIGRldmljZUlkKSB7XG4gIC8vIGFkZCBvcHRpb25zIGZyb20gYXBwaXVtIHNlc3Npb24gY2Fwc1xuICBpZiAob3B0cy5jaHJvbWVPcHRpb25zKSB7XG4gICAgaWYgKG9wdHMuY2hyb21lT3B0aW9ucy5Bcmd1bWVudHMpIHtcbiAgICAgIC8vIG1lcmdlIGBBcmd1bWVudHNgIGFuZCBgYXJnc2BcbiAgICAgIG9wdHMuY2hyb21lT3B0aW9ucy5hcmdzID0gWy4uLihvcHRzLmNocm9tZU9wdGlvbnMuYXJncyB8fCBbXSksIC4uLm9wdHMuY2hyb21lT3B0aW9ucy5Bcmd1bWVudHNdO1xuICAgICAgZGVsZXRlIG9wdHMuY2hyb21lT3B0aW9ucy5Bcmd1bWVudHM7XG4gICAgfVxuICAgIGZvciAobGV0IFtvcHQsIHZhbF0gb2YgXy50b1BhaXJzKG9wdHMuY2hyb21lT3B0aW9ucykpIHtcbiAgICAgIGlmIChfLmlzVW5kZWZpbmVkKGNhcHMuY2hyb21lT3B0aW9uc1tvcHRdKSkge1xuICAgICAgICBjYXBzLmNocm9tZU9wdGlvbnNbb3B0XSA9IHZhbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ2dlci53YXJuKGBDYW5ub3QgcGFzcyBvcHRpb24gJHtjYXBzLmNocm9tZU9wdGlvbnNbb3B0XX0gYmVjYXVzZSBgICtcbiAgICAgICAgICAgICAgICAgICAgXCJBcHBpdW0gbmVlZHMgaXQgdG8gbWFrZSBjaHJvbWVEcml2ZXIgd29ya1wiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBhZGQgZGV2aWNlIGlkIGZyb20gYWRiXG4gIGNhcHMuY2hyb21lT3B0aW9ucy5hbmRyb2lkRGV2aWNlU2VyaWFsID0gZGV2aWNlSWQ7XG4gIHJldHVybiBjYXBzO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaGVscGVycztcbmV4cG9ydCB7IGhlbHBlcnMsIE5BVElWRV9XSU4sIFdFQlZJRVdfV0lOLCBXRUJWSUVXX0JBU0UsIENIUk9NSVVNX1dJTiB9O1xuIl0sImZpbGUiOiJsaWIvd2Vidmlldy1oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
