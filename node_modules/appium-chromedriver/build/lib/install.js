"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.install = install;
exports.installAll = installAll;
exports.conditionalInstall = conditionalInstall;
exports.doInstall = doInstall;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _chromedriver = require("./chromedriver");

var _utils = require("./utils");

var _fancyLog = _interopRequireDefault(require("fancy-log"));

var _semver = _interopRequireDefault(require("semver"));

function log(line) {
  (0, _fancyLog.default)(`[Chromedriver Install] ${line}`);
}

const CD_CDN = process.env.npm_config_chromedriver_cdnurl || process.env.CHROMEDRIVER_CDNURL || 'https://chromedriver.storage.googleapis.com';
const CD_PLATS = ['linux', 'win', 'mac'];
const CD_ARCHS = ['32', '64'];

async function getArchAndPlatform() {
  let arch = await _appiumSupport.system.arch();
  let platform = (0, _utils.getCurPlatform)();

  if (platform !== 'linux' && platform !== 'mac') {
    arch = '32';
  }

  const cdVer = _semver.default.coerce(_chromedriver.CD_VER);

  if (platform === 'mac' && _semver.default.lt(cdVer, _utils.MAC_32_ONLY)) {
    arch = '32';
  }

  return {
    arch,
    platform
  };
}

function getDownloadUrl(version, platform, arch) {
  return `${CD_CDN}/${version}/chromedriver_${platform}${arch}.zip`;
}

function validatePlatform(platform, arch) {
  if (!_lodash.default.includes(CD_PLATS, platform)) {
    throw new Error(`Invalid platform: ${platform}`);
  }

  if (!_lodash.default.includes(CD_ARCHS, arch)) {
    throw new Error(`Invalid arch: ${arch}`);
  }

  if (arch === "64" && platform !== "linux" && platform !== 'mac') {
    throw new Error('Only linux has a 64-bit version of Chromedriver');
  }
}

async function installForPlatform(version, platform, arch) {
  if (version === 'LATEST') {
    version = (await _requestPromise.default.get({
      uri: `${CD_CDN}/LATEST_RELEASE`
    })).trim();
  }

  validatePlatform(platform, arch);
  const url = getDownloadUrl(version, platform, arch);
  log(`Installing Chromedriver version '${version}' for platform '${platform}' and architecture '${arch}'`);
  const binarySpec = `chromedriver_${platform}${arch}`;
  log(`Opening temp file to write '${binarySpec}' to...`);
  const tempFile = await _appiumSupport.tempDir.open({
    prefix: binarySpec,
    suffix: '.zip'
  });
  log(`Opened temp file '${tempFile.path}'`);
  log(`Downloading ${url}...`);
  const body = await _requestPromise.default.get({
    url,
    encoding: 'binary'
  });
  log(`Writing binary content to ${tempFile.path}...`);
  await _appiumSupport.fs.writeFile(tempFile.path, body, {
    encoding: 'binary'
  });
  await _appiumSupport.fs.chmod(tempFile.path, 0o0644);

  const tempUnzipped = _path.default.resolve(_path.default.dirname(tempFile.path), binarySpec);

  log(`Extracting ${tempFile.path} to ${tempUnzipped}`);
  await (0, _appiumSupport.mkdirp)(tempUnzipped);
  await _appiumSupport.zip.extractAllTo(tempFile.path, tempUnzipped);

  let extractedBin = _path.default.resolve(tempUnzipped, 'chromedriver');

  if (platform === "win") {
    extractedBin += ".exe";
  }

  log(`Creating ${_path.default.resolve(_utils.CD_BASE_DIR, platform)}...`);
  await (0, _appiumSupport.mkdirp)(_path.default.resolve(_utils.CD_BASE_DIR, platform));
  const newBin = await (0, _utils.getChromedriverBinaryPath)(platform, arch);
  log(`Copying unzipped binary, reading from ${extractedBin}...`);
  const binContents = await _appiumSupport.fs.readFile(extractedBin, {
    encoding: 'binary'
  });
  log(`Writing to ${newBin}...`);
  await _appiumSupport.fs.writeFile(newBin, binContents, {
    encoding: 'binary',
    mode: 0o755
  });
  log(`${newBin} successfully put in place`);
}

async function install() {
  const {
    arch,
    platform
  } = await getArchAndPlatform();
  await installForPlatform(_chromedriver.CD_VER, platform, arch);
}

async function conditionalInstall() {
  const {
    arch,
    platform
  } = await getArchAndPlatform();
  const binPath = await (0, _utils.getChromedriverBinaryPath)(platform, arch);

  if (!(await _appiumSupport.fs.exists(binPath))) {
    await installForPlatform(_chromedriver.CD_VER, platform, arch);
  } else {
    log(`No need to install chromedriver, ${binPath} exists`);
  }
}

async function installAll() {
  let downloads = [];

  for (let [platform, arch] of (0, _utils.getPlatforms)()) {
    downloads.push(installForPlatform(_chromedriver.CD_VER, platform, arch));
  }

  await (0, _asyncbox.parallel)(downloads);
}

async function doInstall() {
  if (_lodash.default.includes(process.argv, '--all') || process.env.npm_config_chromedriver_install_all) {
    await installAll();
  } else if (_lodash.default.includes(process.argv, '--conditional')) {
    await conditionalInstall();
  } else {
    await install();
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
