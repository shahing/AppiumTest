"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _tccDb = _interopRequireDefault(require("./tcc-db"));

class Calendar {
  constructor(xcodeVersion, sharedResourcesDir) {
    this.xcodeVersion = xcodeVersion;
    this.tccDb = new _tccDb.default(xcodeVersion, sharedResourcesDir);
  }

  getCalendarRowCount(bundleID) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const count = yield _this.tccDb.execQuery(`SELECT count(*) FROM access WHERE client='?' AND service='kTCCServiceCalendar';`, bundleID);
      return parseInt(count.split('=')[1], 10);
    })();
  }

  hasCalendarAccess(bundleID) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const count = yield _this2.tccDb.execQuery(`SELECT count(*) FROM access WHERE client='?' AND allowed=1 AND service='kTCCServiceCalendar';`, bundleID);
      return parseInt(count.split('=')[1], 10) > 0;
    })();
  }

  enableCalendarAccess(bundleID) {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let query;

      if ((yield _this3.getCalendarRowCount(bundleID)) > 0) {
        query = `UPDATE 'access' SET
        service='kTCCServiceCalendar',
        client_type=0,
        allowed=1,
        prompt_count=1,
        csreq=0
      WHERE client='?' AND service='kTCCServiceCalendar'`;
      } else {
        let count = _this3.columnCount;

        if (!_lodash.default.isNumber(_this3.columnCount)) {
          try {
            const stdout = yield _this3.tccDb.execQuery(`pragma table_info('access')`);
            count = _this3.columnCount = stdout.trim().split('cid').filter(record => !_lodash.default.isEmpty(record)).length;
          } catch (err) {
            count = _this3.xcodeVersion.major < 10 ? 7 : 11;

            _logger.default.warn(`Unable to find Calendar access column count: ${err.message}`);
          }
        }

        query = `INSERT INTO 'access' VALUES ('kTCCServiceCalendar', '?', 0, 1, 1, ${_lodash.default.range(0, count - 5, 0).join(', ')});`;
      }

      yield _this3.tccDb.execQuery(query, bundleID);
    })();
  }

  disableCalendarAccess(bundleID) {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if ((yield _this4.getCalendarRowCount(bundleID)) > 0) {
        yield _this4.tccDb.execQuery(`DELETE FROM 'access' WHERE client='?' AND service='kTCCServiceCalendar'`, bundleID);
      }
    })();
  }

}

var _default = Calendar;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jYWxlbmRhci5qcyJdLCJuYW1lcyI6WyJDYWxlbmRhciIsImNvbnN0cnVjdG9yIiwieGNvZGVWZXJzaW9uIiwic2hhcmVkUmVzb3VyY2VzRGlyIiwidGNjRGIiLCJUQ0NEQiIsImdldENhbGVuZGFyUm93Q291bnQiLCJidW5kbGVJRCIsImNvdW50IiwiZXhlY1F1ZXJ5IiwicGFyc2VJbnQiLCJzcGxpdCIsImhhc0NhbGVuZGFyQWNjZXNzIiwiZW5hYmxlQ2FsZW5kYXJBY2Nlc3MiLCJxdWVyeSIsImNvbHVtbkNvdW50IiwiXyIsImlzTnVtYmVyIiwic3Rkb3V0IiwidHJpbSIsImZpbHRlciIsInJlY29yZCIsImlzRW1wdHkiLCJsZW5ndGgiLCJlcnIiLCJtYWpvciIsImxvZyIsIndhcm4iLCJtZXNzYWdlIiwicmFuZ2UiLCJqb2luIiwiZGlzYWJsZUNhbGVuZGFyQWNjZXNzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLFFBQU4sQ0FBZTtBQUViQyxFQUFBQSxXQUFXLENBQUVDLFlBQUYsRUFBZ0JDLGtCQUFoQixFQUFvQztBQUM3QyxTQUFLRCxZQUFMLEdBQW9CQSxZQUFwQjtBQUNBLFNBQUtFLEtBQUwsR0FBYSxJQUFJQyxjQUFKLENBQVVILFlBQVYsRUFBd0JDLGtCQUF4QixDQUFiO0FBQ0Q7O0FBRUtHLEVBQUFBLG1CQUFOLENBQTJCQyxRQUEzQixFQUFxQztBQUFBOztBQUFBO0FBQ25DLFlBQU1DLEtBQUssU0FBUyxLQUFJLENBQUNKLEtBQUwsQ0FBV0ssU0FBWCxDQUFzQixpRkFBdEIsRUFBd0dGLFFBQXhHLENBQXBCO0FBQ0EsYUFBT0csUUFBUSxDQUFDRixLQUFLLENBQUNHLEtBQU4sQ0FBWSxHQUFaLEVBQWlCLENBQWpCLENBQUQsRUFBc0IsRUFBdEIsQ0FBZjtBQUZtQztBQUdwQzs7QUFFS0MsRUFBQUEsaUJBQU4sQ0FBeUJMLFFBQXpCLEVBQW1DO0FBQUE7O0FBQUE7QUFDakMsWUFBTUMsS0FBSyxTQUFTLE1BQUksQ0FBQ0osS0FBTCxDQUFXSyxTQUFYLENBQXNCLCtGQUF0QixFQUFzSEYsUUFBdEgsQ0FBcEI7QUFDQSxhQUFPRyxRQUFRLENBQUNGLEtBQUssQ0FBQ0csS0FBTixDQUFZLEdBQVosRUFBaUIsQ0FBakIsQ0FBRCxFQUFzQixFQUF0QixDQUFSLEdBQW9DLENBQTNDO0FBRmlDO0FBR2xDOztBQUVLRSxFQUFBQSxvQkFBTixDQUE0Qk4sUUFBNUIsRUFBc0M7QUFBQTs7QUFBQTtBQUNwQyxVQUFJTyxLQUFKOztBQUNBLFVBQUksT0FBTyxNQUFJLENBQUNSLG1CQUFMLENBQXlCQyxRQUF6QixDQUFQLElBQTZDLENBQWpELEVBQW9EO0FBQ2xETyxRQUFBQSxLQUFLLEdBQUk7Ozs7Ozt5REFBVDtBQU9ELE9BUkQsTUFRTztBQUNMLFlBQUlOLEtBQUssR0FBRyxNQUFJLENBQUNPLFdBQWpCOztBQUNBLFlBQUksQ0FBQ0MsZ0JBQUVDLFFBQUYsQ0FBVyxNQUFJLENBQUNGLFdBQWhCLENBQUwsRUFBbUM7QUFDakMsY0FBSTtBQUNGLGtCQUFNRyxNQUFNLFNBQVMsTUFBSSxDQUFDZCxLQUFMLENBQVdLLFNBQVgsQ0FBc0IsNkJBQXRCLENBQXJCO0FBZUFELFlBQUFBLEtBQUssR0FBRyxNQUFJLENBQUNPLFdBQUwsR0FDTkcsTUFBTSxDQUNIQyxJQURILEdBR0dSLEtBSEgsQ0FHUyxLQUhULEVBS0dTLE1BTEgsQ0FLV0MsTUFBRCxJQUFZLENBQUNMLGdCQUFFTSxPQUFGLENBQVVELE1BQVYsQ0FMdkIsRUFNR0UsTUFQTDtBQVFELFdBeEJELENBd0JFLE9BQU9DLEdBQVAsRUFBWTtBQUVaaEIsWUFBQUEsS0FBSyxHQUFHLE1BQUksQ0FBQ04sWUFBTCxDQUFrQnVCLEtBQWxCLEdBQTBCLEVBQTFCLEdBQStCLENBQS9CLEdBQW1DLEVBQTNDOztBQUNBQyw0QkFBSUMsSUFBSixDQUFVLGdEQUErQ0gsR0FBRyxDQUFDSSxPQUFRLEVBQXJFO0FBQ0Q7QUFDRjs7QUFHRGQsUUFBQUEsS0FBSyxHQUFJLHFFQUFvRUUsZ0JBQUVhLEtBQUYsQ0FBUSxDQUFSLEVBQVdyQixLQUFLLEdBQUcsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBeUJzQixJQUF6QixDQUE4QixJQUE5QixDQUFvQyxJQUFqSDtBQUNEOztBQUNELFlBQU0sTUFBSSxDQUFDMUIsS0FBTCxDQUFXSyxTQUFYLENBQXFCSyxLQUFyQixFQUE0QlAsUUFBNUIsQ0FBTjtBQS9Db0M7QUFnRHJDOztBQUVLd0IsRUFBQUEscUJBQU4sQ0FBNkJ4QixRQUE3QixFQUF1QztBQUFBOztBQUFBO0FBQ3JDLFVBQUksT0FBTyxNQUFJLENBQUNELG1CQUFMLENBQXlCQyxRQUF6QixDQUFQLElBQTZDLENBQWpELEVBQW9EO0FBQ2xELGNBQU0sTUFBSSxDQUFDSCxLQUFMLENBQVdLLFNBQVgsQ0FBc0IseUVBQXRCLEVBQWdHRixRQUFoRyxDQUFOO0FBQ0Q7QUFIb0M7QUFJdEM7O0FBdkVZOztlQTBFQVAsUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBUQ0NEQiBmcm9tICcuL3RjYy1kYic7XG5cblxuY2xhc3MgQ2FsZW5kYXIge1xuXG4gIGNvbnN0cnVjdG9yICh4Y29kZVZlcnNpb24sIHNoYXJlZFJlc291cmNlc0Rpcikge1xuICAgIHRoaXMueGNvZGVWZXJzaW9uID0geGNvZGVWZXJzaW9uO1xuICAgIHRoaXMudGNjRGIgPSBuZXcgVENDREIoeGNvZGVWZXJzaW9uLCBzaGFyZWRSZXNvdXJjZXNEaXIpO1xuICB9XG5cbiAgYXN5bmMgZ2V0Q2FsZW5kYXJSb3dDb3VudCAoYnVuZGxlSUQpIHtcbiAgICBjb25zdCBjb3VudCA9IGF3YWl0IHRoaXMudGNjRGIuZXhlY1F1ZXJ5KGBTRUxFQ1QgY291bnQoKikgRlJPTSBhY2Nlc3MgV0hFUkUgY2xpZW50PSc/JyBBTkQgc2VydmljZT0na1RDQ1NlcnZpY2VDYWxlbmRhcic7YCwgYnVuZGxlSUQpO1xuICAgIHJldHVybiBwYXJzZUludChjb3VudC5zcGxpdCgnPScpWzFdLCAxMCk7XG4gIH1cblxuICBhc3luYyBoYXNDYWxlbmRhckFjY2VzcyAoYnVuZGxlSUQpIHtcbiAgICBjb25zdCBjb3VudCA9IGF3YWl0IHRoaXMudGNjRGIuZXhlY1F1ZXJ5KGBTRUxFQ1QgY291bnQoKikgRlJPTSBhY2Nlc3MgV0hFUkUgY2xpZW50PSc/JyBBTkQgYWxsb3dlZD0xIEFORCBzZXJ2aWNlPSdrVENDU2VydmljZUNhbGVuZGFyJztgLCBidW5kbGVJRCk7XG4gICAgcmV0dXJuIHBhcnNlSW50KGNvdW50LnNwbGl0KCc9JylbMV0sIDEwKSA+IDA7XG4gIH1cblxuICBhc3luYyBlbmFibGVDYWxlbmRhckFjY2VzcyAoYnVuZGxlSUQpIHtcbiAgICBsZXQgcXVlcnk7XG4gICAgaWYgKChhd2FpdCB0aGlzLmdldENhbGVuZGFyUm93Q291bnQoYnVuZGxlSUQpKSA+IDApIHtcbiAgICAgIHF1ZXJ5ID0gYFVQREFURSAnYWNjZXNzJyBTRVRcbiAgICAgICAgc2VydmljZT0na1RDQ1NlcnZpY2VDYWxlbmRhcicsXG4gICAgICAgIGNsaWVudF90eXBlPTAsXG4gICAgICAgIGFsbG93ZWQ9MSxcbiAgICAgICAgcHJvbXB0X2NvdW50PTEsXG4gICAgICAgIGNzcmVxPTBcbiAgICAgIFdIRVJFIGNsaWVudD0nPycgQU5EIHNlcnZpY2U9J2tUQ0NTZXJ2aWNlQ2FsZW5kYXInYDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGNvdW50ID0gdGhpcy5jb2x1bW5Db3VudDtcbiAgICAgIGlmICghXy5pc051bWJlcih0aGlzLmNvbHVtbkNvdW50KSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHN0ZG91dCA9IGF3YWl0IHRoaXMudGNjRGIuZXhlY1F1ZXJ5KGBwcmFnbWEgdGFibGVfaW5mbygnYWNjZXNzJylgKTtcbiAgICAgICAgICAvLyBzdGRvdXQgaGFzIGEgbnVtYmVyIG9mIHJlY29yZHMsIGVhY2ggc3RhcnRpbmcgd2l0aCBgY2lkYFxuICAgICAgICAgIC8vICAgICAgIGNpZCA9IDBcbiAgICAgICAgICAvLyAgICAgICBuYW1lID0gc2VydmljZVxuICAgICAgICAgIC8vICAgICAgIHR5cGUgPSBURVhUXG4gICAgICAgICAgLy8gICAgICAgbm90bnVsbCA9IDFcbiAgICAgICAgICAvLyAgICAgICBkZmx0X3ZhbHVlID1cbiAgICAgICAgICAvLyAgICAgICBwayA9IDFcbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vICAgICAgIGNpZCA9IDFcbiAgICAgICAgICAvLyAgICAgICBuYW1lID0gY2xpZW50XG4gICAgICAgICAgLy8gICAgICAgdHlwZSA9IFRFWFRcbiAgICAgICAgICAvLyAgICAgICBub3RudWxsID0gMVxuICAgICAgICAgIC8vICAgICAgIGRmbHRfdmFsdWUgPVxuICAgICAgICAgIC8vICAgICAgIHBrID0gMlxuICAgICAgICAgIGNvdW50ID0gdGhpcy5jb2x1bW5Db3VudCA9XG4gICAgICAgICAgICBzdGRvdXRcbiAgICAgICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgICAgICAvLyBnZXQgZWFjaCByZWNvcmQncyBiZWdpbm5pbmdcbiAgICAgICAgICAgICAgLnNwbGl0KCdjaWQnKVxuICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIGVtcHR5IHJvdyAodXN1YWxseSwgdGhlIGZpcnN0KVxuICAgICAgICAgICAgICAuZmlsdGVyKChyZWNvcmQpID0+ICFfLmlzRW1wdHkocmVjb3JkKSlcbiAgICAgICAgICAgICAgLmxlbmd0aDtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgLy8gdXNlIGRlZmF1bHRzLCBidXQgZG8gbm90IHNhdmVcbiAgICAgICAgICBjb3VudCA9IHRoaXMueGNvZGVWZXJzaW9uLm1ham9yIDwgMTAgPyA3IDogMTE7XG4gICAgICAgICAgbG9nLndhcm4oYFVuYWJsZSB0byBmaW5kIENhbGVuZGFyIGFjY2VzcyBjb2x1bW4gY291bnQ6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gZmlsbCBpbiB0aGUgcXVlcnkgd2l0aCAwJ3MgZm9yIGNvbHVtbnMgYWZ0ZXIgdGhlIDUgd2UgY2FyZSBhYm91dFxuICAgICAgcXVlcnkgPSBgSU5TRVJUIElOVE8gJ2FjY2VzcycgVkFMVUVTICgna1RDQ1NlcnZpY2VDYWxlbmRhcicsICc/JywgMCwgMSwgMSwgJHtfLnJhbmdlKDAsIGNvdW50IC0gNSwgMCkuam9pbignLCAnKX0pO2A7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMudGNjRGIuZXhlY1F1ZXJ5KHF1ZXJ5LCBidW5kbGVJRCk7XG4gIH1cblxuICBhc3luYyBkaXNhYmxlQ2FsZW5kYXJBY2Nlc3MgKGJ1bmRsZUlEKSB7XG4gICAgaWYgKChhd2FpdCB0aGlzLmdldENhbGVuZGFyUm93Q291bnQoYnVuZGxlSUQpKSA+IDApIHtcbiAgICAgIGF3YWl0IHRoaXMudGNjRGIuZXhlY1F1ZXJ5KGBERUxFVEUgRlJPTSAnYWNjZXNzJyBXSEVSRSBjbGllbnQ9Jz8nIEFORCBzZXJ2aWNlPSdrVENDU2VydmljZUNhbGVuZGFyJ2AsIGJ1bmRsZUlEKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FsZW5kYXI7Il0sImZpbGUiOiJsaWIvY2FsZW5kYXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
