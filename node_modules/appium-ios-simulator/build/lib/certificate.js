"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TrustStore = exports.Certificate = exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _crypto = _interopRequireDefault(require("crypto"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _utils = require("./utils");

const openssl = _bluebird.default.promisify(require('openssl-wrapper').exec);

const tset = `<?xml version="1.0" encoding="UTF-8"?>\n
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
    <array/>
</plist>`;

class Certificate {
  constructor(pemFilename) {
    this.pemFilename = pemFilename;
  }

  add(dir) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let data = (yield _this.getDerData(_this.pemFilename)).toString('hex');
      let subject = yield _this.getSubject(_this.pemFilename);
      let sha1 = (yield _this.getFingerPrint(_this.data)).toString('hex');
      let trustStore = new TrustStore(dir);
      return yield trustStore.addRecord(sha1, tset, subject, data);
    })();
  }

  has(dir) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let subject = yield _this2.getSubject(_this2.pemFilename);
      let trustStore = new TrustStore(dir);

      if (!(yield trustStore.hasRecords(subject))) {
        return false;
      }

      let previousFingerprint = yield trustStore.getFingerPrintFromRecord(subject);
      let currentFingerprint = yield _this2.getFingerPrint();
      return previousFingerprint.toString() === currentFingerprint.toString();
    })();
  }

  remove(dir) {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let subject = yield _this3.getSubject(_this3.pemFilename);
      let trustStore = new TrustStore(dir);
      return yield trustStore.removeRecord(subject);
    })();
  }

  getDerData() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this4.data) {
        return _this4.data;
      }

      _this4.data = yield openssl('x509', {
        outform: 'der',
        in: _this4.pemFilename
      });
      return _this4.data;
    })();
  }

  getFingerPrint() {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this5.fingerprint) {
        return _this5.fingerprint;
      }

      let data = yield _this5.getDerData();

      let shasum = _crypto.default.createHash('sha1');

      shasum.update(data);
      _this5.fingerprint = shasum.digest();
      return _this5.fingerprint;
    })();
  }

  getSubject() {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this6.subject) {
        return _this6.subject;
      }

      let subject = yield openssl('x509', {
        noout: true,
        subject: true,
        in: _this6.pemFilename
      });
      let subRegex = /^subject[\w\W]*\/CN=([\w\W]*)(\n)?/;
      _this6.subject = subject.toString().match(subRegex)[1];
      return _this6.subject;
    })();
  }

}

exports.Certificate = Certificate;

class TrustStore {
  constructor(sharedResourceDir) {
    this.sharedResourceDir = sharedResourceDir;
  }

  getDB() {
    var _this7 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this7.db) {
        return _this7.db;
      }

      let keychainsPath = _path.default.resolve(_this7.sharedResourceDir, 'Library', 'Keychains');

      if (!(yield _appiumSupport.fs.exists(keychainsPath))) {
        yield (0, _appiumSupport.mkdirp)(keychainsPath);
      }

      _this7.db = _path.default.resolve(keychainsPath, 'TrustStore.sqlite3');
      yield (0, _utils.execSQLiteQuery)(_this7.db, `CREATE TABLE IF NOT EXISTS tsettings (sha1 BLOB NOT NULL DEFAULT '', subj BLOB NOT NULL DEFAULT '', tset BLOB, data BLOB, PRIMARY KEY(sha1));`);

      try {
        yield (0, _utils.execSQLiteQuery)(_this7.db, 'CREATE INDEX isubj ON tsettings(subj);');
      } catch (e) {}

      return _this7.db;
    })();
  }

  addRecord(sha1, tset, subj, data) {
    var _this8 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let db = yield _this8.getDB();

      if (yield _this8.hasRecords(subj)) {
        return yield (0, _utils.execSQLiteQuery)(db, `UPDATE tsettings SET sha1=x'?', tset='?', data=x'?' WHERE subj='?'`, sha1, tset, data, subj);
      } else {
        return yield (0, _utils.execSQLiteQuery)(db, `INSERT INTO tsettings (sha1, subj, tset, data) VALUES (x'?', '?', '?', x'?')`, sha1, subj, tset, data);
      }
    })();
  }

  removeRecord(subj) {
    var _this9 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return yield (0, _utils.execSQLiteQuery)((yield _this9.getDB()), `DELETE FROM tsettings WHERE subj = '?'`, subj);
    })();
  }

  hasRecords(subj) {
    var _this10 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return (yield _this10.getRecordCount(subj)) > 0;
    })();
  }

  getRecordCount(subj) {
    var _this11 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let result = yield (0, _utils.execSQLiteQuery)((yield _this11.getDB()), `SELECT count(*) FROM tsettings WHERE subj = '?'`, subj);
      return parseInt(result.split('=')[1], 10);
    })();
  }

  getFingerPrintFromRecord(subj) {
    var _this12 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let result = yield (0, _utils.execSQLiteQuery)((yield _this12.getDB()), `SELECT sha1 FROM tsettings WHERE subj='?'`, subj);

      if (result) {
        return Buffer.from(result.split('=')[1].trim());
      }
    })();
  }

}

exports.TrustStore = TrustStore;
var _default = Certificate;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
