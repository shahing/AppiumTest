"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("./logger"));

var _tccDb = _interopRequireDefault(require("./tcc-db"));

var _shellQuote = require("shell-quote");

const STATUS_UNSET = 'unset';
const STATUS_YES = 'yes';
const STATUS_NO = 'no';
const WIX_SIM_UTILS = 'applesimutils';
const SERVICES = {
  calendar: 'kTCCServiceCalendar',
  camera: 'kTCCServiceCamera',
  contacts: 'kTCCServiceAddressBook',
  homekit: 'kTCCServiceWillow',
  microphone: 'kTCCServiceMicrophone',
  photos: 'kTCCServicePhotos',
  reminders: 'kTCCServiceReminders',
  medialibrary: 'kTCCServiceMediaLibrary',
  motion: 'kTCCServiceMotion',
  health: 'kTCCServiceMSO',
  siri: 'kTCCServiceSiri',
  speech: 'kTCCServiceSpeechRecognition'
};

function toInternalServiceName(serviceName) {
  if (_lodash.default.has(SERVICES, _lodash.default.toLower(serviceName))) {
    return SERVICES[_lodash.default.toLower(serviceName)];
  }

  throw new Error(`'${serviceName}' is unknown. Only the following service names are supported: ${JSON.stringify(_lodash.default.keys(SERVICES))}`);
}

function formatStatus(status) {
  return [STATUS_UNSET, STATUS_NO].includes(status) ? _lodash.default.toUpper(status) : status;
}

function execWix(_x) {
  return _execWix.apply(this, arguments);
}

function _execWix() {
  _execWix = (0, _asyncToGenerator2.default)(function* (args) {
    try {
      yield _appiumSupport.fs.which(WIX_SIM_UTILS);
    } catch (e) {
      throw new Error(`${WIX_SIM_UTILS} binary has not been found in your PATH. ` + `Please install it ('brew tap wix/brew && brew install wix/brew/applesimutils') to ` + `be able to change application permissions`);
    }

    _logger.default.debug(`Executing: ${WIX_SIM_UTILS} ${(0, _shellQuote.quote)(args)}`);

    try {
      const _ref = yield (0, _teen_process.exec)(WIX_SIM_UTILS, args),
            stdout = _ref.stdout;

      _logger.default.debug(`Command output: ${stdout}`);

      return stdout;
    } catch (e) {
      throw new Error(`Cannot execute "${WIX_SIM_UTILS} ${(0, _shellQuote.quote)(args)}". Original error: ${e.stderr || e.message}`);
    }
  });
  return _execWix.apply(this, arguments);
}

class Permissions {
  constructor(xcodeVersion, sharedResourcesDir, udid) {
    this.tccDb = new _tccDb.default(xcodeVersion, sharedResourcesDir);
    this.udid = udid;
  }

  setAccess(permissionsMapping, bundleId) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const permissionsArg = _lodash.default.toPairs(permissionsMapping).map(x => `${x[0]}=${formatStatus(x[1])}`).join(',');

      return yield execWix(['--byId', _this.udid, '--bundle', bundleId, '--setPermissions', permissionsArg]);
    })();
  }

  getAccess(serviceName, bundleId) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      serviceName = toInternalServiceName(serviceName);
      var _arr = [['0', STATUS_NO], ['1', STATUS_YES]];

      for (var _i = 0; _i < _arr.length; _i++) {
        const _arr$_i = (0, _slicedToArray2.default)(_arr[_i], 2),
              sqlValue = _arr$_i[0],
              status = _arr$_i[1];

        const count = yield _this2.tccDb.execQuery(`SELECT count(*) FROM 'access' WHERE client='?' AND allowed=? AND service='?'`, bundleId, sqlValue, serviceName);

        if (parseInt(count.split('=')[1], 10) > 0) {
          return status;
        }
      }

      return STATUS_UNSET;
    })();
  }

}

var _default = Permissions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
