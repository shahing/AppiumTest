"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.update = update;
exports.updateSettings = updateSettings;
exports.updateLocationSettings = updateLocationSettings;
exports.setReduceMotion = setReduceMotion;
exports.updateSafariUserSettings = updateSafariUserSettings;
exports.updateLocale = updateLocale;
exports.read = read;
exports.readSettings = readSettings;
exports.stub = stub;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("./logger"));

var _semver = _interopRequireDefault(require("semver"));

var _bluebird = _interopRequireDefault(require("bluebird"));

function plistPaths(_x, _x2) {
  return _plistPaths.apply(this, arguments);
}

function _plistPaths() {
  _plistPaths = (0, _asyncToGenerator2.default)(function* (sim, identifier) {
    let paths = [];
    let simDirectory = sim.getDir();

    switch (identifier) {
      case 'webInspector':
        paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.webInspector.plist'));
        break;

      case 'mobileSafari':
        paths.push(_path.default.resolve((yield sim.getAppDir('com.apple.mobilesafari')), 'Library', 'Preferences', 'com.apple.mobilesafari.plist'));
        break;

      case 'webUI':
        paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.WebUI.plist'));
        break;

      case 'webFoundation':
        paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.WebFoundation.plist'));
        break;

      case 'preferences':
        paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.Preferences.plist'));
        break;

      case 'locationServices':
        paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.locationd.plist'));
        break;

      case 'locationClients':
        paths.push(_path.default.resolve(simDirectory, 'Library', 'Caches', 'locationd', 'clients.plist'));
        break;

      case 'locationCache':
        paths.push(_path.default.resolve(simDirectory, 'Library', 'Caches', 'locationd', 'cache.plist'));
        paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.locationd.plist'));
        break;

      case 'userSettings':
        if (_semver.default.lt(_semver.default.coerce(sim.xcodeVersion.versionString), _semver.default.coerce('7.3'))) {
          paths.push(_path.default.resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'UserSettings.plist'));
          paths.push(_path.default.resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'EffectiveUserSettings.plist'));
          paths.push(_path.default.resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'PublicInfo', 'PublicEffectiveUserSettings.plist'));
        } else {
          paths.push(_path.default.resolve(simDirectory, 'Library', 'UserConfigurationProfiles', 'UserSettings.plist'));
          paths.push(_path.default.resolve(simDirectory, 'Library', 'UserConfigurationProfiles', 'EffectiveUserSettings.plist'));
          paths.push(_path.default.resolve(simDirectory, 'Library', 'UserConfigurationProfiles', 'PublicInfo', 'PublicEffectiveUserSettings.plist'));
        }

        break;

      case 'effectiveUserSettings':
        paths.push(_path.default.resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'EffectiveUserSettings.plist'));
        paths.push(_path.default.resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'PublicInfo', 'PublicEffectiveUserSettings.plist'));
        break;

      case 'accessibilitySettings':
        paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.Accessibility.plist'));
        break;
    }

    return paths;
  });
  return _plistPaths.apply(this, arguments);
}

function updateSettings(_x3, _x4, _x5) {
  return _updateSettings.apply(this, arguments);
}

function _updateSettings() {
  _updateSettings = (0, _asyncToGenerator2.default)(function* (sim, plist, updates) {
    return yield _bluebird.default.reduce((yield plistPaths(sim, plist)), function () {
      var _reducer = (0, _asyncToGenerator2.default)(function* (updated, path) {
        return (yield update(path, updates)) || updated;
      });

      return function reducer(_x21, _x22) {
        return _reducer.apply(this, arguments);
      };
    }(), false);
  });
  return _updateSettings.apply(this, arguments);
}

function update(_x6, _x7) {
  return _update.apply(this, arguments);
}

function _update() {
  _update = (0, _asyncToGenerator2.default)(function* (pathToPlist, updates) {
    const currentSettings = yield read(pathToPlist);
    const newSettings = Object.assign({}, currentSettings, updates);

    if (_lodash.default.isEqual(currentSettings, newSettings)) {
      return false;
    }

    yield _appiumSupport.plist.updatePlistFile(pathToPlist, newSettings, true, false);
    return true;
  });
  return _update.apply(this, arguments);
}

function readSettings(_x8, _x9) {
  return _readSettings.apply(this, arguments);
}

function _readSettings() {
  _readSettings = (0, _asyncToGenerator2.default)(function* (sim, plist) {
    let settings = {};
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = (yield plistPaths(sim, plist))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let path = _step.value;
        settings[path] = yield read(path);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return settings;
  });
  return _readSettings.apply(this, arguments);
}

function read(_x10) {
  return _read.apply(this, arguments);
}

function _read() {
  _read = (0, _asyncToGenerator2.default)(function* (pathToPlist) {
    return yield _appiumSupport.plist.parsePlistFile(pathToPlist, false);
  });
  return _read.apply(this, arguments);
}

function updateLocationSettings(_x11, _x12, _x13) {
  return _updateLocationSettings.apply(this, arguments);
}

function _updateLocationSettings() {
  _updateLocationSettings = (0, _asyncToGenerator2.default)(function* (sim, bundleId, authorized) {
    const newCachePrefs = {
      LastFenceActivityTimestamp: 412122103.232983,
      CleanShutdown: true
    };
    let updated = yield updateSettings(sim, 'locationCache', {
      [bundleId]: newCachePrefs
    });
    const newClientPrefs = {
      BundleId: bundleId,
      Authorized: !!authorized,
      Whitelisted: false
    };
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = (yield plistPaths(sim, 'locationClients'))[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        const file = _step2.value;

        _logger.default.debug(`Updating location client file: ${file}`);

        let updates = {};
        const plist = yield read(file);
        const weirdLocKey = 'com.apple.locationd.bundle-/System/Library/' + 'PrivateFrameworks/AOSNotification.framework';

        if (!_lodash.default.has(plist, weirdLocKey)) {
          updates[weirdLocKey] = {
            BundlePath: '/System/Library/PrivateFrameworks/AOSNotification.framework',
            Whitelisted: false,
            Executable: '',
            Registered: ''
          };
        }

        const baseSetting = _lodash.default.has(plist, bundleId) ? plist[bundleId] : {};
        updates[bundleId] = _lodash.default.defaults(newClientPrefs, baseSetting);
        updates[bundleId].Executable = updates[bundleId].Executable || '';
        updates[bundleId].Registered = updates[bundleId].Registered || '';
        updated = (yield update(file, updates)) || updated;
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return updated;
  });
  return _updateLocationSettings.apply(this, arguments);
}

function setReduceMotion(_x14) {
  return _setReduceMotion.apply(this, arguments);
}

function _setReduceMotion() {
  _setReduceMotion = (0, _asyncToGenerator2.default)(function* (sim, reduceMotion = true) {
    _logger.default.debug(`Updating reduce motion. Setting to ${reduceMotion}.`);

    const paths = yield plistPaths(sim, 'accessibilitySettings');
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = paths[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        const file = _step3.value;
        yield update(file, {
          ReduceMotionEnabled: reduceMotion ? 1 : 0
        });
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  });
  return _setReduceMotion.apply(this, arguments);
}

function updateSafariUserSettings(_x15, _x16) {
  return _updateSafariUserSettings.apply(this, arguments);
}

function _updateSafariUserSettings() {
  _updateSafariUserSettings = (0, _asyncToGenerator2.default)(function* (sim, settingSet) {
    _logger.default.debug('Updating Safari user settings');

    let newUserSettings = {};

    if (_lodash.default.has(settingSet, 'WebKitJavaScriptEnabled')) {
      newUserSettings.safariAllowJavaScript = settingSet.WebKitJavaScriptEnabled;
    }

    if (_lodash.default.has(settingSet, 'WebKitJavaScriptCanOpenWindowsAutomatically')) {
      newUserSettings.safariAllowPopups = settingSet.WebKitJavaScriptCanOpenWindowsAutomatically;
    }

    if (_lodash.default.has(settingSet, 'WarnAboutFraudulentWebsites')) {
      newUserSettings.safariForceFraudWarning = !settingSet.WarnAboutFraudulentWebsites;
    }

    if (_lodash.default.isEmpty(newUserSettings)) {
      return false;
    }

    let updated = false;
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = _lodash.default.toPairs((yield readSettings(sim, 'userSettings')))[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        const _step4$value = (0, _slicedToArray2.default)(_step4.value, 2),
              file = _step4$value[0],
              userSettingSet = _step4$value[1];

        if (!_lodash.default.has(userSettingSet, 'restrictedBool')) {
          userSettingSet.restrictedBool = {};
        }

        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = _lodash.default.toPairs(newUserSettings)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            let _step5$value = (0, _slicedToArray2.default)(_step5.value, 2),
                key = _step5$value[0],
                value = _step5$value[1];

            userSettingSet.restrictedBool[key] = {
              value
            };
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }

        updated = (yield update(file, userSettingSet)) || updated;
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    return updated;
  });
  return _updateSafariUserSettings.apply(this, arguments);
}

function updateLocale(_x17, _x18, _x19, _x20) {
  return _updateLocale.apply(this, arguments);
}

function _updateLocale() {
  _updateLocale = (0, _asyncToGenerator2.default)(function* (sim, language, locale, calendarFormat) {
    let globalPrefs = _path.default.resolve(sim.getDir(), 'Library', 'Preferences', '.GlobalPreferences.plist');

    let data = yield read(globalPrefs);
    let updates = {};

    if (language) {
      _logger.default.debug(`New language: ${language}`);

      let supportedLangs = data.AppleLanguages || [];

      if (supportedLangs.indexOf(language) !== 0) {
        updates.AppleLanguages = [language].concat(_lodash.default.without(supportedLangs, language));
      }
    }

    if (locale || calendarFormat) {
      let calSplit = '@calendar=';
      let curLocaleAndCal = data.AppleLocale || language || 'en';
      let split = curLocaleAndCal.split(calSplit);
      let curLoc = split[0];

      if (calendarFormat || split[1]) {
        calendarFormat = `${calSplit}${calendarFormat || split[1] || ''}`;
      }

      calendarFormat = calendarFormat || '';
      let newLocaleAndCal = locale ? locale : curLoc;

      if (calendarFormat) {
        newLocaleAndCal = `${newLocaleAndCal}${calendarFormat}`;
      }

      if (newLocaleAndCal !== curLocaleAndCal) {
        _logger.default.debug(`New locale: ${newLocaleAndCal}`);

        updates.AppleLocale = newLocaleAndCal;
      }
    }

    if (_lodash.default.size(updates) === 0) {
      _logger.default.debug('No locale updates necessary.');

      return false;
    }

    _logger.default.debug('Writing new locale plist data');

    yield update(globalPrefs, updates);
    return true;
  });
  return _updateLocale.apply(this, arguments);
}

function stub() {
  return _stub.apply(this, arguments);
}

function _stub() {
  _stub = (0, _asyncToGenerator2.default)(function* () {
    return yield plistPaths;
  });
  return _stub.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
