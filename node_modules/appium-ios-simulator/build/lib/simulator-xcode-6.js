"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SPRINGBOARD_BUNDLE_ID = exports.BOOT_COMPLETED_EVENT = exports.SimulatorXcode6 = exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = _interopRequireDefault(require("path"));

var simctl = _interopRequireWildcard(require("node-simctl"));

var _appiumXcode = _interopRequireWildcard(require("appium-xcode"));

var _logger = _interopRequireDefault(require("./logger"));

var _appiumSupport = require("appium-support");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

var _asyncLock = _interopRequireDefault(require("async-lock"));

var _utils = require("./utils.js");

var _asyncbox = require("asyncbox");

var settings = _interopRequireWildcard(require("./settings"));

var _teen_process = require("teen_process");

var _tailUntil = require("./tail-until.js");

var _index = _interopRequireDefault(require("./extensions/index"));

var _events = require("events");

var _calendar = _interopRequireDefault(require("./calendar"));

var _permissions = _interopRequireDefault(require("./permissions"));

const STARTUP_TIMEOUT = 60 * 1000;
const EXTRA_STARTUP_TIME = 2000;
const UI_CLIENT_ACCESS_GUARD = new _asyncLock.default();
const UI_CLIENT_BUNDLE_ID = 'com.apple.iphonesimulator';
const SPRINGBOARD_BUNDLE_ID = 'com.apple.SpringBoard';
exports.SPRINGBOARD_BUNDLE_ID = SPRINGBOARD_BUNDLE_ID;
const BOOT_COMPLETED_EVENT = 'bootCompleted';
exports.BOOT_COMPLETED_EVENT = BOOT_COMPLETED_EVENT;

class SimulatorXcode6 extends _events.EventEmitter {
  constructor(udid, xcodeVersion) {
    super();
    this.udid = String(udid);
    this.xcodeVersion = xcodeVersion;
    this._platformVersion = null;
    this.keychainPath = _path.default.resolve(this.getDir(), 'Library', 'Keychains');
    this.simulatorApp = 'iOS Simulator.app';
    this.appDataBundlePaths = {};
    this.isFreshFiles = ['Library/ConfigurationProfiles', 'Library/Cookies', 'Library/Preferences/.GlobalPreferences.plist', 'Library/Preferences/com.apple.springboard.plist', 'var/run/syslog.pid'];
    this.extraStartupTime = EXTRA_STARTUP_TIME;
    this.calendar = new _calendar.default(xcodeVersion, this.getDir());
    this.permissions = new _permissions.default(xcodeVersion, this.getDir(), this.udid);
  }

  get uiClientBundleId() {
    return UI_CLIENT_BUNDLE_ID;
  }

  getUIClientPid() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let stdout;

      try {
        var _ref = yield (0, _teen_process.exec)('osascript', ['-e', `tell application "System Events" to unix id of processes whose bundle identifier is "${_this.uiClientBundleId}"`]);

        stdout = _ref.stdout;
      } catch (e) {
        try {
          var _ref2 = yield (0, _teen_process.exec)('pgrep', ['-xni', _this.simulatorApp.split('.')[0]]);

          stdout = _ref2.stdout;
        } catch (e1) {
          return null;
        }
      }

      if (isNaN(parseInt(stdout, 10))) {
        return null;
      }

      stdout = stdout.trim();

      _logger.default.debug(`Got Simulator UI client PID: ${stdout}`);

      return stdout;
    })();
  }

  isUIClientRunning() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return !_lodash.default.isNull((yield _this2.getUIClientPid()));
    })();
  }

  get startupTimeout() {
    return STARTUP_TIMEOUT;
  }

  getPlatformVersion() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_this3._platformVersion) {
        let _ref3 = yield _this3.stat(),
            sdk = _ref3.sdk;

        _this3._platformVersion = sdk;
      }

      return _this3._platformVersion;
    })();
  }

  getRootDir() {
    let home = process.env.HOME;
    return _path.default.resolve(home, 'Library', 'Developer', 'CoreSimulator', 'Devices');
  }

  getDir() {
    return _path.default.resolve(this.getRootDir(), this.udid, 'data');
  }

  getLogDir() {
    let home = process.env.HOME;
    return _path.default.resolve(home, 'Library', 'Logs', 'CoreSimulator', this.udid);
  }

  installApp(app) {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return yield simctl.installApp(_this4.udid, app);
    })();
  }

  isAppInstalled(bundleId, appFile = null) {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let appDirs = yield _this5.getAppDirs(appFile, bundleId);
      return appDirs.length !== 0;
    })();
  }

  getAppDir(id, subDir = 'Data') {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this6.appDataBundlePaths[subDir] = _this6.appDataBundlePaths[subDir] || {};

      if (_lodash.default.isEmpty(_this6.appDataBundlePaths[subDir]) && !(yield _this6.isFresh())) {
        _this6.appDataBundlePaths[subDir] = yield _this6.buildBundlePathMap(subDir);
      }

      return _this6.appDataBundlePaths[subDir][id];
    })();
  }

  buildBundlePathMap(subDir = 'Data') {
    var _this7 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Building bundle path map');

      let applicationList;
      let pathBundlePair;

      if ((yield _this7.getPlatformVersion()) === '7.1') {
        applicationList = _path.default.resolve(_this7.getDir(), 'Applications');

        pathBundlePair = function () {
          var _ref4 = (0, _asyncToGenerator2.default)(function* (dir) {
            dir = _path.default.resolve(applicationList, dir);
            let appFiles = yield _appiumSupport.fs.glob(`${dir}/*.app`);
            let bundleId = appFiles[0].match(/.*\/(.*)\.app/)[1];
            return {
              path: dir,
              bundleId
            };
          });

          return function pathBundlePair(_x) {
            return _ref4.apply(this, arguments);
          };
        }();
      } else {
        applicationList = _path.default.resolve(_this7.getDir(), 'Containers', subDir, 'Application');

        let readBundleId = function () {
          var _ref5 = (0, _asyncToGenerator2.default)(function* (dir) {
            let plist = _path.default.resolve(dir, '.com.apple.mobile_container_manager.metadata.plist');

            let metadata = yield settings.read(plist);
            return metadata.MCMMetadataIdentifier;
          });

          return function readBundleId(_x2) {
            return _ref5.apply(this, arguments);
          };
        }();

        pathBundlePair = function () {
          var _ref6 = (0, _asyncToGenerator2.default)(function* (dir) {
            dir = _path.default.resolve(applicationList, dir);
            let bundleId = yield readBundleId(dir);
            return {
              path: dir,
              bundleId
            };
          });

          return function pathBundlePair(_x3) {
            return _ref6.apply(this, arguments);
          };
        }();
      }

      let bundlePathDirs = yield _appiumSupport.fs.readdir(applicationList);
      let bundlePathPairs = yield (0, _asyncbox.asyncmap)(bundlePathDirs, function () {
        var _ref7 = (0, _asyncToGenerator2.default)(function* (dir) {
          return yield pathBundlePair(dir);
        });

        return function (_x4) {
          return _ref7.apply(this, arguments);
        };
      }(), false);
      return bundlePathPairs.reduce((bundleMap, bundlePath) => {
        bundleMap[bundlePath.bundleId] = bundlePath.path;
        return bundleMap;
      }, {});
    })();
  }

  stat() {
    var _this8 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _lodash.default.toPairs((yield simctl.getDevices()))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          let _step$value = (0, _slicedToArray2.default)(_step.value, 2),
              sdk = _step$value[0],
              deviceArr = _step$value[1];

          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = deviceArr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              let device = _step2.value;

              if (device.udid === _this8.udid) {
                device.sdk = sdk;
                return device;
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return {};
    })();
  }

  isFresh() {
    var _this9 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let files = _this9.isFreshFiles;
      let pv = yield _this9.getPlatformVersion();

      if (pv !== '7.1') {
        files.push('Library/Preferences/com.apple.Preferences.plist');
      } else {
        files.push('Applications');
      }

      const dir = _this9.getDir();

      files = files.map(s => _path.default.resolve(dir, s));
      const existences = yield (0, _asyncbox.asyncmap)(files, function () {
        var _ref8 = (0, _asyncToGenerator2.default)(function* (f) {
          return yield _appiumSupport.fs.hasAccess(f);
        });

        return function (_x5) {
          return _ref8.apply(this, arguments);
        };
      }());
      const fresh = _lodash.default.compact(existences).length !== files.length;

      _logger.default.debug(`Checking whether simulator has been run before: ${fresh ? 'no' : 'yes'}`);

      return fresh;
    })();
  }

  isRunning() {
    var _this10 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let stat = yield _this10.stat();
      return stat.state === 'Booted';
    })();
  }

  waitForBoot(startupTimeout) {
    var _this11 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let bootedIndicator = yield _this11.getBootedIndicatorString();
      yield _this11.tailLogsUntil(bootedIndicator, startupTimeout);

      _logger.default.debug(`Waiting an extra ${_this11.extraStartupTime}ms for the simulator to really finish booting`);

      yield _bluebird.default.delay(_this11.extraStartupTime);

      _logger.default.debug('Done waiting extra time for simulator');

      _this11.emit(BOOT_COMPLETED_EVENT);
    })();
  }

  getBootedIndicatorString() {
    var _this12 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let indicator;
      let platformVersion = yield _this12.getPlatformVersion();

      switch (platformVersion) {
        case '7.1':
        case '8.1':
        case '8.2':
        case '8.3':
        case '8.4':
          indicator = 'profiled: Service starting...';
          break;

        case '9.0':
        case '9.1':
        case '9.2':
        case '9.3':
          indicator = 'System app "com.apple.springboard" finished startup';
          break;

        case '10.0':
          indicator = 'Switching to keyboard';
          break;

        default:
          _logger.default.warn(`No boot indicator case for platform version '${platformVersion}'`);

          indicator = 'no boot indicator string available';
      }

      return indicator;
    })();
  }

  startUIClient(opts = {}) {
    var _this13 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      opts = Object.assign({
        scaleFactor: null,
        connectHardwareKeyboard: false,
        startupTimeout: _this13.startupTimeout
      }, opts);

      const simulatorApp = _path.default.resolve((yield (0, _appiumXcode.getPath)()), 'Applications', _this13.simulatorApp);

      const args = ['-Fn', simulatorApp, '--args', '-CurrentDeviceUDID', _this13.udid];

      if (opts.scaleFactor) {
        const stat = yield _this13.stat();
        const formattedDeviceName = stat.name.replace(/\s+/g, '-');
        const argumentName = `-SimulatorWindowLastScale-com.apple.CoreSimulator.SimDeviceType.${formattedDeviceName}`;
        args.push(argumentName, opts.scaleFactor);
      }

      if (_lodash.default.isBoolean(opts.connectHardwareKeyboard)) {
        args.push('-ConnectHardwareKeyboard', opts.connectHardwareKeyboard ? '1' : '0');
      }

      _logger.default.info(`Starting Simulator UI with command: open ${args.join(' ')}`);

      try {
        yield (0, _teen_process.exec)('open', args, {
          timeout: opts.startupTimeout
        });
      } catch (err) {
        if (!(err.stdout || '').includes('-10825') && !(err.stderr || '').includes('-10825')) {
          throw err;
        }

        _logger.default.warn(`Error while opening UI: ${err.stdout || err.stderr}. Continuing`);
      }
    })();
  }

  run(opts = {}) {
    var _this14 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      opts = Object.assign({
        startupTimeout: _this14.startupTimeout
      }, opts);

      const _ref9 = yield _this14.stat(),
            state = _ref9.state;

      const isServerRunning = state === 'Booted';
      const isUIClientRunning = yield _this14.isUIClientRunning();

      if (isServerRunning && isUIClientRunning) {
        _logger.default.info(`Both Simulator with UDID ${_this14.udid} and the UI client are currently running`);

        return;
      }

      const startTime = process.hrtime();

      try {
        yield _this14.shutdown();
      } catch (err) {
        _logger.default.warn(`Error on Simulator shutdown: ${err.message}`);
      }

      yield _this14.startUIClient(opts);
      yield _this14.waitForBoot(opts.startupTimeout);

      _logger.default.info(`Simulator with UDID ${_this14.udid} booted in ${process.hrtime(startTime)[0]} seconds`);
    })();
  }

  clean() {
    var _this15 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this15.endSimulatorDaemon();

      _logger.default.info(`Cleaning simulator ${_this15.udid}`);

      yield simctl.eraseDevice(_this15.udid, 10000);
    })();
  }

  scrubCustomApp(appFile, appBundleId) {
    var _this16 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return yield _this16.cleanCustomApp(appFile, appBundleId, true);
    })();
  }

  cleanCustomApp(appFile, appBundleId, scrub = false) {
    var _this17 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug(`Cleaning app data files for '${appFile}', '${appBundleId}'`);

      if (!scrub) {
        _logger.default.debug(`Deleting app altogether`);
      }

      let appDirs = yield _this17.getAppDirs(appFile, appBundleId, scrub);

      if (appDirs.length === 0) {
        _logger.default.debug("Could not find app directories to delete. It is probably not installed");

        return;
      }

      let deletePromises = [];
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = appDirs[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          let dir = _step3.value;

          _logger.default.debug(`Deleting directory: '${dir}'`);

          deletePromises.push(_appiumSupport.fs.rimraf(dir));
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      if ((yield _this17.getPlatformVersion()) >= 8) {
        let relRmPath = `Library/Preferences/${appBundleId}.plist`;

        let rmPath = _path.default.resolve(_this17.getRootDir(), relRmPath);

        _logger.default.debug(`Deleting file: '${rmPath}'`);

        deletePromises.push(_appiumSupport.fs.rimraf(rmPath));
      }

      yield _bluebird.default.all(deletePromises);
    })();
  }

  getAppDirs(appFile, appBundleId, scrub = false) {
    var _this18 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let dirs = [];

      if ((yield _this18.getPlatformVersion()) >= 8) {
        let data = yield _this18.getAppDir(appBundleId);
        if (!data) return dirs;
        let bundle = !scrub ? yield _this18.getAppDir(appBundleId, 'Bundle') : undefined;
        var _arr = [data, bundle];

        for (var _i = 0; _i < _arr.length; _i++) {
          let src = _arr[_i];

          if (src) {
            dirs.push(src);
          }
        }
      } else {
        let data = yield _this18.getAppDir(appFile);

        if (data) {
          dirs.push(data);
        }
      }

      return dirs;
    })();
  }

  launchAndQuit(safari = false, startupTimeout = this.startupTimeout) {
    var _this19 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Attempting to launch and quit the simulator, to create directory structure');

      _logger.default.debug(`Will launch with Safari? ${safari}`);

      yield _this19.run(startupTimeout);

      if (safari) {
        yield _this19.openUrl('http://www.appium.io');
      }

      try {
        yield (0, _asyncbox.retryInterval)(60, 250, (0, _asyncToGenerator2.default)(function* () {
          if (yield _this19.isFresh()) {
            throw new Error('Simulator files not fully created. Waiting a bit');
          }
        }));
      } catch (err) {
        _logger.default.warn(`Timeout waiting for simulator files to be created. Continuing`);
      }

      yield _this19.shutdown();
    })();
  }

  endSimulatorDaemon() {
    var _this20 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug(`Killing any simulator daemons for ${_this20.udid}`);

      let launchctlCmd = `launchctl list | grep ${_this20.udid} | cut -f 3 | xargs -n 1 launchctl`;

      try {
        let stopCmd = `${launchctlCmd} stop`;
        yield (0, _teen_process.exec)('bash', ['-c', stopCmd]);
      } catch (err) {
        _logger.default.warn(`Could not stop simulator daemons: ${err.message}`);

        _logger.default.debug('Carrying on anyway!');
      }

      try {
        let removeCmd = `${launchctlCmd} remove`;
        yield (0, _teen_process.exec)('bash', ['-c', removeCmd]);
      } catch (err) {
        _logger.default.warn(`Could not remove simulator daemons: ${err.message}`);

        _logger.default.debug('Carrying on anyway!');
      }

      try {
        yield (0, _asyncbox.waitForCondition)((0, _asyncToGenerator2.default)(function* () {
          let _ref12 = yield (0, _teen_process.exec)('bash', ['-c', `ps -e  | grep ${_this20.udid} | grep launchd_sim | grep -v bash | grep -v grep | awk {'print$1'}`]),
              stdout = _ref12.stdout;

          return stdout.trim().length === 0;
        }), {
          waitMs: 10000,
          intervalMs: 500
        });
      } catch (err) {
        _logger.default.warn(`Could not end simulator daemon for ${_this20.udid}: ${err.message}`);

        _logger.default.debug('Carrying on anyway!');
      }
    })();
  }

  shutdown() {
    return (0, _asyncToGenerator2.default)(function* () {
      yield (0, _utils.killAllSimulators)();
    })();
  }

  delete() {
    var _this21 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield simctl.deleteDevice(_this21.udid);
    })();
  }

  updateSettings(plist, updates) {
    var _this22 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return yield settings.updateSettings(_this22, plist, updates);
    })();
  }

  updateLocationSettings(bundleId, authorized) {
    var _this23 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return yield settings.updateLocationSettings(_this23, bundleId, authorized);
    })();
  }

  setReduceMotion(reduceMotion = true) {
    var _this24 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (yield _this24.isFresh()) {
        yield _this24.launchAndQuit(false, STARTUP_TIMEOUT);
      }

      yield settings.setReduceMotion(_this24, reduceMotion);
    })();
  }

  updateSafariSettings(updates) {
    var _this25 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let updated = yield settings.updateSafariUserSettings(_this25, updates);
      return (yield settings.updateSettings(_this25, 'mobileSafari', updates)) || updated;
    })();
  }

  updateLocale(language, locale, calendarFormat) {
    var _this26 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return yield settings.updateLocale(_this26, language, locale, calendarFormat);
    })();
  }

  deleteSafari() {
    var _this27 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Deleting Safari apps from simulator');

      let dirs = [];
      dirs.push((yield _this27.getAppDir('com.apple.mobilesafari')));
      let pv = yield _this27.getPlatformVersion();

      if (pv >= 8) {
        dirs.push((yield _this27.getAppDir('com.apple.mobilesafari', 'Bundle')));
      }

      let deletePromises = [];
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = _lodash.default.compact(dirs)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          let dir = _step4.value;

          _logger.default.debug(`Deleting directory: '${dir}'`);

          deletePromises.push(_appiumSupport.fs.rimraf(dir));
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      yield _bluebird.default.all(deletePromises);
    })();
  }

  cleanSafari(keepPrefs = true) {
    var _this28 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Cleaning mobile safari data files');

      if (yield _this28.isFresh()) {
        _logger.default.info('Could not find Safari support directories to clean out old ' + 'data. Probably there is nothing to clean out');

        return;
      }

      let libraryDir = _path.default.resolve(_this28.getDir(), 'Library');

      let safariRoot = yield _this28.getAppDir('com.apple.mobilesafari');

      if (!safariRoot) {
        _logger.default.info('Could not find Safari support directories to clean out old ' + 'data. Probably there is nothing to clean out');

        return;
      }

      let safariLibraryDir = _path.default.resolve(safariRoot, 'Library');

      let filesToDelete = ['Caches/Snapshots/com.apple.mobilesafari', 'Caches/com.apple.mobilesafari/*', 'Caches/com.apple.WebAppCache/*', 'Caches/com.apple.WebKit.Networking/*', 'Caches/com.apple.WebKit.WebContent/*', 'Image Cache/*', 'WebKit/com.apple.mobilesafari/*', 'WebKit/GeolocationSites.plist', 'WebKit/LocalStorage/*.*', 'Safari/*', 'Cookies/*.binarycookies', 'Caches/com.apple.UIStatusBar/*', 'Caches/com.apple.keyboards/images/*', 'Caches/com.apple.Safari.SafeBrowsing/*', '../tmp/com.apple.mobilesafari/*'];
      let deletePromises = [];

      for (var _i2 = 0; _i2 < filesToDelete.length; _i2++) {
        let file = filesToDelete[_i2];
        deletePromises.push(_appiumSupport.fs.rimraf(_path.default.resolve(libraryDir, file)));
        deletePromises.push(_appiumSupport.fs.rimraf(_path.default.resolve(safariLibraryDir, file)));
      }

      if (!keepPrefs) {
        deletePromises.push(_appiumSupport.fs.rimraf(_path.default.resolve(safariLibraryDir, 'Preferences/*.plist')));
      }

      yield _bluebird.default.all(deletePromises);
    })();
  }

  removeApp(bundleId) {
    var _this29 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield simctl.removeApp(_this29.udid, bundleId);
    })();
  }

  moveBuiltInApp(appName, appPath, newAppPath) {
    return (0, _asyncToGenerator2.default)(function* () {
      yield (0, _utils.safeRimRaf)(newAppPath);
      yield _appiumSupport.fs.copyFile(appPath, newAppPath);

      _logger.default.debug(`Copied '${appName}' to '${newAppPath}'`);

      yield _appiumSupport.fs.rimraf(appPath);

      _logger.default.debug(`Temporarily deleted original app at '${appPath}'`);

      return [newAppPath, appPath];
    })();
  }

  openUrl(url) {
    var _this30 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const SAFARI_BOOTED_INDICATOR = 'MobileSafari[';
      const SAFARI_STARTUP_TIMEOUT = 15 * 1000;
      const EXTRA_STARTUP_TIME = 3 * 1000;

      if (yield _this30.isRunning()) {
        yield (0, _asyncbox.retry)(5000, simctl.openUrl, _this30.udid, url);
        yield _this30.tailLogsUntil(SAFARI_BOOTED_INDICATOR, SAFARI_STARTUP_TIMEOUT);

        _logger.default.debug(`Safari started, waiting ${EXTRA_STARTUP_TIME}ms for it to fully start`);

        yield _bluebird.default.delay(EXTRA_STARTUP_TIME);

        _logger.default.debug('Done waiting for Safari');

        return;
      } else {
        throw new Error('Tried to open a url, but the Simulator is not Booted');
      }
    })();
  }

  clearCaches(...folderNames) {
    var _this31 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const cachesRoot = _path.default.resolve(_this31.getDir(), 'Library', 'Caches');

      if (!(yield _appiumSupport.fs.hasAccess(cachesRoot))) {
        _logger.default.debug(`Caches root at '${cachesRoot}' does not exist or is not accessible. Nothing to do there`);

        return 0;
      }

      let itemsToRemove = folderNames.length ? folderNames : yield _appiumSupport.fs.readdir(cachesRoot);
      itemsToRemove = itemsToRemove.map(x => _path.default.resolve(cachesRoot, x));

      if (folderNames.length) {
        itemsToRemove = yield _bluebird.default.filter(itemsToRemove, x => _appiumSupport.fs.hasAccess(x));
      }

      itemsToRemove = yield _bluebird.default.filter(itemsToRemove, function () {
        var _ref13 = (0, _asyncToGenerator2.default)(function* (x) {
          return (yield _appiumSupport.fs.stat(x)).isDirectory();
        });

        return function (_x6) {
          return _ref13.apply(this, arguments);
        };
      }());

      if (!itemsToRemove.length) {
        _logger.default.debug(`No Simulator cache items for cleanup were matched in '${cachesRoot}'`);

        return 0;
      }

      _logger.default.debug(`Matched ${itemsToRemove.length} Simulator cache ` + `item${itemsToRemove.length === 1 ? '' : 's'} for cleanup: ${itemsToRemove}`);

      try {
        yield _bluebird.default.all(itemsToRemove, x => _appiumSupport.fs.rimraf(x));
      } catch (e) {
        _logger.default.warn(`Got an exception while cleaning Simulator caches: ${e.message}`);
      }

      return itemsToRemove.length;
    })();
  }

  tailLogsUntil(bootedIndicator, timeoutMs) {
    var _this32 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let simLog = _path.default.resolve(_this32.getLogDir(), 'system.log');

      yield (0, _asyncbox.retryInterval)(200, 200, (0, _asyncToGenerator2.default)(function* () {
        let exists = yield _appiumSupport.fs.exists(simLog);

        if (!exists) {
          throw new Error(`Could not find Simulator log: '${simLog}'`);
        }
      }));

      _logger.default.info(`Simulator log at '${simLog}'`);

      _logger.default.info(`Tailing simulator logs until we encounter the string "${bootedIndicator}"`);

      _logger.default.info(`We will time out after ${timeoutMs}ms`);

      try {
        yield (0, _tailUntil.tailUntil)(simLog, bootedIndicator, timeoutMs);
      } catch (err) {
        _logger.default.debug('Simulator startup timed out. Continuing anyway.');
      }
    })();
  }

  enableCalendarAccess(bundleID) {
    var _this33 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this33.calendar.enableCalendarAccess(bundleID);
    })();
  }

  disableCalendarAccess(bundleID) {
    var _this34 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this34.calendar.disableCalendarAccess(bundleID);
    })();
  }

  hasCalendarAccess(bundleID) {
    var _this35 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return yield _this35.calendar.hasCalendarAccess(bundleID);
    })();
  }

  _activateWindow() {
    return (0, _asyncToGenerator2.default)(function* () {
      return `
      tell application "System Events"
        tell process "Simulator"
          set frontmost to false
          set frontmost to true
        end tell
      end tell
    `;
    })();
  }

  executeUIClientScript(appleScript) {
    var _this36 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const windowActivationScript = yield _this36._activateWindow();
      const resultScript = `${windowActivationScript ? windowActivationScript + '\n' : ''}${appleScript}`;

      _logger.default.debug(`Executing UI Apple Script on Simulator with UDID ${_this36.udid}: ${resultScript}`);

      return yield UI_CLIENT_ACCESS_GUARD.acquire(_this36.simulatorApp, (0, _asyncToGenerator2.default)(function* () {
        try {
          const _ref16 = yield (0, _teen_process.exec)('osascript', ['-e', resultScript]),
                stdout = _ref16.stdout;

          return stdout;
        } catch (err) {
          _logger.default.errorAndThrow(`Could not complete operation. Make sure Simulator UI is running and the parent Appium application (e. g. Appium.app or Terminal.app) ` + `is present in System Preferences > Security & Privacy > Privacy > Accessibility list. If the operation is still unsuccessful then ` + `it is not supported by this Simulator. ` + `Original error: ${err.message}`);
        }
      }));
    })();
  }

  isBiometricEnrolled() {
    var _this37 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const output = yield _this37.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          set dstMenuItem to menu item "Touch ID Enrolled" of menu 1 of menu bar item "Hardware" of menu bar 1
          set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"
        end tell
      end tell
    `);

      _logger.default.debug(`Touch ID enrolled state: ${output}`);

      return _lodash.default.isString(output) && output.trim() === 'true';
    })();
  }

  enrollBiometric(isEnabled = true) {
    var _this38 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this38.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          set dstMenuItem to menu item "Touch ID Enrolled" of menu 1 of menu bar item "Hardware" of menu bar 1
          set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"
          if ${isEnabled ? 'not ' : ''}isChecked then
            click dstMenuItem
          end if
        end tell
      end tell
    `);
    })();
  }

  sendBiometricMatch(shouldMatch = true) {
    var _this39 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this39.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          set dstMenuItem to menu item "${shouldMatch ? 'Matching' : 'Non-matching'}" of menu 1 of menu item "Simulate Finger Touch" of menu 1 of menu bar item "Hardware" of menu bar 1
          click dstMenuItem
        end tell
      end tell
    `);
    })();
  }

  dismissDatabaseAlert(increase = true) {
    var _this40 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let button = increase ? 'Increase' : 'Cancel';

      _logger.default.debug(`Attempting to dismiss database alert with '${button}' button`);

      yield _this40.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          click button "${button}" of window 1
        end tell
      end tell
    `);
    })();
  }

  backupKeychains() {
    var _this41 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!(yield _appiumSupport.fs.exists(_this41.keychainPath))) {
        return false;
      }

      const backupPath = yield _appiumSupport.tempDir.path({
        prefix: `keychains_backup_${Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)}`,
        suffix: '.zip'
      });
      const zipArgs = ['-r', backupPath, `${_this41.keychainPath}${_path.default.sep}`];

      _logger.default.debug(`Creating keychains backup with 'zip ${zipArgs.join(' ')}' command`);

      yield (0, _teen_process.exec)('zip', zipArgs);

      if (_lodash.default.isString(_this41._keychainsBackupPath) && (yield _appiumSupport.fs.exists(_this41._keychainsBackupPath))) {
        yield _appiumSupport.fs.unlink(_this41._keychainsBackupPath);
      }

      _this41._keychainsBackupPath = backupPath;
      return true;
    })();
  }

  restoreKeychains(excludePatterns = []) {
    var _this42 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_lodash.default.isString(_this42._keychainsBackupPath) || !(yield _appiumSupport.fs.exists(_this42._keychainsBackupPath))) {
        throw new Error(`The keychains backup archive does not exist. ` + `Are you sure it was created before?`);
      }

      if (_lodash.default.isString(excludePatterns)) {
        excludePatterns = excludePatterns.split(',').map(x => x.trim());
      }

      const _ref17 = yield _this42.stat(),
            state = _ref17.state;

      const isServerRunning = state === 'Booted';
      let plistPath;

      if (isServerRunning) {
        plistPath = _path.default.resolve((yield _this42.getLaunchDaemonsRoot()), 'com.apple.securityd.plist');

        if (!(yield _appiumSupport.fs.exists(plistPath))) {
          throw new Error(`Cannot clear keychains because '${plistPath}' does not exist`);
        }

        yield simctl.spawn(_this42.udid, ['launchctl', 'unload', plistPath]);
      }

      try {
        yield _appiumSupport.fs.rimraf(_this42.keychainPath);
        yield (0, _appiumSupport.mkdirp)(_this42.keychainPath);
        const unzipArgs = ['-o', _this42._keychainsBackupPath, ..._lodash.default.flatMap(excludePatterns.map(x => ['-x', x])), '-d', '/'];

        _logger.default.debug(`Restoring keychains with 'unzip ${unzipArgs.join(' ')}' command`);

        yield (0, _teen_process.exec)('unzip', unzipArgs);
        yield _appiumSupport.fs.unlink(_this42._keychainsBackupPath);
        _this42._keychainsBackupPath = null;
      } finally {
        if (isServerRunning && plistPath) {
          yield simctl.spawn(_this42.udid, ['launchctl', 'load', plistPath]);
        }
      }

      return true;
    })();
  }

  clearKeychains() {
    var _this43 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const plistPath = _path.default.resolve((yield _this43.getLaunchDaemonsRoot()), 'com.apple.securityd.plist');

      if (!(yield _appiumSupport.fs.exists(plistPath))) {
        throw new Error(`Cannot clear keychains because '${plistPath}' does not exist`);
      }

      yield simctl.spawn(_this43.udid, ['launchctl', 'unload', plistPath]);

      try {
        if (yield _appiumSupport.fs.exists(_this43.keychainPath)) {
          yield _appiumSupport.fs.rimraf(_this43.keychainPath);
          yield (0, _appiumSupport.mkdirp)(_this43.keychainPath);
        }
      } finally {
        yield simctl.spawn(_this43.udid, ['launchctl', 'load', plistPath]);
      }
    })();
  }

  setPermissions(bundleId, permissionsMapping) {
    var _this44 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this44.permissions.setAccess(permissionsMapping, bundleId);

      _logger.default.debug(`Set ${JSON.stringify(permissionsMapping)} access for '${bundleId}'`);
    })();
  }

  getPermission(bundleId, serviceName) {
    var _this45 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const result = yield _this45.permissions.getAccess(serviceName, bundleId);

      _logger.default.debug(`Got ${serviceName} access status for '${bundleId}': ${result}`);

      return result;
    })();
  }

  getLaunchDaemonsRoot() {
    return (0, _asyncToGenerator2.default)(function* () {
      const devRoot = yield (0, _utils.getDeveloperRoot)();
      return _path.default.resolve(devRoot, 'Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/LaunchDaemons');
    })();
  }

  static _getDeviceStringPlatformVersion(platformVersion) {
    return (0, _asyncToGenerator2.default)(function* () {
      let reqVersion = platformVersion;

      if (!reqVersion) {
        reqVersion = yield _appiumXcode.default.getMaxIOSSDK();

        _logger.default.warn(`No platform version set. Using max SDK version: ${reqVersion}`);

        if (!_lodash.default.isString(reqVersion)) {
          reqVersion = reqVersion % 1 ? String(reqVersion) : `${reqVersion}.0`;
        }
      }

      return reqVersion;
    })();
  }

  static _getDeviceStringVersionString(platformVersion) {
    var _this46 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let reqVersion = yield _this46._getDeviceStringPlatformVersion(platformVersion);
      return `(${reqVersion} Simulator)`;
    })();
  }

  static _getDeviceStringConfigFix() {
    return {
      'iPad Simulator (7.1 Simulator)': 'iPad 2 (7.1 Simulator)',
      'iPad Simulator (8.0 Simulator)': 'iPad 2 (8.0 Simulator)',
      'iPad Simulator (8.1 Simulator)': 'iPad 2 (8.1 Simulator)',
      'iPad Simulator (8.2 Simulator)': 'iPad 2 (8.2 Simulator)',
      'iPad Simulator (8.3 Simulator)': 'iPad 2 (8.3 Simulator)',
      'iPad Simulator (8.4 Simulator)': 'iPad 2 (8.4 Simulator)',
      'iPhone Simulator (7.1 Simulator)': 'iPhone 5s (7.1 Simulator)',
      'iPhone Simulator (8.4 Simulator)': 'iPhone 6 (8.4 Simulator)',
      'iPhone Simulator (8.3 Simulator)': 'iPhone 6 (8.3 Simulator)',
      'iPhone Simulator (8.2 Simulator)': 'iPhone 6 (8.2 Simulator)',
      'iPhone Simulator (8.1 Simulator)': 'iPhone 6 (8.1 Simulator)',
      'iPhone Simulator (8.0 Simulator)': 'iPhone 6 (8.0 Simulator)'
    };
  }

  static getDeviceString(opts) {
    var _this47 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      opts = Object.assign({}, {
        deviceName: null,
        platformVersion: null,
        forceIphone: false,
        forceIpad: false
      }, opts);
      let logOpts = {
        deviceName: opts.deviceName,
        platformVersion: opts.platformVersion,
        forceIphone: opts.forceIphone,
        forceIpad: opts.forceIpad
      };

      _logger.default.debug(`Getting device string from options: ${JSON.stringify(logOpts)}`);

      if ((opts.deviceName || '')[0] === '=') {
        return opts.deviceName.substring(1);
      }

      let isiPhone = !!opts.forceIphone || !opts.forceIpad;

      if (opts.deviceName) {
        let device = opts.deviceName.toLowerCase();

        if (device.indexOf('iphone') !== -1) {
          isiPhone = true;
        } else if (device.indexOf('ipad') !== -1) {
          isiPhone = false;
        }
      }

      let iosDeviceString = opts.deviceName || (isiPhone ? 'iPhone Simulator' : 'iPad Simulator');

      if (/^(iPhone|iPad)$/.test(iosDeviceString)) {
        iosDeviceString += " Simulator";
      }

      if (/[^(iPhone|iPad)] Simulator/.test(iosDeviceString)) {
        iosDeviceString = iosDeviceString.replace(" Simulator", "");
      }

      iosDeviceString += ` ${yield _this47._getDeviceStringVersionString(opts.platformVersion)}`;

      let CONFIG_FIX = _this47._getDeviceStringConfigFix();

      let configFix = CONFIG_FIX;

      if (configFix[iosDeviceString]) {
        iosDeviceString = configFix[iosDeviceString];

        _logger.default.debug(`Fixing device. Changed from '${opts.deviceName}' ` + `to '${iosDeviceString}'`);
      }

      _logger.default.debug(`Final device string is '${iosDeviceString}'`);

      return iosDeviceString;
    })();
  }

  getWebInspectorSocket() {
    return (0, _asyncToGenerator2.default)(function* () {
      return null;
    })();
  }

}

exports.SimulatorXcode6 = SimulatorXcode6;
var _iteratorNormalCompletion5 = true;
var _didIteratorError5 = false;
var _iteratorError5 = undefined;

try {
  for (var _iterator5 = _lodash.default.toPairs(_index.default)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
    let _step5$value = (0, _slicedToArray2.default)(_step5.value, 2),
        cmd = _step5$value[0],
        fn = _step5$value[1];

    SimulatorXcode6.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError5 = true;
  _iteratorError5 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
      _iterator5.return();
    }
  } finally {
    if (_didIteratorError5) {
      throw _iteratorError5;
    }
  }
}

var _default = SimulatorXcode6;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
