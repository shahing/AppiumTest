"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-9"));

var _teen_process = require("teen_process");

const WEBINSPECTOR_SOCKET_REGEXP = /\s+(\S+com\.apple\.webinspectord_sim\.socket)/;

class SimulatorXcode93 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
    this.webInspectorSocket = null;
  }

  getWebInspectorSocket() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this.webInspectorSocket) {
        return _this.webInspectorSocket;
      }

      let _ref = yield (0, _teen_process.exec)('lsof', ['-aUc', 'launchd_sim']),
          stdout = _ref.stdout;

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = stdout.split('com.apple.CoreSimulator.SimDevice.')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          let record = _step.value;

          if (!record.includes(_this.udid)) {
            continue;
          }

          const match = WEBINSPECTOR_SOCKET_REGEXP.exec(record);

          if (!match) {
            return null;
          }

          _this.webInspectorSocket = match[1];
          return _this.webInspectorSocket;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return null;
    })();
  }

}

var _default = SimulatorXcode93;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3IteGNvZGUtOS4zLmpzIl0sIm5hbWVzIjpbIldFQklOU1BFQ1RPUl9TT0NLRVRfUkVHRVhQIiwiU2ltdWxhdG9yWGNvZGU5MyIsIlNpbXVsYXRvclhjb2RlOSIsImNvbnN0cnVjdG9yIiwidWRpZCIsInhjb2RlVmVyc2lvbiIsIndlYkluc3BlY3RvclNvY2tldCIsImdldFdlYkluc3BlY3RvclNvY2tldCIsInN0ZG91dCIsInNwbGl0IiwicmVjb3JkIiwiaW5jbHVkZXMiLCJtYXRjaCIsImV4ZWMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBSUEsTUFBTUEsMEJBQTBCLEdBQUcsK0NBQW5DOztBQUVBLE1BQU1DLGdCQUFOLFNBQStCQyx1QkFBL0IsQ0FBK0M7QUFDN0NDLEVBQUFBLFdBQVcsQ0FBRUMsSUFBRixFQUFRQyxZQUFSLEVBQXNCO0FBQy9CLFVBQU1ELElBQU4sRUFBWUMsWUFBWjtBQUVBLFNBQUtDLGtCQUFMLEdBQTBCLElBQTFCO0FBQ0Q7O0FBS0tDLEVBQUFBLHFCQUFOLEdBQStCO0FBQUE7O0FBQUE7QUFDN0IsVUFBSSxLQUFJLENBQUNELGtCQUFULEVBQTZCO0FBQzNCLGVBQU8sS0FBSSxDQUFDQSxrQkFBWjtBQUNEOztBQUg0Qix1QkFpQlIsd0JBQUssTUFBTCxFQUFhLENBQUMsTUFBRCxFQUFTLGFBQVQsQ0FBYixDQWpCUTtBQUFBLFVBaUJ4QkUsTUFqQndCLFFBaUJ4QkEsTUFqQndCOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQWtCN0IsNkJBQW1CQSxNQUFNLENBQUNDLEtBQVAsQ0FBYSxvQ0FBYixDQUFuQiw4SEFBdUU7QUFBQSxjQUE5REMsTUFBOEQ7O0FBQ3JFLGNBQUksQ0FBQ0EsTUFBTSxDQUFDQyxRQUFQLENBQWdCLEtBQUksQ0FBQ1AsSUFBckIsQ0FBTCxFQUFpQztBQUMvQjtBQUNEOztBQUNELGdCQUFNUSxLQUFLLEdBQUdaLDBCQUEwQixDQUFDYSxJQUEzQixDQUFnQ0gsTUFBaEMsQ0FBZDs7QUFDQSxjQUFJLENBQUNFLEtBQUwsRUFBWTtBQUNWLG1CQUFPLElBQVA7QUFDRDs7QUFDRCxVQUFBLEtBQUksQ0FBQ04sa0JBQUwsR0FBMEJNLEtBQUssQ0FBQyxDQUFELENBQS9CO0FBQ0EsaUJBQU8sS0FBSSxDQUFDTixrQkFBWjtBQUNEO0FBNUI0QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQThCN0IsYUFBTyxJQUFQO0FBOUI2QjtBQStCOUI7O0FBekM0Qzs7ZUE0Q2hDTCxnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTaW11bGF0b3JYY29kZTkgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtOSc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcblxuXG4vLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL01FTDU1dC8xXG5jb25zdCBXRUJJTlNQRUNUT1JfU09DS0VUX1JFR0VYUCA9IC9cXHMrKFxcUytjb21cXC5hcHBsZVxcLndlYmluc3BlY3RvcmRfc2ltXFwuc29ja2V0KS87XG5cbmNsYXNzIFNpbXVsYXRvclhjb2RlOTMgZXh0ZW5kcyBTaW11bGF0b3JYY29kZTkge1xuICBjb25zdHJ1Y3RvciAodWRpZCwgeGNvZGVWZXJzaW9uKSB7XG4gICAgc3VwZXIodWRpZCwgeGNvZGVWZXJzaW9uKTtcblxuICAgIHRoaXMud2ViSW5zcGVjdG9yU29ja2V0ID0gbnVsbDtcbiAgfVxuXG4gIC8qXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXN5bmMgZ2V0V2ViSW5zcGVjdG9yU29ja2V0ICgpIHtcbiAgICBpZiAodGhpcy53ZWJJbnNwZWN0b3JTb2NrZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLndlYkluc3BlY3RvclNvY2tldDtcbiAgICB9XG5cbiAgICAvLyBsc29mIC1hVWMgbGF1bmNoZF9zaW1cbiAgICAvLyBnaXZlcyBhIHNldCBvZiByZWNvcmRzIGxpa2U6XG4gICAgLy8gICBsYXVuY2hkX3MgNjk3NjAgaXNhYWMgICAgM3UgIHVuaXggMHg1N2FhNGZjZWVhMzkzN2YzICAgICAgMHQwICAgICAgL3ByaXZhdGUvdG1wL2NvbS5hcHBsZS5Db3JlU2ltdWxhdG9yLlNpbURldmljZS5ENzA4MkE1Qy0zNEI1LTQ3NUMtOTk0RS1BMjE1MzQ0MjNCOUUvc3lzbG9nc29ja1xuICAgIC8vICAgbGF1bmNoZF9zIDY5NzYwIGlzYWFjICAgIDV1ICB1bml4IDB4NTdhYTRmY2VlYTM5NWYwMyAgICAgIDB0MCAgICAgIC9wcml2YXRlL3RtcC9jb20uYXBwbGUubGF1bmNoZC4yQjJ1OENrTjhTL0xpc3RlbmVyc1xuICAgIC8vICAgbGF1bmNoZF9zIDY5NzYwIGlzYWFjICAgIDZ1ICB1bml4IDB4NTdhYTRmY2VlYTM5MzcyYiAgICAgIDB0MCAgICAgIC0+MHg1N2FhNGZjZWVhMzkzN2YzXG4gICAgLy8gICBsYXVuY2hkX3MgNjk3NjAgaXNhYWMgICAgOHUgIHVuaXggMHg1N2FhNGZjZWVhMzk1OThiICAgICAgMHQwICAgICAgL3ByaXZhdGUvdG1wL2NvbS5hcHBsZS5sYXVuY2hkLjJqNWsxVE1oNmkvY29tLmFwcGxlLndlYmluc3BlY3RvcmRfc2ltLnNvY2tldFxuICAgIC8vICAgbGF1bmNoZF9zIDY5NzYwIGlzYWFjICAgIDl1ICB1bml4IDB4NTdhYTRmY2VlYTM5NGM0MyAgICAgIDB0MCAgICAgIC9wcml2YXRlL3RtcC9jb20uYXBwbGUubGF1bmNoZC40em05Sk85S0VzL2NvbS5hcHBsZS50ZXN0bWFuYWdlcmQudW5peC1kb21haW4uc29ja2V0XG4gICAgLy8gICBsYXVuY2hkX3MgNjk3NjAgaXNhYWMgICAxMHUgIHVuaXggMHg1N2FhNGZjZWVhMzk1ZjAzICAgICAgMHQwICAgICAgL3ByaXZhdGUvdG1wL2NvbS5hcHBsZS5sYXVuY2hkLjJCMnU4Q2tOOFMvTGlzdGVuZXJzXG4gICAgLy8gICBsYXVuY2hkX3MgNjk3NjAgaXNhYWMgICAxMXUgIHVuaXggMHg1N2FhNGZjZWVhMzk1OThiICAgICAgMHQwICAgICAgL3ByaXZhdGUvdG1wL2NvbS5hcHBsZS5sYXVuY2hkLjJqNWsxVE1oNmkvY29tLmFwcGxlLndlYmluc3BlY3RvcmRfc2ltLnNvY2tldFxuICAgIC8vICAgbGF1bmNoZF9zIDY5NzYwIGlzYWFjICAgMTJ1ICB1bml4IDB4NTdhYTRmY2VlYTM5NGM0MyAgICAgIDB0MCAgICAgIC9wcml2YXRlL3RtcC9jb20uYXBwbGUubGF1bmNoZC40em05Sk85S0VzL2NvbS5hcHBsZS50ZXN0bWFuYWdlcmQudW5peC1kb21haW4uc29ja2V0XG4gICAgLy8gdGhlc2UgX2FwcGVhcl8gdG8gYWx3YXlzIGJlIGdyb3VwZWQgdG9nZXRoZXIgKHNvLCB0aGUgcmVjb3JkcyBmb3IgdGhlIHBhcnRpY3VsYXIgc2ltIGFyZSBhbGwgaW4gYSBncm91cCwgYmVmb3JlIHRoZSBuZXh0IHNpbSwgZXRjLilcbiAgICAvLyBzbyBzdGFydGluZyBmcm9tIHRoZSBjb3JyZWN0IFVESUQsIHdlIG91Z2h0IHRvIGJlIGFibGUgdG8gcHVsbCB0aGUgbmV4dCByZWNvcmQgd2l0aCBgY29tLmFwcGxlLndlYmluc3BlY3RvcmRfc2ltLnNvY2tldGAgdG8gZ2V0IHRoZSBjb3JyZWN0IHNvY2tldFxuICAgIGxldCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoJ2xzb2YnLCBbJy1hVWMnLCAnbGF1bmNoZF9zaW0nXSk7XG4gICAgZm9yIChsZXQgcmVjb3JkIG9mIHN0ZG91dC5zcGxpdCgnY29tLmFwcGxlLkNvcmVTaW11bGF0b3IuU2ltRGV2aWNlLicpKSB7XG4gICAgICBpZiAoIXJlY29yZC5pbmNsdWRlcyh0aGlzLnVkaWQpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgbWF0Y2ggPSBXRUJJTlNQRUNUT1JfU09DS0VUX1JFR0VYUC5leGVjKHJlY29yZCk7XG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdGhpcy53ZWJJbnNwZWN0b3JTb2NrZXQgPSBtYXRjaFsxXTtcbiAgICAgIHJldHVybiB0aGlzLndlYkluc3BlY3RvclNvY2tldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaW11bGF0b3JYY29kZTkzO1xuIl0sImZpbGUiOiJsaWIvc2ltdWxhdG9yLXhjb2RlLTkuMy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
