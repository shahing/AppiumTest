"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-8"));

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _asyncLock = _interopRequireDefault(require("async-lock"));

var _logger = _interopRequireDefault(require("./logger"));

var _nodeSimctl = require("node-simctl");

var _asyncbox = require("asyncbox");

var _utils = require("./utils.js");

var fbsimctl = _interopRequireWildcard(require("./fbsimctl-utils"));

const SIMULATOR_SHUTDOWN_TIMEOUT = 15 * 1000;
const startupLock = new _asyncLock.default();
const preferencesPlistGuard = new _asyncLock.default();
const ENROLLMENT_NOTIFICATION_RECEIVER = 'com.apple.BiometricKit.enrollmentChanged';

class SimulatorXcode9 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
  }

  run(opts = {}) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      opts = Object.assign({
        devicePreferences: {},
        isHeadless: false,
        startupTimeout: _this.startupTimeout
      }, opts);

      if (opts.scaleFactor) {
        opts.devicePreferences.SimulatorWindowLastScale = parseFloat(opts.scaleFactor);
      }

      const commonPreferences = {
        RotateWindowWhenSignaledByGuest: true
      };

      if (_lodash.default.isBoolean(opts.connectHardwareKeyboard)) {
        opts.devicePreferences.ConnectHardwareKeyboard = opts.connectHardwareKeyboard;
        commonPreferences.ConnectHardwareKeyboard = opts.connectHardwareKeyboard;
      }

      if (!_lodash.default.isEmpty(opts.devicePreferences) || !_lodash.default.isEmpty(commonPreferences)) {
        yield _this.updatePreferences(opts.devicePreferences, commonPreferences);
      }

      const bootSimulator = function () {
        var _ref = (0, _asyncToGenerator2.default)(function* () {
          try {
            yield (0, _asyncbox.retryInterval)(3, 2000, (0, _asyncToGenerator2.default)(function* () {
              return yield (0, _nodeSimctl.bootDevice)(_this.udid);
            }));
          } catch (err) {
            _logger.default.warn(`'xcrun simctl boot ${_this.udid}' command has returned non-zero code. The problem was: ${err.stderr}`);
          }
        });

        return function bootSimulator() {
          return _ref.apply(this, arguments);
        };
      }();

      const waitForShutdown = function () {
        var _ref3 = (0, _asyncToGenerator2.default)(function* () {
          try {
            yield (0, _asyncbox.waitForCondition)((0, _asyncToGenerator2.default)(function* () {
              const _ref5 = yield _this.stat(),
                    state = _ref5.state;

              return state === 'Shutdown';
            }), {
              waitMs: SIMULATOR_SHUTDOWN_TIMEOUT,
              intervalMs: 500
            });
          } catch (err) {
            throw new Error(`Simulator is not in 'Shutdown' state after ${SIMULATOR_SHUTDOWN_TIMEOUT}ms`);
          }
        });

        return function waitForShutdown() {
          return _ref3.apply(this, arguments);
        };
      }();

      let shouldWaitForBoot = true;
      const startTime = process.hrtime();
      yield startupLock.acquire(_this.uiClientBundleId, (0, _asyncToGenerator2.default)(function* () {
        const stat = yield _this.stat();
        const serverState = stat.state;
        const isServerRunning = serverState === 'Booted';
        const isUIClientRunning = yield _this.isUIClientRunning();

        if (opts.isHeadless) {
          if (isServerRunning && !isUIClientRunning) {
            _logger.default.info(`Simulator with UDID ${_this.udid} already booted in headless mode.`);

            shouldWaitForBoot = false;
            return;
          }

          if (yield _this.killUIClient()) {
            _logger.default.info(`Detected the UI client was running and killed it. Verifying the Simulator is in Shutdown state...`);

            yield waitForShutdown();
          }

          _logger.default.info(`Booting Simulator with UDID ${_this.udid} in headless mode. All UI-related capabilities are going to be ignored.`);

          yield bootSimulator();
        } else {
          if (isServerRunning && isUIClientRunning) {
            _logger.default.info(`Both Simulator with UDID ${_this.udid} and the UI client are currently running`);

            shouldWaitForBoot = false;
            return;
          }

          if (['Shutdown', 'Booted'].indexOf(serverState) === -1) {
            if (serverState !== 'Shutting Down') {
              _logger.default.info(`Simulator ${_this.udid} is in '${serverState}' state. Trying to shutdown...`);

              try {
                yield _this.shutdown();
              } catch (err) {
                _logger.default.warn(`Error on Simulator shutdown: ${err.message}`);
              }
            }

            yield waitForShutdown();
          }

          _logger.default.info(`Booting Simulator with UDID ${_this.udid}...`);

          yield bootSimulator();

          if (!isUIClientRunning) {
            yield _this.startUIClient(opts);
          }
        }
      }));

      if (shouldWaitForBoot) {
        yield _this.waitForBoot(opts.startupTimeout);

        _logger.default.info(`Simulator with UDID ${_this.udid} booted in ${process.hrtime(startTime)[0]} seconds`);
      }
    })();
  }

  verifyDevicePreferences(prefs = {}) {
    if (_lodash.default.isEmpty(prefs)) {
      return;
    }

    if (!_lodash.default.isUndefined(prefs.SimulatorWindowLastScale)) {
      if (!_lodash.default.isNumber(prefs.SimulatorWindowLastScale) || prefs.SimulatorWindowLastScale <= 0) {
        _logger.default.errorAndThrow(`SimulatorWindowLastScale is expected to be a positive float value. ` + `'${prefs.SimulatorWindowLastScale}' is assigned instead.`);
      }
    }

    if (!_lodash.default.isUndefined(prefs.SimulatorWindowCenter)) {
      const verificationPattern = /{-?\d+(\.\d+)?,-?\d+(\.\d+)?}/;

      if (!_lodash.default.isString(prefs.SimulatorWindowCenter) || !verificationPattern.test(prefs.SimulatorWindowCenter)) {
        _logger.default.errorAndThrow(`SimulatorWindowCenter is expected to match "{floatXPosition,floatYPosition}" format (without spaces). ` + `'${prefs.SimulatorWindowCenter}' is assigned instead.`);
      }
    }

    if (!_lodash.default.isUndefined(prefs.SimulatorWindowOrientation)) {
      const acceptableValues = ['Portrait', 'LandscapeLeft', 'PortraitUpsideDown', 'LandscapeRight'];

      if (acceptableValues.indexOf(prefs.SimulatorWindowOrientation) === -1) {
        _logger.default.errorAndThrow(`SimulatorWindowOrientation is expected to be one of ${acceptableValues}. ` + `'${prefs.SimulatorWindowOrientation}' is assigned instead.`);
      }
    }

    if (!_lodash.default.isUndefined(prefs.SimulatorWindowRotationAngle)) {
      if (!_lodash.default.isNumber(prefs.SimulatorWindowRotationAngle)) {
        _logger.default.errorAndThrow(`SimulatorWindowRotationAngle is expected to be a valid number. ` + `'${prefs.SimulatorWindowRotationAngle}' is assigned instead.`);
      }
    }
  }

  updatePreferences(devicePrefs = {}, commonPrefs = {}) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_lodash.default.isEmpty(devicePrefs)) {
        _logger.default.debug(`Setting preferences of ${_this2.udid} Simulator to ${JSON.stringify(devicePrefs)}`);
      }

      if (!_lodash.default.isEmpty(commonPrefs)) {
        _logger.default.debug(`Setting common Simulator preferences to ${JSON.stringify(commonPrefs)}`);
      }

      const homeFolderPath = process.env.HOME;

      if (!homeFolderPath) {
        _logger.default.warn(`Cannot get the path to HOME folder from the process environment. ` + `Ignoring Simulator preferences update.`);

        return false;
      }

      _this2.verifyDevicePreferences(devicePrefs);

      const plistPath = _path.default.resolve(homeFolderPath, 'Library', 'Preferences', 'com.apple.iphonesimulator.plist');

      if (!(yield _appiumSupport.fs.hasAccess(plistPath))) {
        _logger.default.warn(`Simulator preferences file '${plistPath}' is not accessible. ` + `Ignoring Simulator preferences update.`);

        return false;
      }

      let newPrefs = {};

      if (!_lodash.default.isEmpty(devicePrefs)) {
        newPrefs.DevicePreferences = {
          [_this2.udid.toUpperCase()]: devicePrefs
        };
      }

      newPrefs = _lodash.default.merge(newPrefs, commonPrefs);
      return yield preferencesPlistGuard.acquire(SimulatorXcode9.name, (0, _asyncToGenerator2.default)(function* () {
        try {
          const currentPlistContent = yield _appiumSupport.plist.parsePlistFile(plistPath);
          yield _appiumSupport.plist.updatePlistFile(plistPath, _lodash.default.merge(currentPlistContent, newPrefs), true);

          _logger.default.debug(`Updated ${_this2.udid} Simulator preferences at '${plistPath}' with ${JSON.stringify(newPrefs)}`);

          return true;
        } catch (e) {
          _logger.default.warn(`Cannot update ${_this2.udid} Simulator preferences at '${plistPath}'. ` + `Try to delete the file manually in order to reset it. Original error: ${e.message}`);

          return false;
        }
      }));
    })();
  }

  shutdown() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const _ref8 = yield _this3.stat(),
            state = _ref8.state;

      if (state === 'Shutdown') {
        return;
      }

      yield (0, _asyncbox.retryInterval)(5, 500, _nodeSimctl.shutdown, _this3.udid);
    })();
  }

  clean() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.info(`Cleaning simulator ${_this4.udid}`);

      yield (0, _nodeSimctl.eraseDevice)(_this4.udid, 10000);
    })();
  }

  _activateWindow() {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      try {
        yield fbsimctl.focus(_this5.udid);
      } catch (err) {
        _logger.default.warn(`Cannot focus Simulator window with fbsimctl. Defaulting to AppleScript. ` + `Original error: ${err.message}`);

        const _ref9 = yield _this5.stat(),
              name = _ref9.name,
              sdk = _ref9.sdk;

        return `
        tell application "System Events"
          tell process "Simulator"
            set frontmost to false
            set frontmost to true
            click (menu item 1 where (its name contains "${name} -" and its name contains "${sdk}")) of menu 1 of menu bar item "Window" of menu bar 1
          end tell
        end tell
      `;
      }
    })();
  }

  isBiometricEnrolled() {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const _ref10 = yield (0, _nodeSimctl.spawn)(_this6.udid, ['notifyutil', '-g', ENROLLMENT_NOTIFICATION_RECEIVER]),
            stdout = _ref10.stdout;

      const match = new RegExp(`${_lodash.default.escapeRegExp(ENROLLMENT_NOTIFICATION_RECEIVER)}\\s+([01])`).exec(stdout);

      if (!match) {
        throw new Error(`Cannot parse biometric enrollment state from '${stdout}'`);
      }

      _logger.default.info(`Current biometric enrolled state for ${_this6.udid} Simulator: ${match[1]}`);

      return match[1] === '1';
    })();
  }

  enrollBiometric(isEnabled = true) {
    var _this7 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug(`Setting biometric enrolled state for ${_this7.udid} Simulator to '${isEnabled ? 'enabled' : 'disabled'}'`);

      yield (0, _nodeSimctl.spawn)(_this7.udid, ['notifyutil', '-s', ENROLLMENT_NOTIFICATION_RECEIVER, isEnabled ? '1' : '0']);
      yield (0, _nodeSimctl.spawn)(_this7.udid, ['notifyutil', '-p', ENROLLMENT_NOTIFICATION_RECEIVER]);

      if ((yield _this7.isBiometricEnrolled()) !== isEnabled) {
        throw new Error(`Cannot set biometric enrolled state for ${_this7.udid} Simulator to '${isEnabled ? 'enabled' : 'disabled'}'`);
      }
    })();
  }

  sendBiometricMatch(shouldMatch = true, biometricName = 'touchId') {
    var _this8 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const domainComponent = (0, _utils.toBiometricDomainComponent)(biometricName);
      const domain = `com.apple.BiometricKit_Sim.${domainComponent}.${shouldMatch ? '' : 'no'}match`;
      yield (0, _nodeSimctl.spawn)(_this8.udid, ['notifyutil', '-p', domain]);

      _logger.default.info(`Sent notification ${domain} to ${shouldMatch ? 'match' : 'not match'} ${biometricName} biometric ` + `for ${_this8.udid} Simulator`);
    })();
  }

  getLaunchDaemonsRoot() {
    return (0, _asyncToGenerator2.default)(function* () {
      const devRoot = yield (0, _utils.getDeveloperRoot)();
      return _path.default.resolve(devRoot, 'Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/LaunchDaemons');
    })();
  }

}

var _default = SimulatorXcode9;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
