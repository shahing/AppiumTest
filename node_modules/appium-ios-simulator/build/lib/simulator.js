"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSimulator = getSimulator;
exports.getDeviceString = getDeviceString;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-6"));

var _simulatorXcode2 = _interopRequireDefault(require("./simulator-xcode-7"));

var _simulatorXcode3 = _interopRequireDefault(require("./simulator-xcode-7.3"));

var _simulatorXcode4 = _interopRequireDefault(require("./simulator-xcode-8"));

var _simulatorXcode5 = _interopRequireDefault(require("./simulator-xcode-9"));

var _simulatorXcode6 = _interopRequireDefault(require("./simulator-xcode-9.3"));

var _simulatorXcode7 = _interopRequireDefault(require("./simulator-xcode-10"));

var _utils = require("./utils");

var _appiumXcode = _interopRequireDefault(require("appium-xcode"));

var _logger = _interopRequireDefault(require("./logger"));

function handleUnsupportedXcode(xcodeVersion) {
  if (xcodeVersion.major < 6) {
    throw new Error(`Tried to use an iOS simulator with xcode ` + `version ${xcodeVersion.versionString} but only Xcode version ` + `6.0.0 and up are supported`);
  }
}

function getSimulator(_x) {
  return _getSimulator.apply(this, arguments);
}

function _getSimulator() {
  _getSimulator = (0, _asyncToGenerator2.default)(function* (udid) {
    let xcodeVersion = yield _appiumXcode.default.getVersion(true);

    if (!(yield (0, _utils.simExists)(udid))) {
      throw new Error(`No sim found with udid ${udid}`);
    }

    _logger.default.info(`Constructing iOS simulator for Xcode version ${xcodeVersion.versionString} ` + `with udid '${udid}'`);

    let SimClass;

    switch (xcodeVersion.major) {
      case 6:
        SimClass = _simulatorXcode.default;
        break;

      case 7:
        if (xcodeVersion.minor < 3) {
          SimClass = _simulatorXcode2.default;
        } else {
          SimClass = _simulatorXcode3.default;
        }

        break;

      case 8:
        SimClass = _simulatorXcode4.default;
        break;

      case 9:
        if (xcodeVersion.minor < 3) {
          SimClass = _simulatorXcode5.default;
        } else {
          SimClass = _simulatorXcode6.default;
        }

        break;

      case 10:
        SimClass = _simulatorXcode7.default;
        break;

      default:
        handleUnsupportedXcode(xcodeVersion);
        SimClass = _simulatorXcode6.default;
    }

    return new SimClass(udid, xcodeVersion);
  });
  return _getSimulator.apply(this, arguments);
}

function getDeviceString(_x2) {
  return _getDeviceString.apply(this, arguments);
}

function _getDeviceString() {
  _getDeviceString = (0, _asyncToGenerator2.default)(function* (opts) {
    let xcodeVersion = yield _appiumXcode.default.getVersion(true);
    handleUnsupportedXcode(xcodeVersion);

    _logger.default.info(`Retrieving device name string for Xcode version ${xcodeVersion.versionString}`);

    if (xcodeVersion.major >= 8) {
      return yield _simulatorXcode2.default.getDeviceString(opts);
    } else if (xcodeVersion.major === 7) {
      return yield _simulatorXcode2.default.getDeviceString(opts);
    } else if (xcodeVersion.major === 6) {
      return yield _simulatorXcode.default.getDeviceString(opts);
    }
  });
  return _getDeviceString.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3IuanMiXSwibmFtZXMiOlsiaGFuZGxlVW5zdXBwb3J0ZWRYY29kZSIsInhjb2RlVmVyc2lvbiIsIm1ham9yIiwiRXJyb3IiLCJ2ZXJzaW9uU3RyaW5nIiwiZ2V0U2ltdWxhdG9yIiwidWRpZCIsInhjb2RlIiwiZ2V0VmVyc2lvbiIsImxvZyIsImluZm8iLCJTaW1DbGFzcyIsIlNpbXVsYXRvclhjb2RlNiIsIm1pbm9yIiwiU2ltdWxhdG9yWGNvZGU3IiwiU2ltdWxhdG9yWGNvZGU3MyIsIlNpbXVsYXRvclhjb2RlOCIsIlNpbXVsYXRvclhjb2RlOSIsIlNpbXVsYXRvclhjb2RlOTMiLCJTaW11bGF0b3JYY29kZTEwIiwiZ2V0RGV2aWNlU3RyaW5nIiwib3B0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsU0FBU0Esc0JBQVQsQ0FBaUNDLFlBQWpDLEVBQStDO0FBQzdDLE1BQUlBLFlBQVksQ0FBQ0MsS0FBYixHQUFxQixDQUF6QixFQUE0QjtBQUMxQixVQUFNLElBQUlDLEtBQUosQ0FBVywyQ0FBRCxHQUNDLFdBQVVGLFlBQVksQ0FBQ0csYUFBYywwQkFEdEMsR0FFQyw0QkFGWCxDQUFOO0FBR0Q7QUFDRjs7U0FXY0MsWTs7Ozs7a0RBQWYsV0FBNkJDLElBQTdCLEVBQW1DO0FBQ2pDLFFBQUlMLFlBQVksU0FBU00scUJBQU1DLFVBQU4sQ0FBaUIsSUFBakIsQ0FBekI7O0FBRUEsUUFBSSxRQUFPLHNCQUFVRixJQUFWLENBQVAsQ0FBSixFQUE0QjtBQUMxQixZQUFNLElBQUlILEtBQUosQ0FBVywwQkFBeUJHLElBQUssRUFBekMsQ0FBTjtBQUNEOztBQUVERyxvQkFBSUMsSUFBSixDQUFVLGdEQUErQ1QsWUFBWSxDQUFDRyxhQUFjLEdBQTNFLEdBQ0MsY0FBYUUsSUFBSyxHQUQ1Qjs7QUFFQSxRQUFJSyxRQUFKOztBQUNBLFlBQVFWLFlBQVksQ0FBQ0MsS0FBckI7QUFDRSxXQUFLLENBQUw7QUFDRVMsUUFBQUEsUUFBUSxHQUFHQyx1QkFBWDtBQUNBOztBQUNGLFdBQUssQ0FBTDtBQUNFLFlBQUlYLFlBQVksQ0FBQ1ksS0FBYixHQUFxQixDQUF6QixFQUE0QjtBQUMxQkYsVUFBQUEsUUFBUSxHQUFHRyx3QkFBWDtBQUNELFNBRkQsTUFFTztBQUNMSCxVQUFBQSxRQUFRLEdBQUdJLHdCQUFYO0FBQ0Q7O0FBQ0Q7O0FBQ0YsV0FBSyxDQUFMO0FBQ0VKLFFBQUFBLFFBQVEsR0FBR0ssd0JBQVg7QUFDQTs7QUFDRixXQUFLLENBQUw7QUFDRSxZQUFJZixZQUFZLENBQUNZLEtBQWIsR0FBcUIsQ0FBekIsRUFBNEI7QUFDMUJGLFVBQUFBLFFBQVEsR0FBR00sd0JBQVg7QUFDRCxTQUZELE1BRU87QUFDTE4sVUFBQUEsUUFBUSxHQUFHTyx3QkFBWDtBQUNEOztBQUNEOztBQUNGLFdBQUssRUFBTDtBQUNFUCxRQUFBQSxRQUFRLEdBQUdRLHdCQUFYO0FBQ0E7O0FBQ0Y7QUFDRW5CLFFBQUFBLHNCQUFzQixDQUFDQyxZQUFELENBQXRCO0FBQ0FVLFFBQUFBLFFBQVEsR0FBR08sd0JBQVg7QUExQko7O0FBNEJBLFdBQU8sSUFBSVAsUUFBSixDQUFhTCxJQUFiLEVBQW1CTCxZQUFuQixDQUFQO0FBQ0QsRzs7OztTQWlCY21CLGU7Ozs7O3FEQUFmLFdBQWdDQyxJQUFoQyxFQUFzQztBQUNwQyxRQUFJcEIsWUFBWSxTQUFTTSxxQkFBTUMsVUFBTixDQUFpQixJQUFqQixDQUF6QjtBQUVBUixJQUFBQSxzQkFBc0IsQ0FBQ0MsWUFBRCxDQUF0Qjs7QUFFQVEsb0JBQUlDLElBQUosQ0FBVSxtREFBa0RULFlBQVksQ0FBQ0csYUFBYyxFQUF2Rjs7QUFDQSxRQUFJSCxZQUFZLENBQUNDLEtBQWIsSUFBc0IsQ0FBMUIsRUFBNkI7QUFDM0IsbUJBQWFZLHlCQUFnQk0sZUFBaEIsQ0FBZ0NDLElBQWhDLENBQWI7QUFDRCxLQUZELE1BRU8sSUFBSXBCLFlBQVksQ0FBQ0MsS0FBYixLQUF1QixDQUEzQixFQUE4QjtBQUNuQyxtQkFBYVkseUJBQWdCTSxlQUFoQixDQUFnQ0MsSUFBaEMsQ0FBYjtBQUNELEtBRk0sTUFFQSxJQUFJcEIsWUFBWSxDQUFDQyxLQUFiLEtBQXVCLENBQTNCLEVBQThCO0FBQ25DLG1CQUFhVSx3QkFBZ0JRLGVBQWhCLENBQWdDQyxJQUFoQyxDQUFiO0FBQ0Q7QUFDRixHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNpbXVsYXRvclhjb2RlNiBmcm9tICcuL3NpbXVsYXRvci14Y29kZS02JztcbmltcG9ydCBTaW11bGF0b3JYY29kZTcgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtNyc7XG5pbXBvcnQgU2ltdWxhdG9yWGNvZGU3MyBmcm9tICcuL3NpbXVsYXRvci14Y29kZS03LjMnO1xuaW1wb3J0IFNpbXVsYXRvclhjb2RlOCBmcm9tICcuL3NpbXVsYXRvci14Y29kZS04JztcbmltcG9ydCBTaW11bGF0b3JYY29kZTkgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtOSc7XG5pbXBvcnQgU2ltdWxhdG9yWGNvZGU5MyBmcm9tICcuL3NpbXVsYXRvci14Y29kZS05LjMnO1xuaW1wb3J0IFNpbXVsYXRvclhjb2RlMTAgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtMTAnO1xuaW1wb3J0IHsgc2ltRXhpc3RzIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeGNvZGUgZnJvbSAnYXBwaXVtLXhjb2RlJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuXG5cbmZ1bmN0aW9uIGhhbmRsZVVuc3VwcG9ydGVkWGNvZGUgKHhjb2RlVmVyc2lvbikge1xuICBpZiAoeGNvZGVWZXJzaW9uLm1ham9yIDwgNikge1xuICAgIHRocm93IG5ldyBFcnJvcihgVHJpZWQgdG8gdXNlIGFuIGlPUyBzaW11bGF0b3Igd2l0aCB4Y29kZSBgICtcbiAgICAgICAgICAgICAgICAgICAgYHZlcnNpb24gJHt4Y29kZVZlcnNpb24udmVyc2lvblN0cmluZ30gYnV0IG9ubHkgWGNvZGUgdmVyc2lvbiBgICtcbiAgICAgICAgICAgICAgICAgICAgYDYuMC4wIGFuZCB1cCBhcmUgc3VwcG9ydGVkYCk7XG4gIH1cbn1cblxuLyoqXG4gKiBGaW5kcyBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBTaW11bGF0b3IgaW5zdGFuY2UgZm9yIHRoZSBnaXZlbiBJRC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdWRpZCAtIFRoZSBJRCBvZiBhbiBleGlzdGluZyBTaW11bGF0b3IuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIFNpbXVsYXRvciB3aXRoIGdpdmVuIHVkaWQgZG9lcyBub3QgZXhpc3QgaW4gZGV2aWNlcyBsaXN0LlxuICogICBJZiB5b3Ugd2FudCB0byBjcmVhdGUgYSBuZXcgc2ltdWxhdG9yLCB5b3UgY2FuIHVzZSB0aGUgYGNyZWF0ZURldmljZSgpYCBtZXRob2Qgb2ZcbiAqICAgW25vZGUtc2ltY3RsXShnaXRodWIuY29tL2FwcGl1bS9ub2RlLXNpbWN0bCkuXG4gKiBAcmV0dXJuIHtvYmplY3R9IFNpbXVsYXRvciBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoZSB1ZGlkIHBhc3NlZCBpbi5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0U2ltdWxhdG9yICh1ZGlkKSB7XG4gIGxldCB4Y29kZVZlcnNpb24gPSBhd2FpdCB4Y29kZS5nZXRWZXJzaW9uKHRydWUpO1xuXG4gIGlmICghYXdhaXQgc2ltRXhpc3RzKHVkaWQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBObyBzaW0gZm91bmQgd2l0aCB1ZGlkICR7dWRpZH1gKTtcbiAgfVxuXG4gIGxvZy5pbmZvKGBDb25zdHJ1Y3RpbmcgaU9TIHNpbXVsYXRvciBmb3IgWGNvZGUgdmVyc2lvbiAke3hjb2RlVmVyc2lvbi52ZXJzaW9uU3RyaW5nfSBgICtcbiAgICAgICAgICAgYHdpdGggdWRpZCAnJHt1ZGlkfSdgKTtcbiAgbGV0IFNpbUNsYXNzO1xuICBzd2l0Y2ggKHhjb2RlVmVyc2lvbi5tYWpvcikge1xuICAgIGNhc2UgNjpcbiAgICAgIFNpbUNsYXNzID0gU2ltdWxhdG9yWGNvZGU2O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA3OlxuICAgICAgaWYgKHhjb2RlVmVyc2lvbi5taW5vciA8IDMpIHtcbiAgICAgICAgU2ltQ2xhc3MgPSBTaW11bGF0b3JYY29kZTc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBTaW1DbGFzcyA9IFNpbXVsYXRvclhjb2RlNzM7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDg6XG4gICAgICBTaW1DbGFzcyA9IFNpbXVsYXRvclhjb2RlODtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgOTpcbiAgICAgIGlmICh4Y29kZVZlcnNpb24ubWlub3IgPCAzKSB7XG4gICAgICAgIFNpbUNsYXNzID0gU2ltdWxhdG9yWGNvZGU5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgU2ltQ2xhc3MgPSBTaW11bGF0b3JYY29kZTkzO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDpcbiAgICAgIFNpbUNsYXNzID0gU2ltdWxhdG9yWGNvZGUxMDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBoYW5kbGVVbnN1cHBvcnRlZFhjb2RlKHhjb2RlVmVyc2lvbik7XG4gICAgICBTaW1DbGFzcyA9IFNpbXVsYXRvclhjb2RlOTM7XG4gIH1cbiAgcmV0dXJuIG5ldyBTaW1DbGFzcyh1ZGlkLCB4Y29kZVZlcnNpb24pO1xufVxuXG4vKipcbiAqIFRha2VzIGEgc2V0IG9mIG9wdGlvbnMgYW5kIGZpbmRzIHRoZSBjb3JyZWN0IGRldmljZSBzdHJpbmcgaW4gb3JkZXIgZm9yIEluc3RydW1lbnRzIHRvXG4gKiBpZGVudGlmeSB0aGUgY29ycmVjdCBzaW11bGF0b3IuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgLSBUaGUgb3B0aW9ucyBhdmFpbGFibGUgYXJlOlxuICogICAtIGBkZXZpY2VOYW1lYCAtIGEgbmFtZSBmb3IgdGhlIGRldmljZS4gSWYgdGhlIGdpdmVuIGRldmljZSBuYW1lIHN0YXJ0cyB3aXRoIGA9YCwgdGhlIG5hbWUsIGxlc3MgdGhlIGVxdWFscyBzaWduLCBpcyByZXR1cm5lZC5cbiAqICAgLSBgcGxhdGZvcm1WZXJzaW9uYCAtIHRoZSB2ZXJzaW9uIG9mIGlPUyB0byB1c2UuIERlZmF1bHRzIHRvIHRoZSBjdXJyZW50IFhjb2RlJ3MgbWF4aW11bSBTREsgdmVyc2lvbi5cbiAqICAgLSBgZm9yY2VJcGhvbmVgIC0gZm9yY2UgdGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIGRldmljZSBzdHJpbmcgdG8gaVBob25lLiBEZWZhdWx0cyB0byBgZmFsc2VgLlxuICogICAtIGBmb3JjZUlwYWRgIC0gZm9yY2UgdGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIGRldmljZSBzdHJpbmcgdG8gaVBhZC4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAqICAgSWYgYm90aCBgZm9yY2VJcGhvbmVgIGFuZCBgZm9yY2VJcGFkYCBhcmUgdHJ1ZSwgdGhlIGRldmljZSB3aWxsIGJlIGZvcmNlZCB0byBpUGhvbmUuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgZm91bmQgZGV2aWNlIHN0cmluZywgZm9yIGV4YW1wbGU6XG4gKiAgICdpUGhvbmUgNSAoOC40KScgd2l0aCBYY29kZSA3K1xuICogICAnaVBob25lIDUgKDguNCBTaW11bGF0b3IpJyB3aXRoIFhjb2RlIDYrXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldERldmljZVN0cmluZyAob3B0cykge1xuICBsZXQgeGNvZGVWZXJzaW9uID0gYXdhaXQgeGNvZGUuZ2V0VmVyc2lvbih0cnVlKTtcblxuICBoYW5kbGVVbnN1cHBvcnRlZFhjb2RlKHhjb2RlVmVyc2lvbik7XG5cbiAgbG9nLmluZm8oYFJldHJpZXZpbmcgZGV2aWNlIG5hbWUgc3RyaW5nIGZvciBYY29kZSB2ZXJzaW9uICR7eGNvZGVWZXJzaW9uLnZlcnNpb25TdHJpbmd9YCk7XG4gIGlmICh4Y29kZVZlcnNpb24ubWFqb3IgPj0gOCkge1xuICAgIHJldHVybiBhd2FpdCBTaW11bGF0b3JYY29kZTcuZ2V0RGV2aWNlU3RyaW5nKG9wdHMpO1xuICB9IGVsc2UgaWYgKHhjb2RlVmVyc2lvbi5tYWpvciA9PT0gNykge1xuICAgIHJldHVybiBhd2FpdCBTaW11bGF0b3JYY29kZTcuZ2V0RGV2aWNlU3RyaW5nKG9wdHMpO1xuICB9IGVsc2UgaWYgKHhjb2RlVmVyc2lvbi5tYWpvciA9PT0gNikge1xuICAgIHJldHVybiBhd2FpdCBTaW11bGF0b3JYY29kZTYuZ2V0RGV2aWNlU3RyaW5nKG9wdHMpO1xuICB9XG59XG5cbmV4cG9ydCB7IGdldFNpbXVsYXRvciwgZ2V0RGV2aWNlU3RyaW5nIH07XG4iXSwiZmlsZSI6ImxpYi9zaW11bGF0b3IuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
