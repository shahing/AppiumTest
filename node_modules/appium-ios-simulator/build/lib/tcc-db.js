"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _utils = require("./utils");

class TCCDB {
  constructor(xcodeVersion, sharedResourcesDir) {
    this.xcodeVersion = xcodeVersion;
    this.sharedResourcesDir = sharedResourcesDir;
  }

  getDB() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this.db) {
        return _this.db;
      }

      const tccPath = _path.default.resolve(_this.sharedResourcesDir, 'Library', 'TCC');

      if (!(yield _appiumSupport.fs.exists(tccPath))) {
        yield (0, _appiumSupport.mkdirp)(tccPath);
      }

      _this.db = _path.default.resolve(tccPath, 'TCC.db');
      yield (0, _utils.execSQLiteQuery)(_this.db, `CREATE TABLE IF NOT EXISTS access (
      service TEXT NOT NULL DEFAULT '',
      client TEXT NOT NULL DEFAULT '',
      client_type INTEGER,
      allowed INTEGER,
      prompt_count INTEGER,
      csreq BLOB NOT NULL DEFAULT '',
      policy_ID INTEGER,
      PRIMARY KEY(service, client, client_type)
    );`);
      return _this.db;
    })();
  }

  execQuery(query, ...params) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return yield (0, _utils.execSQLiteQuery)((yield _this2.getDB()), query, ...params);
    })();
  }

}

var _default = TCCDB;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90Y2MtZGIuanMiXSwibmFtZXMiOlsiVENDREIiLCJjb25zdHJ1Y3RvciIsInhjb2RlVmVyc2lvbiIsInNoYXJlZFJlc291cmNlc0RpciIsImdldERCIiwiZGIiLCJ0Y2NQYXRoIiwicGF0aCIsInJlc29sdmUiLCJmcyIsImV4aXN0cyIsImV4ZWNRdWVyeSIsInF1ZXJ5IiwicGFyYW1zIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLEtBQU4sQ0FBWTtBQUNWQyxFQUFBQSxXQUFXLENBQUVDLFlBQUYsRUFBZ0JDLGtCQUFoQixFQUFvQztBQUM3QyxTQUFLRCxZQUFMLEdBQW9CQSxZQUFwQjtBQUNBLFNBQUtDLGtCQUFMLEdBQTBCQSxrQkFBMUI7QUFDRDs7QUFFS0MsRUFBQUEsS0FBTixHQUFlO0FBQUE7O0FBQUE7QUFDYixVQUFJLEtBQUksQ0FBQ0MsRUFBVCxFQUFhO0FBQ1gsZUFBTyxLQUFJLENBQUNBLEVBQVo7QUFDRDs7QUFFRCxZQUFNQyxPQUFPLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYSxLQUFJLENBQUNMLGtCQUFsQixFQUFzQyxTQUF0QyxFQUFpRCxLQUFqRCxDQUFoQjs7QUFDQSxVQUFJLFFBQVFNLGtCQUFHQyxNQUFILENBQVVKLE9BQVYsQ0FBUixDQUFKLEVBQWlDO0FBQy9CLGNBQU0sMkJBQU9BLE9BQVAsQ0FBTjtBQUNEOztBQUVELE1BQUEsS0FBSSxDQUFDRCxFQUFMLEdBQVVFLGNBQUtDLE9BQUwsQ0FBYUYsT0FBYixFQUFzQixRQUF0QixDQUFWO0FBQ0EsWUFBTSw0QkFBZ0IsS0FBSSxDQUFDRCxFQUFyQixFQUEwQjs7Ozs7Ozs7O09BQTFCLENBQU47QUFXQSxhQUFPLEtBQUksQ0FBQ0EsRUFBWjtBQXRCYTtBQXVCZDs7QUFFS00sRUFBQUEsU0FBTixDQUFpQkMsS0FBakIsRUFBd0IsR0FBR0MsTUFBM0IsRUFBbUM7QUFBQTs7QUFBQTtBQUNqQyxtQkFBYSxtQ0FBc0IsTUFBSSxDQUFDVCxLQUFMLEVBQXRCLEdBQW9DUSxLQUFwQyxFQUEyQyxHQUFHQyxNQUE5QyxDQUFiO0FBRGlDO0FBRWxDOztBQWpDUzs7ZUFvQ0diLEsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGZzLCBta2RpcnAgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyBleGVjU1FMaXRlUXVlcnkgfSBmcm9tICcuL3V0aWxzJztcblxuY2xhc3MgVENDREIge1xuICBjb25zdHJ1Y3RvciAoeGNvZGVWZXJzaW9uLCBzaGFyZWRSZXNvdXJjZXNEaXIpIHtcbiAgICB0aGlzLnhjb2RlVmVyc2lvbiA9IHhjb2RlVmVyc2lvbjtcbiAgICB0aGlzLnNoYXJlZFJlc291cmNlc0RpciA9IHNoYXJlZFJlc291cmNlc0RpcjtcbiAgfVxuXG4gIGFzeW5jIGdldERCICgpIHtcbiAgICBpZiAodGhpcy5kYikge1xuICAgICAgcmV0dXJuIHRoaXMuZGI7XG4gICAgfVxuXG4gICAgY29uc3QgdGNjUGF0aCA9IHBhdGgucmVzb2x2ZSh0aGlzLnNoYXJlZFJlc291cmNlc0RpciwgJ0xpYnJhcnknLCAnVENDJyk7XG4gICAgaWYgKCEoYXdhaXQgZnMuZXhpc3RzKHRjY1BhdGgpKSkge1xuICAgICAgYXdhaXQgbWtkaXJwKHRjY1BhdGgpO1xuICAgIH1cblxuICAgIHRoaXMuZGIgPSBwYXRoLnJlc29sdmUodGNjUGF0aCwgJ1RDQy5kYicpO1xuICAgIGF3YWl0IGV4ZWNTUUxpdGVRdWVyeSh0aGlzLmRiLCBgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgYWNjZXNzIChcbiAgICAgIHNlcnZpY2UgVEVYVCBOT1QgTlVMTCBERUZBVUxUICcnLFxuICAgICAgY2xpZW50IFRFWFQgTk9UIE5VTEwgREVGQVVMVCAnJyxcbiAgICAgIGNsaWVudF90eXBlIElOVEVHRVIsXG4gICAgICBhbGxvd2VkIElOVEVHRVIsXG4gICAgICBwcm9tcHRfY291bnQgSU5URUdFUixcbiAgICAgIGNzcmVxIEJMT0IgTk9UIE5VTEwgREVGQVVMVCAnJyxcbiAgICAgIHBvbGljeV9JRCBJTlRFR0VSLFxuICAgICAgUFJJTUFSWSBLRVkoc2VydmljZSwgY2xpZW50LCBjbGllbnRfdHlwZSlcbiAgICApO2ApO1xuXG4gICAgcmV0dXJuIHRoaXMuZGI7XG4gIH1cblxuICBhc3luYyBleGVjUXVlcnkgKHF1ZXJ5LCAuLi5wYXJhbXMpIHtcbiAgICByZXR1cm4gYXdhaXQgZXhlY1NRTGl0ZVF1ZXJ5KGF3YWl0IHRoaXMuZ2V0REIoKSwgcXVlcnksIC4uLnBhcmFtcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVENDREI7XG4iXSwiZmlsZSI6ImxpYi90Y2MtZGIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
