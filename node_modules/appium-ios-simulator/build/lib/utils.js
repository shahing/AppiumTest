"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.killAllSimulators = killAllSimulators;
exports.endAllSimulatorDaemons = endAllSimulatorDaemons;
exports.safeRimRaf = safeRimRaf;
exports.simExists = simExists;
exports.installSSLCert = installSSLCert;
exports.uninstallSSLCert = uninstallSSLCert;
exports.hasSSLCert = hasSSLCert;
exports.execSQLiteQuery = execSQLiteQuery;
exports.toBiometricDomainComponent = toBiometricDomainComponent;
exports.getDeveloperRoot = getDeveloperRoot;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _asyncbox = require("asyncbox");

var _appiumXcode = require("appium-xcode");

var _nodeSimctl = require("node-simctl");

var _appiumSupport = require("appium-support");

var _certificate = require("./certificate");

var _path = _interopRequireDefault(require("path"));

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-6"));

var _fkill = _interopRequireDefault(require("fkill"));

const DEFAULT_SIM_SHUTDOWN_TIMEOUT = 30000;
const BIOMETRICS = {
  touchId: 'fingerTouch',
  faceId: 'pearl'
};

function toBiometricDomainComponent(name) {
  if (!BIOMETRICS[name]) {
    throw new Error(`'${name}' is not a valid biometric. Use one of: ${JSON.stringify(_lodash.default.keys(BIOMETRICS))}`);
  }

  return BIOMETRICS[name];
}

function pkill(_x) {
  return _pkill.apply(this, arguments);
}

function _pkill() {
  _pkill = (0, _asyncToGenerator2.default)(function* (appName, forceKill = false) {
    let args = forceKill ? ['-9'] : [];
    args.push('-x', appName);

    try {
      yield (0, _teen_process.exec)('pkill', args);
      return 0;
    } catch (err) {
      if (!_lodash.default.isUndefined(err.code)) {
        throw new Error(`Cannot forcefully terminate ${appName}. pkill error code: ${err.code}`);
      }

      _logger.default.error(`Received unexpected error while trying to kill ${appName}: ${err.message}`);

      throw err;
    }
  });
  return _pkill.apply(this, arguments);
}

function killAllSimulators() {
  return _killAllSimulators.apply(this, arguments);
}

function _killAllSimulators() {
  _killAllSimulators = (0, _asyncToGenerator2.default)(function* (timeout = DEFAULT_SIM_SHUTDOWN_TIMEOUT) {
    _logger.default.debug('Killing all iOS Simulators');

    const xcodeVersion = yield (0, _appiumXcode.getVersion)(true);
    const appName = xcodeVersion.major >= 7 ? 'Simulator' : 'iOS Simulator';
    timeout = timeout * (xcodeVersion.major >= 8 ? 2 : 1);

    try {
      yield (0, _teen_process.exec)('xcrun', ['simctl', 'shutdown', xcodeVersion.major > 8 ? 'all' : 'booted'], {
        timeout
      });
    } catch (ign) {}

    const pids = [];

    try {
      const _ref = yield (0, _teen_process.exec)('osascript', ['-e', `tell application "System Events" to unix id of processes whose bundle identifier is "com.apple.iphonesimulator"`]),
            stdout = _ref.stdout;

      if (stdout.trim()) {
        pids.push(...stdout.trim().split(/\s+/));
      }
    } catch (ign) {}

    try {
      const _ref2 = yield (0, _teen_process.exec)('pgrep', ['-x', appName]),
            stdout = _ref2.stdout;

      if (stdout.trim()) {
        pids.push(...stdout.trim().split('\n'));
      }
    } catch (e) {
      if (e.code === 1 && !pids.length) {
        _logger.default.debug(`${appName} is not running. Continuing...`);

        return;
      }

      if (!pids.length) {
        _logger.default.warn(`pgrep error ${e.code} while detecting whether ${appName} is running. Trying to kill anyway.`);
      }
    }

    if (pids.length) {
      const uniquePids = _lodash.default.uniq(pids);

      _logger.default.debug(`Using fkill to kill processes: ${uniquePids.join(', ')}`);

      try {
        yield (0, _fkill.default)(uniquePids, {
          force: true
        });
      } catch (ign) {}
    }

    _logger.default.debug(`Using pkill to kill application: ${appName}`);

    try {
      yield pkill(appName, true);
    } catch (ign) {}

    let remainingDevices = [];

    function allSimsAreDown() {
      return _allSimsAreDown.apply(this, arguments);
    }

    function _allSimsAreDown() {
      _allSimsAreDown = (0, _asyncToGenerator2.default)(function* () {
        remainingDevices = [];
        let devices = yield (0, _nodeSimctl.getDevices)();
        devices = _lodash.default.flatten(_lodash.default.values(devices));
        return _lodash.default.every(devices, sim => {
          let state = sim.state.toLowerCase();
          let done = state === 'shutdown' || state === 'unavailable' || state === 'disconnected';

          if (!done) {
            remainingDevices.push(`${sim.name} (${sim.sdk}, udid: ${sim.udid}) is still in state '${state}'`);
          }

          return done;
        });
      });
      return _allSimsAreDown.apply(this, arguments);
    }

    try {
      yield (0, _asyncbox.waitForCondition)(allSimsAreDown, {
        waitMs: timeout,
        intervalMs: 200
      });
    } catch (err) {
      if (remainingDevices.length > 0) {
        _logger.default.warn(`The following devices are still not in the correct state after ${timeout} ms:`);

        for (var _i = 0; _i < remainingDevices.length; _i++) {
          let device = remainingDevices[_i];

          _logger.default.warn(`    ${device}`);
        }
      }

      throw err;
    }
  });
  return _killAllSimulators.apply(this, arguments);
}

function endAllSimulatorDaemons() {
  return _endAllSimulatorDaemons.apply(this, arguments);
}

function _endAllSimulatorDaemons() {
  _endAllSimulatorDaemons = (0, _asyncToGenerator2.default)(function* () {
    _logger.default.debug('Ending all simulator daemons');

    var _arr = ['com.apple.iphonesimulator', 'com.apple.CoreSimulator'];

    for (var _i2 = 0; _i2 < _arr.length; _i2++) {
      let servicePattern = _arr[_i2];

      _logger.default.debug(`Killing any other ${servicePattern} daemons`);

      let launchCtlCommand = `launchctl list | grep ${servicePattern} | cut -f 3 | xargs -n 1 launchctl`;

      try {
        let stopCmd = `${launchCtlCommand} stop`;
        yield (0, _teen_process.exec)('bash', ['-c', stopCmd]);
      } catch (err) {
        _logger.default.warn(`Could not stop ${servicePattern} daemons, carrying on anyway!`);
      }

      try {
        let removeCmd = `${launchCtlCommand} remove`;
        yield (0, _teen_process.exec)('bash', ['-c', removeCmd]);
      } catch (err) {
        _logger.default.warn(`Could not remove ${servicePattern} daemons, carrying on anyway!`);
      }
    }

    try {
      yield (0, _asyncbox.waitForCondition)((0, _asyncToGenerator2.default)(function* () {
        let _ref4 = yield (0, _teen_process.exec)('bash', ['-c', `ps -e  | grep launchd_sim | grep -v bash | grep -v grep | awk {'print$1'}`]),
            stdout = _ref4.stdout;

        return stdout.trim().length === 0;
      }), {
        waitMs: 5000,
        intervalMs: 500
      });
    } catch (err) {
      _logger.default.warn(`Could not end all simulator daemons, carrying on!`);
    }

    _logger.default.debug('Finishing ending all simulator daemons');
  });
  return _endAllSimulatorDaemons.apply(this, arguments);
}

function simExists(_x2) {
  return _simExists.apply(this, arguments);
}

function _simExists() {
  _simExists = (0, _asyncToGenerator2.default)(function* (udid) {
    let devices = yield (0, _nodeSimctl.getDevices)();
    devices = _lodash.default.toPairs(devices).map(pair => {
      return pair[1];
    }).reduce((a, b) => {
      return a.concat(b);
    }, []);
    return !!_lodash.default.find(devices, sim => {
      return sim.udid === udid;
    });
  });
  return _simExists.apply(this, arguments);
}

function safeRimRaf(_x3) {
  return _safeRimRaf.apply(this, arguments);
}

function _safeRimRaf() {
  _safeRimRaf = (0, _asyncToGenerator2.default)(function* (delPath, tryNum = 0) {
    try {
      yield _appiumSupport.fs.rimraf(delPath);
    } catch (err) {
      if (tryNum < 20) {
        if (err.message.indexOf('ENOTEMPTY') !== -1) {
          _logger.default.debug(`Path '${delPath}' was not empty during delete; retrying`);

          return yield safeRimRaf(delPath, tryNum + 1);
        } else if (err.message.indexOf('ENOENT') !== -1) {
          _logger.default.debug(`Path '${delPath}' did not exist when we tried to delete, ignoring`);

          return yield safeRimRaf(delPath, tryNum + 1);
        }
      }
    }
  });
  return _safeRimRaf.apply(this, arguments);
}

function installSSLCert(_x4, _x5) {
  return _installSSLCert.apply(this, arguments);
}

function _installSSLCert() {
  _installSSLCert = (0, _asyncToGenerator2.default)(function* (pemText, udid) {
    try {
      yield _appiumSupport.fs.which('openssl');
    } catch (e) {
      _logger.default.debug(`customSSLCert requires openssl to be available on path`);

      _logger.default.errorAndThrow(`Command 'openssl' not found`);
    }

    try {
      yield _appiumSupport.fs.which('sqlite3');
    } catch (e) {
      _logger.default.debug(`customSSLCert requires sqlite3 to be available on path`);

      _logger.default.errorAndThrow(`Command 'sqlite3' not found`);
    }

    let tempFileName = _path.default.resolve((yield _appiumSupport.tempDir.openDir()), 'temp-ssl-cert.pem');

    let pathToKeychain = new _simulatorXcode.default(udid).getDir();
    yield _appiumSupport.fs.writeFile(tempFileName, pemText);

    try {
      yield _appiumSupport.fs.stat(pathToKeychain);
    } catch (e) {
      _logger.default.debug(`Could not install SSL certificate. No simulator with udid '${udid}'`);

      _logger.default.errorAndThrow(e);
    }

    let certificate = new _certificate.Certificate(tempFileName);

    _logger.default.debug(`Installing certificate to ${pathToKeychain}`);

    yield certificate.add(pathToKeychain);
    yield _appiumSupport.fs.unlink(tempFileName);
    return certificate;
  });
  return _installSSLCert.apply(this, arguments);
}

function uninstallSSLCert(_x6, _x7) {
  return _uninstallSSLCert.apply(this, arguments);
}

function _uninstallSSLCert() {
  _uninstallSSLCert = (0, _asyncToGenerator2.default)(function* (pemText, udid) {
    try {
      let tempFileName = _path.default.resolve(__dirname, 'temp-ssl-cert.pem');

      let pathToKeychain = _path.default.resolve(new _simulatorXcode.default(udid).getDir());

      yield _appiumSupport.fs.writeFile(tempFileName, pemText);
      let certificate = new _certificate.Certificate(tempFileName);
      yield certificate.remove(pathToKeychain);
      yield _appiumSupport.fs.unlink(tempFileName);
      return certificate;
    } catch (e) {
      _logger.default.debug(`Could not uninstall SSL certificate. No simulator with udid '${udid}'`);

      _logger.default.errorAndThrow(e);
    }
  });
  return _uninstallSSLCert.apply(this, arguments);
}

function hasSSLCert(_x8, _x9) {
  return _hasSSLCert.apply(this, arguments);
}

function _hasSSLCert() {
  _hasSSLCert = (0, _asyncToGenerator2.default)(function* (pemText, udid) {
    const tempFileName = _path.default.resolve((yield _appiumSupport.tempDir.openDir()), 'temp-ssl-cert.pem');

    const pathToKeychain = new _simulatorXcode.default(udid).getDir();
    yield _appiumSupport.fs.writeFile(tempFileName, pemText);
    const certificate = new _certificate.Certificate(tempFileName);
    return certificate.has(pathToKeychain);
  });
  return _hasSSLCert.apply(this, arguments);
}

function execSQLiteQuery(_x10, _x11) {
  return _execSQLiteQuery.apply(this, arguments);
}

function _execSQLiteQuery() {
  _execSQLiteQuery = (0, _asyncToGenerator2.default)(function* (db, query, ...queryParams) {
    query = query.replace(/\n+/g, ' ');
    let queryTokens = query.split('?');
    let formattedQuery = [];
    queryParams.map(param => `${param}`).forEach((param, i) => {
      formattedQuery.push(queryTokens[i]);
      formattedQuery.push(param.replace(/'/g, "''"));
    });
    formattedQuery.push(queryTokens[queryTokens.length - 1]);

    _logger.default.debug(`Executing SQL query "${formattedQuery.join('')}" on '${db}'`);

    try {
      return (yield (0, _teen_process.exec)('sqlite3', ['-line', db, formattedQuery.join('')])).stdout;
    } catch (err) {
      throw new Error(`Cannot execute SQLite query "${formattedQuery.join('')}" to '${db}'. ` + `Original error: ${err.stderr}`);
    }
  });
  return _execSQLiteQuery.apply(this, arguments);
}

function getDeveloperRoot() {
  return _getDeveloperRoot.apply(this, arguments);
}

function _getDeveloperRoot() {
  _getDeveloperRoot = (0, _asyncToGenerator2.default)(function* () {
    const _ref5 = yield (0, _teen_process.exec)('xcode-select', ['-p']),
          stdout = _ref5.stdout;

    return stdout.trim();
  });
  return _getDeveloperRoot.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
