"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("./logger"));

var _appiumUiautomator2Server = require("appium-uiautomator2-server");

var _adbkit = _interopRequireDefault(require("adbkit"));

var _utils = require("./utils");

var _appiumSupport = require("appium-support");

const REQD_PARAMS = ['adb', 'tmpDir', 'host', 'systemPort', 'devicePort', 'disableWindowAnimation'];
const SERVER_LAUNCH_RETRIES = 20;
const SERVER_INSTALL_RETRIES = 20;
const INSTRUMENTATION_TARGET = 'io.appium.uiautomator2.server.test/androidx.test.runner.AndroidJUnitRunner';
const SERVER_PACKAGE_ID = 'io.appium.uiautomator2.server';
const SERVER_TEST_PACKAGE_ID = `${SERVER_PACKAGE_ID}.test`;

class UiAutomator2Server {
  constructor(opts = {}) {
    for (let req of REQD_PARAMS) {
      if (!opts || !_appiumSupport.util.hasValue(opts[req])) {
        throw new Error(`Option '${req}' is required!`);
      }

      this[req] = opts[req];
    }

    this.jwproxy = new _appiumBaseDriver.JWProxy({
      server: this.host,
      port: this.systemPort
    });
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
    this.client = _adbkit.default.createClient({
      port: this.adb.adbPort,
      host: this.host
    });
  }

  async installServerApk(installTimeout = SERVER_INSTALL_RETRIES * 1000) {
    const packagesInfo = [{
      appPath: _appiumUiautomator2Server.SERVER_APK_PATH,
      appId: SERVER_PACKAGE_ID
    }, {
      appPath: _appiumUiautomator2Server.TEST_APK_PATH,
      appId: SERVER_TEST_PACKAGE_ID
    }];
    let shouldUninstallServerPackages = false;
    let shouldInstallServerPackages = false;

    for (const _ref of packagesInfo) {
      const {
        appId,
        appPath
      } = _ref;

      if (appId === SERVER_TEST_PACKAGE_ID) {
        if (!(await this.adb.checkApkCert(appPath, appId))) {
          await this.adb.sign(appPath);
          shouldUninstallServerPackages = shouldUninstallServerPackages || (await this.adb.isAppInstalled(appId));
          shouldInstallServerPackages = true;
        }

        continue;
      }

      const appState = await this.adb.getApplicationInstallState(appPath, appId);

      _logger.default.debug(`${appId} installation state: ${appState}`);

      if (await this.adb.checkApkCert(appPath, appId)) {
        shouldUninstallServerPackages = shouldUninstallServerPackages || [this.adb.APP_INSTALL_STATE.OLDER_VERSION_INSTALLED, this.adb.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED].includes(appState);
      } else {
        await this.adb.sign(appPath);
        shouldUninstallServerPackages = shouldUninstallServerPackages || ![this.adb.APP_INSTALL_STATE.NOT_INSTALLED].includes(appState);
      }

      shouldInstallServerPackages = shouldInstallServerPackages || shouldUninstallServerPackages || [this.adb.APP_INSTALL_STATE.NOT_INSTALLED].includes(appState);
    }

    _logger.default.info(`Server packages are ${shouldInstallServerPackages ? '' : 'not '}going to be (re)installed`);

    if (shouldInstallServerPackages && shouldUninstallServerPackages) {
      _logger.default.info('Full packages reinstall is going to be performed');
    }

    for (const _ref2 of packagesInfo) {
      const {
        appId,
        appPath
      } = _ref2;

      if (shouldUninstallServerPackages) {
        try {
          await this.adb.uninstallApk(appId);
        } catch (err) {
          _logger.default.warn(`Error uninstalling '${appId}': ${err.message}`);
        }
      }

      if (shouldInstallServerPackages) {
        await this.adb.install(appPath, {
          replace: false,
          timeout: installTimeout
        });
      }
    }

    let retries = (0, _utils.getRetries)('Server install', installTimeout, SERVER_INSTALL_RETRIES);

    _logger.default.debug(`Waiting up to ${retries * 1000}ms for instrumentation '${INSTRUMENTATION_TARGET}' to be available`);

    let output;

    try {
      await (0, _asyncbox.retryInterval)(retries, 1000, async () => {
        output = await this.adb.shell(['pm', 'list', 'instrumentation']);

        if (output.indexOf('Could not access the Package Manager') !== -1) {
          let err = new Error(`Problem running package manager: ${output}`);
          output = null;
          throw err;
        } else if (output.indexOf(INSTRUMENTATION_TARGET) === -1) {
          throw new Error('No instrumentation process found. Retrying...');
        }

        _logger.default.debug(`Instrumentation '${INSTRUMENTATION_TARGET}' available`);
      });
    } catch (err) {
      _logger.default.error(`Unable to find instrumentation target '${INSTRUMENTATION_TARGET}': ${err.message}`);

      if (output) {
        _logger.default.debug('Available targets:');

        for (let line of output.split('\n')) {
          _logger.default.debug(`    ${line.replace('instrumentation:', '')}`);
        }
      }
    }
  }

  async startSession(caps) {
    await this.killUiAutomatorOnDevice();

    if (caps.skipServerInstallation) {
      _logger.default.info(`'skipServerInstallation' is set. Attempting to use UIAutomator2 server from the device.`);
    } else {
      _logger.default.info(`Starting UIAutomator2 server ${_appiumUiautomator2Server.version}`);

      _logger.default.info(`Using UIAutomator2 server from '${_appiumUiautomator2Server.SERVER_APK_PATH}' and test from '${_appiumUiautomator2Server.TEST_APK_PATH}'`);
    }

    await this.startSessionUsingAdbKit(caps.deviceUDID);
    let retries = (0, _utils.getRetries)('Server launch', caps.uiautomator2ServerLaunchTimeout, SERVER_LAUNCH_RETRIES);

    _logger.default.info(`Waiting up to ${retries * 1000}ms for UiAutomator2 to be online...`);

    await (0, _asyncbox.retryInterval)(retries, 1000, this.jwproxy.command.bind(this.jwproxy), '/status', 'GET');
    await this.jwproxy.command('/session', 'POST', {
      desiredCapabilities: caps
    });
  }

  async startSessionUsingAdbKit(deviceUDID) {
    let cmd = 'am instrument -w';

    if (this.disableWindowAnimation) {
      cmd = `${cmd} --no-window-animation`;
    }

    cmd = `${cmd} ${INSTRUMENTATION_TARGET}`;

    _logger.default.info(`Running command: 'adb -s ${deviceUDID} shell ${cmd}'`);

    this.client.shell(deviceUDID, cmd).then(_adbkit.default.util.readAll).then(function (output) {
      for (let line of output.toString().split('\n')) {
        if (line.length) {
          _logger.default.debug(`[UIAutomator2] ${line}`);
        }
      }
    }).catch(function (err) {
      _logger.default.error(`[UIAutomator2 Error] ${err.message}`);

      _logger.default.debug(`Full error: ${err.stack}`);
    });
  }

  async deleteSession() {
    _logger.default.debug('Deleting UiAutomator2 server session');

    try {
      await this.jwproxy.command('/', 'DELETE');
    } catch (err) {
      _logger.default.warn(`Did not get confirmation UiAutomator2 deleteSession worked; ` + `Error was: ${err}`);
    }
  }

  async killUiAutomatorOnDevice() {
    try {
      const pids = (await this.adb.getPIDsByName('uiautomator')).map(p => `${p}`);

      if (!_lodash.default.isEmpty(pids)) {
        const isRoot = await this.adb.root();

        try {
          await this.adb.shell(['kill', '-9', ...pids]);
        } finally {
          if (isRoot) {
            await this.adb.unroot();
          }
        }
      }
    } catch (err) {
      _logger.default.warn(`Unable to stop uiautomator process: ${err.message}`);
    }

    try {
      await this.adb.forceStop('io.appium.uiautomator2.server');
    } catch (ignore) {
      _logger.default.info("Unable to kill the io.appium.uiautomator2.server process, assuming it is already killed");
    }
  }

}

var _default = UiAutomator2Server;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
