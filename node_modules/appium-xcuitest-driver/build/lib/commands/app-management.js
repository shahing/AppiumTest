"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

let commands = {};

function extractMandatoryOptions(opts = {}, keys) {
  const result = {};

  for (const key of keys) {
    const value = opts[key];

    if (!_lodash.default.isString(value) || _lodash.default.isEmpty(value)) {
      _logger.default.errorAndThrow(`'${key}' is expected to be a valid string. '${value}' is given instead`);
    }

    result[key] = value;
  }

  return result;
}

commands.mobileInstallApp = async function (opts = {}) {
  const {
    app
  } = extractMandatoryOptions(opts, ['app']);
  const dstPath = await this.helpers.configureApp(app, '.app');

  _logger.default.info(`Installing '${dstPath}' to the ${this.isRealDevice() ? 'real device' : 'Simulator'} ` + `with UDID ${this.opts.device.udid}`);

  if (!(await _appiumSupport.fs.exists(dstPath))) {
    _logger.default.errorAndThrow(`The application at '${dstPath}' does not exist or is not accessible`);
  }

  try {
    await this.opts.device.installApp(dstPath);

    _logger.default.info(`Installation of '${dstPath}' succeeded`);
  } finally {
    if (dstPath !== app) {
      await _appiumSupport.fs.rimraf(dstPath);
    }
  }
};

commands.mobileIsAppInstalled = async function (opts = {}) {
  const {
    bundleId
  } = extractMandatoryOptions(opts, ['bundleId']);
  const installed = await this.opts.device.isAppInstalled(bundleId);

  _logger.default.info(`App '${bundleId}' is${installed ? '' : ' not'} installed`);

  return installed;
};

commands.mobileRemoveApp = async function (opts = {}) {
  const {
    bundleId
  } = extractMandatoryOptions(opts, ['bundleId']);

  _logger.default.info(`Uninstalling the application with bundle identifier '${bundleId}' ` + `from the ${this.isRealDevice() ? 'real device' : 'Simulator'} with UDID ${this.opts.device.udid}`);

  try {
    await this.opts.device.removeApp(bundleId);

    _logger.default.info(`Removal of '${bundleId}' succeeded`);

    return true;
  } catch (err) {
    _logger.default.warn(`Cannot remove '${bundleId}'. Original error: ${err.message}`);

    return false;
  }
};

commands.mobileLaunchApp = async function (opts = {}) {
  const wdaOpts = extractMandatoryOptions(opts, ['bundleId']);

  if (opts.arguments) {
    wdaOpts.arguments = _lodash.default.isArray(opts.arguments) ? opts.arguments : [opts.arguments];
  }

  if (opts.environment) {
    wdaOpts.environment = opts.environment;
  }

  return await this.proxyCommand('/wda/apps/launch', 'POST', wdaOpts);
};

commands.mobileTerminateApp = async function (opts = {}) {
  return await this.proxyCommand('/wda/apps/terminate', 'POST', extractMandatoryOptions(opts, ['bundleId']));
};

commands.mobileActivateApp = async function (opts = {}) {
  return await this.proxyCommand('/wda/apps/activate', 'POST', extractMandatoryOptions(opts, ['bundleId']));
};

commands.mobileQueryAppState = async function (opts = {}) {
  return await this.proxyCommand('/wda/apps/state', 'POST', extractMandatoryOptions(opts, ['bundleId']));
};

commands.installApp = async function (appPath) {
  await this.mobileInstallApp({
    app: appPath
  });
};

commands.activateApp = async function (bundleId, opts = {}) {
  return await this.mobileLaunchApp(Object.assign({}, opts, {
    bundleId
  }));
};

commands.isAppInstalled = async function (bundleId) {
  return await this.mobileIsAppInstalled({
    bundleId
  });
};

commands.terminateApp = async function (bundleId) {
  return await this.mobileTerminateApp({
    bundleId
  });
};

commands.queryAppState = async function (bundleId) {
  return await this.mobileQueryAppState({
    bundleId
  });
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
