"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

function assertIsSimulator(driver) {
  if (!driver.isSimulator()) {
    throw new Error('Biometric enrollment can only be performed on Simulator');
  }
}

commands.mobileEnrollBiometric = async function (opts = {}) {
  const {
    isEnabled = true
  } = opts;
  assertIsSimulator(this);
  await this.opts.device.enrollBiometric(isEnabled);
};

commands.mobileSendBiometricMatch = async function (opts = {}) {
  const {
    match = true,
    type = 'touchId'
  } = opts;
  assertIsSimulator(this);
  await this.opts.device.sendBiometricMatch(match, type);
};

commands.mobileIsBiometricEnrolled = async function () {
  assertIsSimulator(this);
  return await this.opts.device.isBiometricEnrolled();
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9iaW9tZXRyaWMuanMiXSwibmFtZXMiOlsiY29tbWFuZHMiLCJoZWxwZXJzIiwiZXh0ZW5zaW9ucyIsImFzc2VydElzU2ltdWxhdG9yIiwiZHJpdmVyIiwiaXNTaW11bGF0b3IiLCJFcnJvciIsIm1vYmlsZUVucm9sbEJpb21ldHJpYyIsIm9wdHMiLCJpc0VuYWJsZWQiLCJkZXZpY2UiLCJlbnJvbGxCaW9tZXRyaWMiLCJtb2JpbGVTZW5kQmlvbWV0cmljTWF0Y2giLCJtYXRjaCIsInR5cGUiLCJzZW5kQmlvbWV0cmljTWF0Y2giLCJtb2JpbGVJc0Jpb21ldHJpY0Vucm9sbGVkIiwiaXNCaW9tZXRyaWNFbnJvbGxlZCIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsSUFBSUEsUUFBUSxHQUFHLEVBQWY7QUFBQSxJQUFtQkMsT0FBTyxHQUFHLEVBQTdCO0FBQUEsSUFBaUNDLFVBQVUsR0FBRyxFQUE5Qzs7OztBQUVBLFNBQVNDLGlCQUFULENBQTRCQyxNQUE1QixFQUFvQztBQUNsQyxNQUFJLENBQUNBLE1BQU0sQ0FBQ0MsV0FBUCxFQUFMLEVBQTJCO0FBQ3pCLFVBQU0sSUFBSUMsS0FBSixDQUFVLHlEQUFWLENBQU47QUFDRDtBQUNGOztBQWNETixRQUFRLENBQUNPLHFCQUFULEdBQWlDLGdCQUFnQkMsSUFBSSxHQUFHLEVBQXZCLEVBQTJCO0FBQzFELFFBQU07QUFDSkMsSUFBQUEsU0FBUyxHQUFHO0FBRFIsTUFFRkQsSUFGSjtBQUlBTCxFQUFBQSxpQkFBaUIsQ0FBQyxJQUFELENBQWpCO0FBRUEsUUFBTSxLQUFLSyxJQUFMLENBQVVFLE1BQVYsQ0FBaUJDLGVBQWpCLENBQWlDRixTQUFqQyxDQUFOO0FBQ0QsQ0FSRDs7QUF3QkFULFFBQVEsQ0FBQ1ksd0JBQVQsR0FBb0MsZ0JBQWdCSixJQUFJLEdBQUcsRUFBdkIsRUFBMkI7QUFDN0QsUUFBTTtBQUNKSyxJQUFBQSxLQUFLLEdBQUcsSUFESjtBQUVKQyxJQUFBQSxJQUFJLEdBQUc7QUFGSCxNQUdGTixJQUhKO0FBS0FMLEVBQUFBLGlCQUFpQixDQUFDLElBQUQsQ0FBakI7QUFFQSxRQUFNLEtBQUtLLElBQUwsQ0FBVUUsTUFBVixDQUFpQkssa0JBQWpCLENBQW9DRixLQUFwQyxFQUEyQ0MsSUFBM0MsQ0FBTjtBQUNELENBVEQ7O0FBaUJBZCxRQUFRLENBQUNnQix5QkFBVCxHQUFxQyxrQkFBa0I7QUFDckRiLEVBQUFBLGlCQUFpQixDQUFDLElBQUQsQ0FBakI7QUFFQSxTQUFPLE1BQU0sS0FBS0ssSUFBTCxDQUFVRSxNQUFWLENBQWlCTyxtQkFBakIsRUFBYjtBQUNELENBSkQ7O0FBTUFDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjakIsVUFBZCxFQUEwQkYsUUFBMUIsRUFBb0NDLE9BQXBDO2VBRWVDLFUiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmZ1bmN0aW9uIGFzc2VydElzU2ltdWxhdG9yIChkcml2ZXIpIHtcbiAgaWYgKCFkcml2ZXIuaXNTaW11bGF0b3IoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQmlvbWV0cmljIGVucm9sbG1lbnQgY2FuIG9ubHkgYmUgcGVyZm9ybWVkIG9uIFNpbXVsYXRvcicpO1xuICB9XG59XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gRW5yb2xsT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IGlzRW5hYmxlZCBbdHJ1ZV0gLSBXaGV0aGVyIHRvIGVuYWJsZS9kaXNhYmxlIGJpb21ldHJpYyBlbnJvbGxtZW50LlxuICovXG5cbi8qKlxuICogRW5yb2xscyBiaW9tZXRyaWMgYXV0aGVudGljYXRpb24gb24gU2ltdWxhdG9yLlxuICpcbiAqIEBwYXJhbSB7RW5yb2xsT3B0aW9uc30gb3B0cyAtIEVucm9sbG1lbnQgb3B0aW9ucy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBlbnJvbGxtZW50IGZhaWxzIG9yIHRoZSBkZXZpY2UgaXMgbm90IGEgU2ltdWxhdG9yLlxuICovXG5jb21tYW5kcy5tb2JpbGVFbnJvbGxCaW9tZXRyaWMgPSBhc3luYyBmdW5jdGlvbiAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBpc0VuYWJsZWQgPSB0cnVlLFxuICB9ID0gb3B0cztcblxuICBhc3NlcnRJc1NpbXVsYXRvcih0aGlzKTtcblxuICBhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLmVucm9sbEJpb21ldHJpYyhpc0VuYWJsZWQpO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBCaW9tZXRyaWNNYXRjaE9wdGlvbnNcbiAqXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHR5cGUgW3RvdWNoSWRdIC0gVGhlIGJpb21ldHJpYyBmZWF0dXJlIG5hbWUuXG4gKiBAcHJvcGVydHkgez9ib29sZWFufSBtYXRjaCBbdHJ1ZV0gLSBXaGV0aGVyIHRvIHNpbXVsYXRlIGJpb21ldHJpYyBtYXRjaCBvciBub24tbWF0Y2guXG4gKi9cblxuLyoqXG4gKiBFbXVsYXRlcyBiaW9tZXRyaWMgbWF0Y2gvbm9uLW1hdGNoIGV2ZW50IG9uIFNpbXVsYXRvci5cbiAqIFRoZSBiaW9tZXRyaWMgZmVhdHVyZSBpcyBleHBlY3RlZCB0byBiZSBhbHJlYWR5IGVucm9sbGVkIGJlZm9yZSBleGVjdXRpbmcgdGhhdC5cbiAqXG4gKiBAcGFyYW0ge0Jpb21ldHJpY01hdGNoT3B0aW9uc30gb3B0cyAtIE1hdGNoaW5nIG9wdGlvbnMuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgbWF0Y2hpbmcgZmFpbHMgb3IgdGhlIGRldmljZSBpcyBub3QgYSBTaW11bGF0b3IuXG4gKi9cbmNvbW1hbmRzLm1vYmlsZVNlbmRCaW9tZXRyaWNNYXRjaCA9IGFzeW5jIGZ1bmN0aW9uIChvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIG1hdGNoID0gdHJ1ZSxcbiAgICB0eXBlID0gJ3RvdWNoSWQnLFxuICB9ID0gb3B0cztcblxuICBhc3NlcnRJc1NpbXVsYXRvcih0aGlzKTtcblxuICBhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLnNlbmRCaW9tZXRyaWNNYXRjaChtYXRjaCwgdHlwZSk7XG59O1xuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGJpb21ldHJpYyBpcyBjdXJyZW50bHkgZW5yb2xsZWQgb3Igbm90LlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYmlvbWV0cmljIGlzIGVucm9sbGVkLlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBkZXRlY3Rpb24gZmFpbHMgb3IgdGhlIGRldmljZSBpcyBub3QgYSBTaW11bGF0b3IuXG4gKi9cbmNvbW1hbmRzLm1vYmlsZUlzQmlvbWV0cmljRW5yb2xsZWQgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGFzc2VydElzU2ltdWxhdG9yKHRoaXMpO1xuXG4gIHJldHVybiBhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLmlzQmlvbWV0cmljRW5yb2xsZWQoKTtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9iaW9tZXRyaWMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
