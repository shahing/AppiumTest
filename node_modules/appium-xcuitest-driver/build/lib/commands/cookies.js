"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumBaseDriver = require("appium-base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.getCookies = async function getCookies() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  const cookies = (await this.remote.getCookies()) || {
    cookies: []
  };
  return cookies.cookies.map(function (cookie) {
    return Object.assign({}, cookie, {
      value: decodeURI(cookie.value)
    });
  });
};

commands.deleteCookie = async function deleteCookie(cookieName) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  const cookies = await this.getCookies();
  const cookie = cookies.find(cookie => cookie.name === cookieName);

  if (!cookie) {
    _logger.default.debug(`Cookie '${cookieName}' not found. Ignoring.`);

    return true;
  }

  await this._deleteCookie(cookie);
  return true;
};

commands.deleteCookies = async function deleteCookies() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  const cookies = await this.getCookies();

  for (const cookie of cookies) {
    await this._deleteCookie(cookie);
  }

  return true;
};

helpers._deleteCookie = async function _deleteCookie(cookie) {
  const url = `http${cookie.secure ? 's' : ''}://${cookie.domain}${cookie.path}`;
  return await this.remote.deleteCookie(cookie.name, url);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9jb29raWVzLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJnZXRDb29raWVzIiwiaXNXZWJDb250ZXh0IiwiZXJyb3JzIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsImNvb2tpZXMiLCJyZW1vdGUiLCJtYXAiLCJjb29raWUiLCJPYmplY3QiLCJhc3NpZ24iLCJ2YWx1ZSIsImRlY29kZVVSSSIsImRlbGV0ZUNvb2tpZSIsImNvb2tpZU5hbWUiLCJmaW5kIiwibmFtZSIsImxvZyIsImRlYnVnIiwiX2RlbGV0ZUNvb2tpZSIsImRlbGV0ZUNvb2tpZXMiLCJ1cmwiLCJzZWN1cmUiLCJkb21haW4iLCJwYXRoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUdBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7Ozs7QUFFQUYsUUFBUSxDQUFDRyxVQUFULEdBQXNCLGVBQWVBLFVBQWYsR0FBNkI7QUFDakQsTUFBSSxDQUFDLEtBQUtDLFlBQUwsRUFBTCxFQUEwQjtBQUN4QixVQUFNLElBQUlDLHlCQUFPQyxtQkFBWCxFQUFOO0FBQ0Q7O0FBR0QsUUFBTUMsT0FBTyxHQUFHLE9BQU0sS0FBS0MsTUFBTCxDQUFZTCxVQUFaLEVBQU4sS0FBa0M7QUFBQ0ksSUFBQUEsT0FBTyxFQUFFO0FBQVYsR0FBbEQ7QUFHQSxTQUFPQSxPQUFPLENBQUNBLE9BQVIsQ0FBZ0JFLEdBQWhCLENBQW9CLFVBQVVDLE1BQVYsRUFBa0I7QUFDM0MsV0FBT0MsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkYsTUFBbEIsRUFBMEI7QUFDL0JHLE1BQUFBLEtBQUssRUFBRUMsU0FBUyxDQUFDSixNQUFNLENBQUNHLEtBQVI7QUFEZSxLQUExQixDQUFQO0FBR0QsR0FKTSxDQUFQO0FBS0QsQ0FkRDs7QUFnQkFiLFFBQVEsQ0FBQ2UsWUFBVCxHQUF3QixlQUFlQSxZQUFmLENBQTZCQyxVQUE3QixFQUF5QztBQUMvRCxNQUFJLENBQUMsS0FBS1osWUFBTCxFQUFMLEVBQTBCO0FBQ3hCLFVBQU0sSUFBSUMseUJBQU9DLG1CQUFYLEVBQU47QUFDRDs7QUFFRCxRQUFNQyxPQUFPLEdBQUcsTUFBTSxLQUFLSixVQUFMLEVBQXRCO0FBQ0EsUUFBTU8sTUFBTSxHQUFHSCxPQUFPLENBQUNVLElBQVIsQ0FBY1AsTUFBRCxJQUFZQSxNQUFNLENBQUNRLElBQVAsS0FBZ0JGLFVBQXpDLENBQWY7O0FBQ0EsTUFBSSxDQUFDTixNQUFMLEVBQWE7QUFDWFMsb0JBQUlDLEtBQUosQ0FBVyxXQUFVSixVQUFXLHdCQUFoQzs7QUFDQSxXQUFPLElBQVA7QUFDRDs7QUFFRCxRQUFNLEtBQUtLLGFBQUwsQ0FBbUJYLE1BQW5CLENBQU47QUFDQSxTQUFPLElBQVA7QUFDRCxDQWREOztBQWdCQVYsUUFBUSxDQUFDc0IsYUFBVCxHQUF5QixlQUFlQSxhQUFmLEdBQWdDO0FBQ3ZELE1BQUksQ0FBQyxLQUFLbEIsWUFBTCxFQUFMLEVBQTBCO0FBQ3hCLFVBQU0sSUFBSUMseUJBQU9DLG1CQUFYLEVBQU47QUFDRDs7QUFFRCxRQUFNQyxPQUFPLEdBQUcsTUFBTSxLQUFLSixVQUFMLEVBQXRCOztBQUNBLE9BQUssTUFBTU8sTUFBWCxJQUFxQkgsT0FBckIsRUFBOEI7QUFDNUIsVUFBTSxLQUFLYyxhQUFMLENBQW1CWCxNQUFuQixDQUFOO0FBQ0Q7O0FBQ0QsU0FBTyxJQUFQO0FBQ0QsQ0FWRDs7QUFZQVQsT0FBTyxDQUFDb0IsYUFBUixHQUF3QixlQUFlQSxhQUFmLENBQThCWCxNQUE5QixFQUFzQztBQUM1RCxRQUFNYSxHQUFHLEdBQUksT0FBTWIsTUFBTSxDQUFDYyxNQUFQLEdBQWdCLEdBQWhCLEdBQXNCLEVBQUcsTUFBS2QsTUFBTSxDQUFDZSxNQUFPLEdBQUVmLE1BQU0sQ0FBQ2dCLElBQUssRUFBN0U7QUFDQSxTQUFPLE1BQU0sS0FBS2xCLE1BQUwsQ0FBWU8sWUFBWixDQUF5QkwsTUFBTSxDQUFDUSxJQUFoQyxFQUFzQ0ssR0FBdEMsQ0FBYjtBQUNELENBSEQ7O0FBS0FaLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjVixVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5cblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5jb21tYW5kcy5nZXRDb29raWVzID0gYXN5bmMgZnVuY3Rpb24gZ2V0Q29va2llcyAoKSB7XG4gIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm90SW1wbGVtZW50ZWRFcnJvcigpO1xuICB9XG5cbiAgLy8gZ2V0IHRoZSBjb29raWVzIGZyb20gdGhlIHJlbW90ZSBkZWJ1Z2dlciwgb3IgYW4gZW1wdHkgb2JqZWN0XG4gIGNvbnN0IGNvb2tpZXMgPSBhd2FpdCB0aGlzLnJlbW90ZS5nZXRDb29raWVzKCkgfHwge2Nvb2tpZXM6IFtdfTtcbiAgLy8gdGhlIHZhbHVlIGlzIFVSSSBlbmNvZGVkLCBzbyBkZWNvZGUgaXRcbiAgLy8gYnV0IGtlZXAgYWxsIHRoZSByZXN0IG9mIHRoZSBpbmZvIGludGFjdFxuICByZXR1cm4gY29va2llcy5jb29raWVzLm1hcChmdW5jdGlvbiAoY29va2llKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvb2tpZSwge1xuICAgICAgdmFsdWU6IGRlY29kZVVSSShjb29raWUudmFsdWUpLFxuICAgIH0pO1xuICB9KTtcbn07XG5cbmNvbW1hbmRzLmRlbGV0ZUNvb2tpZSA9IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUNvb2tpZSAoY29va2llTmFtZSkge1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbiAgfVxuXG4gIGNvbnN0IGNvb2tpZXMgPSBhd2FpdCB0aGlzLmdldENvb2tpZXMoKTtcbiAgY29uc3QgY29va2llID0gY29va2llcy5maW5kKChjb29raWUpID0+IGNvb2tpZS5uYW1lID09PSBjb29raWVOYW1lKTtcbiAgaWYgKCFjb29raWUpIHtcbiAgICBsb2cuZGVidWcoYENvb2tpZSAnJHtjb29raWVOYW1lfScgbm90IGZvdW5kLiBJZ25vcmluZy5gKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGF3YWl0IHRoaXMuX2RlbGV0ZUNvb2tpZShjb29raWUpO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmNvbW1hbmRzLmRlbGV0ZUNvb2tpZXMgPSBhc3luYyBmdW5jdGlvbiBkZWxldGVDb29raWVzICgpIHtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCk7XG4gIH1cblxuICBjb25zdCBjb29raWVzID0gYXdhaXQgdGhpcy5nZXRDb29raWVzKCk7XG4gIGZvciAoY29uc3QgY29va2llIG9mIGNvb2tpZXMpIHtcbiAgICBhd2FpdCB0aGlzLl9kZWxldGVDb29raWUoY29va2llKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmhlbHBlcnMuX2RlbGV0ZUNvb2tpZSA9IGFzeW5jIGZ1bmN0aW9uIF9kZWxldGVDb29raWUgKGNvb2tpZSkge1xuICBjb25zdCB1cmwgPSBgaHR0cCR7Y29va2llLnNlY3VyZSA/ICdzJyA6ICcnfTovLyR7Y29va2llLmRvbWFpbn0ke2Nvb2tpZS5wYXRofWA7XG4gIHJldHVybiBhd2FpdCB0aGlzLnJlbW90ZS5kZWxldGVDb29raWUoY29va2llLm5hbWUsIHVybCk7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvY29va2llcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
