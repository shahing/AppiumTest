"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumIosDriver = require("appium-ios-driver");

var _appiumBaseDriver = require("appium-base-driver");

let extensions = {};
Object.assign(extensions, _appiumIosDriver.iosCommands.execute);
const iosExecute = extensions.execute;

extensions.execute = async function (script, args) {
  if (!script.match(/^mobile:/) && !this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  return await iosExecute.call(this, script, args);
};

const iosExecuteAsync = extensions.executeAsync;

extensions.executeAsync = async function (script, args, sessionId) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  return await iosExecuteAsync.call(this, script, args, sessionId);
};

extensions.executeMobile = async function (mobileCommand, opts = {}) {
  const commandMap = {
    scroll: 'mobileScroll',
    swipe: 'mobileSwipe',
    pinch: 'mobilePinch',
    doubleTap: 'mobileDoubleTap',
    twoFingerTap: 'mobileTwoFingerTap',
    touchAndHold: 'mobileTouchAndHold',
    tap: 'mobileTap',
    dragFromToForDuration: 'mobileDragFromToForDuration',
    selectPickerWheelValue: 'mobileSelectPickerWheelValue',
    alert: 'mobileHandleAlert',
    setPasteboard: 'mobileSetPasteboard',
    getPasteboard: 'mobileGetPasteboard',
    source: 'mobileGetSource',
    getContexts: 'mobileGetContexts',
    installApp: 'mobileInstallApp',
    isAppInstalled: 'mobileIsAppInstalled',
    removeApp: 'mobileRemoveApp',
    launchApp: 'mobileLaunchApp',
    terminateApp: 'mobileTerminateApp',
    queryAppState: 'mobileQueryAppState',
    activateApp: 'mobileActivateApp',
    viewportScreenshot: 'getViewportScreenshot',
    startPerfRecord: 'mobileStartPerfRecord',
    stopPerfRecord: 'mobileStopPerfRecord',
    installCertificate: 'mobileInstallCertificate',
    startLogsBroadcast: 'mobileStartLogsBroadcast',
    stopLogsBroadcast: 'mobileStopLogsBroadcast',
    batteryInfo: 'mobileGetBatteryInfo',
    pressButton: 'mobilePressButton',
    enrollBiometric: 'mobileEnrollBiometric',
    sendBiometricMatch: 'mobileSendBiometricMatch',
    isBiometricEnrolled: 'mobileIsBiometricEnrolled',
    clearKeychains: 'mobileClearKeychains',
    getPermission: 'mobileGetPermission',
    siriCommand: 'mobileSiriCommand'
  };

  if (!_lodash.default.has(commandMap, mobileCommand)) {
    throw new _appiumBaseDriver.errors.UnknownCommandError(`Unknown mobile command "${mobileCommand}". Only ${_lodash.default.keys(commandMap)} commands are supported.`);
  }

  return await this[commandMap[mobileCommand]](opts);
};

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIl0sIm5hbWVzIjpbImV4dGVuc2lvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJpb3NDb21tYW5kcyIsImV4ZWN1dGUiLCJpb3NFeGVjdXRlIiwic2NyaXB0IiwiYXJncyIsIm1hdGNoIiwiaXNXZWJDb250ZXh0IiwiZXJyb3JzIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsImNhbGwiLCJpb3NFeGVjdXRlQXN5bmMiLCJleGVjdXRlQXN5bmMiLCJzZXNzaW9uSWQiLCJleGVjdXRlTW9iaWxlIiwibW9iaWxlQ29tbWFuZCIsIm9wdHMiLCJjb21tYW5kTWFwIiwic2Nyb2xsIiwic3dpcGUiLCJwaW5jaCIsImRvdWJsZVRhcCIsInR3b0ZpbmdlclRhcCIsInRvdWNoQW5kSG9sZCIsInRhcCIsImRyYWdGcm9tVG9Gb3JEdXJhdGlvbiIsInNlbGVjdFBpY2tlcldoZWVsVmFsdWUiLCJhbGVydCIsInNldFBhc3RlYm9hcmQiLCJnZXRQYXN0ZWJvYXJkIiwic291cmNlIiwiZ2V0Q29udGV4dHMiLCJpbnN0YWxsQXBwIiwiaXNBcHBJbnN0YWxsZWQiLCJyZW1vdmVBcHAiLCJsYXVuY2hBcHAiLCJ0ZXJtaW5hdGVBcHAiLCJxdWVyeUFwcFN0YXRlIiwiYWN0aXZhdGVBcHAiLCJ2aWV3cG9ydFNjcmVlbnNob3QiLCJzdGFydFBlcmZSZWNvcmQiLCJzdG9wUGVyZlJlY29yZCIsImluc3RhbGxDZXJ0aWZpY2F0ZSIsInN0YXJ0TG9nc0Jyb2FkY2FzdCIsInN0b3BMb2dzQnJvYWRjYXN0IiwiYmF0dGVyeUluZm8iLCJwcmVzc0J1dHRvbiIsImVucm9sbEJpb21ldHJpYyIsInNlbmRCaW9tZXRyaWNNYXRjaCIsImlzQmlvbWV0cmljRW5yb2xsZWQiLCJjbGVhcktleWNoYWlucyIsImdldFBlcm1pc3Npb24iLCJzaXJpQ29tbWFuZCIsIl8iLCJoYXMiLCJVbmtub3duQ29tbWFuZEVycm9yIiwia2V5cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHQSxJQUFJQSxVQUFVLEdBQUcsRUFBakI7QUFFQUMsTUFBTSxDQUFDQyxNQUFQLENBQWNGLFVBQWQsRUFBMEJHLDZCQUFZQyxPQUF0QztBQUVBLE1BQU1DLFVBQVUsR0FBR0wsVUFBVSxDQUFDSSxPQUE5Qjs7QUFDQUosVUFBVSxDQUFDSSxPQUFYLEdBQXFCLGdCQUFnQkUsTUFBaEIsRUFBd0JDLElBQXhCLEVBQThCO0FBQ2pELE1BQUksQ0FBQ0QsTUFBTSxDQUFDRSxLQUFQLENBQWEsVUFBYixDQUFELElBQTZCLENBQUMsS0FBS0MsWUFBTCxFQUFsQyxFQUF1RDtBQUNyRCxVQUFNLElBQUlDLHlCQUFPQyxtQkFBWCxFQUFOO0FBQ0Q7O0FBRUQsU0FBTyxNQUFNTixVQUFVLENBQUNPLElBQVgsQ0FBZ0IsSUFBaEIsRUFBc0JOLE1BQXRCLEVBQThCQyxJQUE5QixDQUFiO0FBQ0QsQ0FORDs7QUFRQSxNQUFNTSxlQUFlLEdBQUdiLFVBQVUsQ0FBQ2MsWUFBbkM7O0FBQ0FkLFVBQVUsQ0FBQ2MsWUFBWCxHQUEwQixnQkFBZ0JSLE1BQWhCLEVBQXdCQyxJQUF4QixFQUE4QlEsU0FBOUIsRUFBeUM7QUFDakUsTUFBSSxDQUFDLEtBQUtOLFlBQUwsRUFBTCxFQUEwQjtBQUN4QixVQUFNLElBQUlDLHlCQUFPQyxtQkFBWCxFQUFOO0FBQ0Q7O0FBRUQsU0FBTyxNQUFNRSxlQUFlLENBQUNELElBQWhCLENBQXFCLElBQXJCLEVBQTJCTixNQUEzQixFQUFtQ0MsSUFBbkMsRUFBeUNRLFNBQXpDLENBQWI7QUFDRCxDQU5EOztBQVNBZixVQUFVLENBQUNnQixhQUFYLEdBQTJCLGdCQUFnQkMsYUFBaEIsRUFBK0JDLElBQUksR0FBRyxFQUF0QyxFQUEwQztBQUNuRSxRQUFNQyxVQUFVLEdBQUc7QUFFakJDLElBQUFBLE1BQU0sRUFBRSxjQUZTO0FBR2pCQyxJQUFBQSxLQUFLLEVBQUUsYUFIVTtBQUlqQkMsSUFBQUEsS0FBSyxFQUFFLGFBSlU7QUFLakJDLElBQUFBLFNBQVMsRUFBRSxpQkFMTTtBQU1qQkMsSUFBQUEsWUFBWSxFQUFFLG9CQU5HO0FBT2pCQyxJQUFBQSxZQUFZLEVBQUUsb0JBUEc7QUFRakJDLElBQUFBLEdBQUcsRUFBRSxXQVJZO0FBU2pCQyxJQUFBQSxxQkFBcUIsRUFBRSw2QkFUTjtBQVVqQkMsSUFBQUEsc0JBQXNCLEVBQUUsOEJBVlA7QUFhakJDLElBQUFBLEtBQUssRUFBRSxtQkFiVTtBQWVqQkMsSUFBQUEsYUFBYSxFQUFFLHFCQWZFO0FBZ0JqQkMsSUFBQUEsYUFBYSxFQUFFLHFCQWhCRTtBQWtCakJDLElBQUFBLE1BQU0sRUFBRSxpQkFsQlM7QUFtQmpCQyxJQUFBQSxXQUFXLEVBQUUsbUJBbkJJO0FBc0JqQkMsSUFBQUEsVUFBVSxFQUFFLGtCQXRCSztBQXVCakJDLElBQUFBLGNBQWMsRUFBRSxzQkF2QkM7QUF3QmpCQyxJQUFBQSxTQUFTLEVBQUUsaUJBeEJNO0FBeUJqQkMsSUFBQUEsU0FBUyxFQUFFLGlCQXpCTTtBQTBCakJDLElBQUFBLFlBQVksRUFBRSxvQkExQkc7QUEyQmpCQyxJQUFBQSxhQUFhLEVBQUUscUJBM0JFO0FBNEJqQkMsSUFBQUEsV0FBVyxFQUFFLG1CQTVCSTtBQStCakJDLElBQUFBLGtCQUFrQixFQUFFLHVCQS9CSDtBQWlDakJDLElBQUFBLGVBQWUsRUFBRSx1QkFqQ0E7QUFrQ2pCQyxJQUFBQSxjQUFjLEVBQUUsc0JBbENDO0FBb0NqQkMsSUFBQUEsa0JBQWtCLEVBQUUsMEJBcENIO0FBc0NqQkMsSUFBQUEsa0JBQWtCLEVBQUUsMEJBdENIO0FBdUNqQkMsSUFBQUEsaUJBQWlCLEVBQUUseUJBdkNGO0FBeUNqQkMsSUFBQUEsV0FBVyxFQUFFLHNCQXpDSTtBQTJDakJDLElBQUFBLFdBQVcsRUFBRSxtQkEzQ0k7QUE2Q2pCQyxJQUFBQSxlQUFlLEVBQUUsdUJBN0NBO0FBOENqQkMsSUFBQUEsa0JBQWtCLEVBQUUsMEJBOUNIO0FBK0NqQkMsSUFBQUEsbUJBQW1CLEVBQUUsMkJBL0NKO0FBaURqQkMsSUFBQUEsY0FBYyxFQUFFLHNCQWpEQztBQW1EakJDLElBQUFBLGFBQWEsRUFBRSxxQkFuREU7QUFxRGpCQyxJQUFBQSxXQUFXLEVBQUU7QUFyREksR0FBbkI7O0FBd0RBLE1BQUksQ0FBQ0MsZ0JBQUVDLEdBQUYsQ0FBTXJDLFVBQU4sRUFBa0JGLGFBQWxCLENBQUwsRUFBdUM7QUFDckMsVUFBTSxJQUFJUCx5QkFBTytDLG1CQUFYLENBQWdDLDJCQUEwQnhDLGFBQWMsV0FBVXNDLGdCQUFFRyxJQUFGLENBQU92QyxVQUFQLENBQW1CLDBCQUFyRyxDQUFOO0FBQ0Q7O0FBQ0QsU0FBTyxNQUFNLEtBQUtBLFVBQVUsQ0FBQ0YsYUFBRCxDQUFmLEVBQWdDQyxJQUFoQyxDQUFiO0FBQ0QsQ0E3REQ7O2VBK0RlbEIsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBpb3NDb21tYW5kcyB9IGZyb20gJ2FwcGl1bS1pb3MtZHJpdmVyJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5cblxubGV0IGV4dGVuc2lvbnMgPSB7fTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBpb3NDb21tYW5kcy5leGVjdXRlKTtcblxuY29uc3QgaW9zRXhlY3V0ZSA9IGV4dGVuc2lvbnMuZXhlY3V0ZTtcbmV4dGVuc2lvbnMuZXhlY3V0ZSA9IGFzeW5jIGZ1bmN0aW9uIChzY3JpcHQsIGFyZ3MpIHtcbiAgaWYgKCFzY3JpcHQubWF0Y2goL15tb2JpbGU6LykgJiYgIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbiAgfVxuXG4gIHJldHVybiBhd2FpdCBpb3NFeGVjdXRlLmNhbGwodGhpcywgc2NyaXB0LCBhcmdzKTtcbn07XG5cbmNvbnN0IGlvc0V4ZWN1dGVBc3luYyA9IGV4dGVuc2lvbnMuZXhlY3V0ZUFzeW5jO1xuZXh0ZW5zaW9ucy5leGVjdXRlQXN5bmMgPSBhc3luYyBmdW5jdGlvbiAoc2NyaXB0LCBhcmdzLCBzZXNzaW9uSWQpIHtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCk7XG4gIH1cblxuICByZXR1cm4gYXdhaXQgaW9zRXhlY3V0ZUFzeW5jLmNhbGwodGhpcywgc2NyaXB0LCBhcmdzLCBzZXNzaW9uSWQpO1xufTtcblxuLy8gT3ZlcnJpZGVzIHRoZSAnZXhlY3V0ZU1vYmlsZScgZnVuY3Rpb24gZGVmaW5lZCBpbiBhcHBpdW0taW9zLWRyaXZlclxuZXh0ZW5zaW9ucy5leGVjdXRlTW9iaWxlID0gYXN5bmMgZnVuY3Rpb24gKG1vYmlsZUNvbW1hbmQsIG9wdHMgPSB7fSkge1xuICBjb25zdCBjb21tYW5kTWFwID0ge1xuICAgIC8vcmVnaW9uIGdlc3R1cmVzIHN1cHBvcnRcbiAgICBzY3JvbGw6ICdtb2JpbGVTY3JvbGwnLFxuICAgIHN3aXBlOiAnbW9iaWxlU3dpcGUnLFxuICAgIHBpbmNoOiAnbW9iaWxlUGluY2gnLFxuICAgIGRvdWJsZVRhcDogJ21vYmlsZURvdWJsZVRhcCcsXG4gICAgdHdvRmluZ2VyVGFwOiAnbW9iaWxlVHdvRmluZ2VyVGFwJyxcbiAgICB0b3VjaEFuZEhvbGQ6ICdtb2JpbGVUb3VjaEFuZEhvbGQnLFxuICAgIHRhcDogJ21vYmlsZVRhcCcsXG4gICAgZHJhZ0Zyb21Ub0ZvckR1cmF0aW9uOiAnbW9iaWxlRHJhZ0Zyb21Ub0ZvckR1cmF0aW9uJyxcbiAgICBzZWxlY3RQaWNrZXJXaGVlbFZhbHVlOiAnbW9iaWxlU2VsZWN0UGlja2VyV2hlZWxWYWx1ZScsXG5cbiAgICAvL2VuZHJlZ2lvbiBnZXN0dXJlcyBzdXBwb3J0XG4gICAgYWxlcnQ6ICdtb2JpbGVIYW5kbGVBbGVydCcsXG5cbiAgICBzZXRQYXN0ZWJvYXJkOiAnbW9iaWxlU2V0UGFzdGVib2FyZCcsXG4gICAgZ2V0UGFzdGVib2FyZDogJ21vYmlsZUdldFBhc3RlYm9hcmQnLFxuXG4gICAgc291cmNlOiAnbW9iaWxlR2V0U291cmNlJyxcbiAgICBnZXRDb250ZXh0czogJ21vYmlsZUdldENvbnRleHRzJyxcblxuICAgIC8vcmVnaW9uIG11bHRpcGxlIGFwcHMgbWFuYWdlbWVudFxuICAgIGluc3RhbGxBcHA6ICdtb2JpbGVJbnN0YWxsQXBwJyxcbiAgICBpc0FwcEluc3RhbGxlZDogJ21vYmlsZUlzQXBwSW5zdGFsbGVkJyxcbiAgICByZW1vdmVBcHA6ICdtb2JpbGVSZW1vdmVBcHAnLFxuICAgIGxhdW5jaEFwcDogJ21vYmlsZUxhdW5jaEFwcCcsXG4gICAgdGVybWluYXRlQXBwOiAnbW9iaWxlVGVybWluYXRlQXBwJyxcbiAgICBxdWVyeUFwcFN0YXRlOiAnbW9iaWxlUXVlcnlBcHBTdGF0ZScsXG4gICAgYWN0aXZhdGVBcHA6ICdtb2JpbGVBY3RpdmF0ZUFwcCcsXG4gICAgLy9lbmRyZWdpb24gbXVsdGlwbGUgYXBwcyBtYW5hZ2VtZW50XG5cbiAgICB2aWV3cG9ydFNjcmVlbnNob3Q6ICdnZXRWaWV3cG9ydFNjcmVlbnNob3QnLFxuXG4gICAgc3RhcnRQZXJmUmVjb3JkOiAnbW9iaWxlU3RhcnRQZXJmUmVjb3JkJyxcbiAgICBzdG9wUGVyZlJlY29yZDogJ21vYmlsZVN0b3BQZXJmUmVjb3JkJyxcblxuICAgIGluc3RhbGxDZXJ0aWZpY2F0ZTogJ21vYmlsZUluc3RhbGxDZXJ0aWZpY2F0ZScsXG5cbiAgICBzdGFydExvZ3NCcm9hZGNhc3Q6ICdtb2JpbGVTdGFydExvZ3NCcm9hZGNhc3QnLFxuICAgIHN0b3BMb2dzQnJvYWRjYXN0OiAnbW9iaWxlU3RvcExvZ3NCcm9hZGNhc3QnLFxuXG4gICAgYmF0dGVyeUluZm86ICdtb2JpbGVHZXRCYXR0ZXJ5SW5mbycsXG5cbiAgICBwcmVzc0J1dHRvbjogJ21vYmlsZVByZXNzQnV0dG9uJyxcblxuICAgIGVucm9sbEJpb21ldHJpYzogJ21vYmlsZUVucm9sbEJpb21ldHJpYycsXG4gICAgc2VuZEJpb21ldHJpY01hdGNoOiAnbW9iaWxlU2VuZEJpb21ldHJpY01hdGNoJyxcbiAgICBpc0Jpb21ldHJpY0Vucm9sbGVkOiAnbW9iaWxlSXNCaW9tZXRyaWNFbnJvbGxlZCcsXG5cbiAgICBjbGVhcktleWNoYWluczogJ21vYmlsZUNsZWFyS2V5Y2hhaW5zJyxcblxuICAgIGdldFBlcm1pc3Npb246ICdtb2JpbGVHZXRQZXJtaXNzaW9uJyxcblxuICAgIHNpcmlDb21tYW5kOiAnbW9iaWxlU2lyaUNvbW1hbmQnLFxuICB9O1xuXG4gIGlmICghXy5oYXMoY29tbWFuZE1hcCwgbW9iaWxlQ29tbWFuZCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25Db21tYW5kRXJyb3IoYFVua25vd24gbW9iaWxlIGNvbW1hbmQgXCIke21vYmlsZUNvbW1hbmR9XCIuIE9ubHkgJHtfLmtleXMoY29tbWFuZE1hcCl9IGNvbW1hbmRzIGFyZSBzdXBwb3J0ZWQuYCk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHRoaXNbY29tbWFuZE1hcFttb2JpbGVDb21tYW5kXV0ob3B0cyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvZXhlY3V0ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
