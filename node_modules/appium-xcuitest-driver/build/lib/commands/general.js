"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.extensions = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumIosDriver = require("appium-ios-driver");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

let commands = {},
    helpers = {},
    extensions = {};
exports.extensions = extensions;
exports.helpers = helpers;
exports.commands = commands;

commands.active = async function () {
  if (this.isWebContext()) {
    return await this.executeAtom('active_element', []);
  }

  return await this.proxyCommand(`/element/active`, 'GET');
};

commands.background = async function (duration) {
  const homescreenEndpoint = '/wda/homescreen';
  const deactivateAppEndpoint = '/wda/deactivateApp';
  let endpoint;
  let params;

  if (_lodash.default.isUndefined(duration)) {
    _logger.default.warn('commands.background: Application under test will never be restored in the future if no duration is provided. ' + 'See https://github.com/appium/appium/issues/7741');

    endpoint = deactivateAppEndpoint;
    params = {};
  } else if (_lodash.default.isNumber(duration)) {
    _logger.default.warn('commands.background: Passing numbers to \'duration\' argument is deprecated. ' + 'See https://github.com/appium/appium/issues/7741');

    if (duration >= 0) {
      params = {
        duration
      };
      endpoint = deactivateAppEndpoint;
    } else {
      endpoint = homescreenEndpoint;
    }
  } else if (_lodash.default.isPlainObject(duration)) {
    if (_lodash.default.has(duration, 'timeout')) {
      if (duration.timeout === null) {
        endpoint = homescreenEndpoint;
      } else if (_lodash.default.isNumber(duration.timeout)) {
        if (duration.timeout >= 0) {
          params = {
            duration: duration.timeout / 1000.0
          };
          endpoint = deactivateAppEndpoint;
        } else {
          endpoint = homescreenEndpoint;
        }
      }
    }
  }

  if (_lodash.default.isUndefined(endpoint)) {
    _logger.default.errorAndThrow('commands.background: Argument value is expected to be an object or \'undefined\'. ' + `'${duration}' value has been provided instead. ` + 'The \'timeout\' attribute can be \'null\' or any negative number to put the app under test ' + 'into background and never come back or a positive number of milliseconds to wait until the app is restored.');
  }

  return await this.proxyCommand(endpoint, 'POST', params, endpoint !== homescreenEndpoint);
};

commands.touchId = async function (match = true) {
  await this.mobileSendBiometricMatch({
    match
  });
};

commands.toggleEnrollTouchId = async function (isEnabled = true) {
  await this.mobileEnrollBiometric({
    isEnabled
  });
};

helpers.getWindowSizeWeb = async function getWindowSizeWeb() {
  return await this.executeAtom('get_window_size', []);
};

helpers.getWindowSizeNative = async function getWindowSizeNative() {
  return await this.proxyCommand(`/window/size`, 'GET');
};

commands.getWindowSize = async function (windowHandle = 'current') {
  if (windowHandle !== "current") {
    throw new _appiumBaseDriver.errors.NotYetImplementedError('Currently only getting current window size is supported.');
  }

  if (!this.isWebContext()) {
    return await this.getWindowSizeNative();
  } else {
    return await this.getWindowSizeWeb();
  }
};

commands.getWindowRect = async function () {
  const {
    width,
    height
  } = await this.getWindowSize();
  return {
    width,
    height,
    x: 0,
    y: 0
  };
};

commands.hideKeyboard = async function (strategy, ...possibleKeys) {
  if (!(this.opts.deviceName || '').includes('iPhone')) {
    try {
      await this.proxyCommand('/wda/keyboard/dismiss', 'POST');
      return;
    } catch (err) {
      _logger.default.debug('Cannot dismiss the keyboard using the native call. Trying to apply a workaround...');
    }
  }

  let keyboard;

  try {
    keyboard = await this.findNativeElementOrElements('class name', 'XCUIElementTypeKeyboard', false);
  } catch (err) {
    _logger.default.debug('No keyboard found. Unable to hide.');

    return;
  }

  possibleKeys.pop();
  possibleKeys = possibleKeys.filter(element => !!element);

  if (possibleKeys.length) {
    for (let key of possibleKeys) {
      let el = _lodash.default.last((await this.findNativeElementOrElements('accessibility id', key, true, keyboard)));

      if (el) {
        _logger.default.debug(`Attempting to hide keyboard by pressing '${key}' key.`);

        await this.nativeClick(el);
        return;
      }
    }
  } else {
    _logger.default.debug('Finding keyboard and clicking final button to close');

    if ((await this.getNativeAttribute('visible', keyboard)) === 'false') {
      _logger.default.debug('No visible keyboard found. Returning');

      return;
    }

    let buttons = await this.findNativeElementOrElements('class name', 'XCUIElementTypeButton', true, keyboard);
    await this.nativeClick(_lodash.default.last(buttons));
  }
};

commands.getDeviceTime = _appiumIosDriver.iosCommands.general.getDeviceTime;
commands.getStrings = _appiumIosDriver.iosCommands.general.getStrings;

commands.removeApp = async function (bundleId) {
  return await this.mobileRemoveApp({
    bundleId
  });
};

commands.launchApp = _appiumIosDriver.iosCommands.general.launchApp;
commands.closeApp = _appiumIosDriver.iosCommands.general.closeApp;

commands.keys = async function (keys) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.UnknownError('Command should be proxied to WDA');
  }

  let el = await this.active();

  if (_lodash.default.isUndefined(el.ELEMENT)) {
    throw new _appiumBaseDriver.errors.NoSuchElementError();
  }

  await this.setValue(keys, el.ELEMENT);
};

commands.setUrl = async function (url) {
  if (!this.isWebContext() && this.isRealDevice()) {
    return await this.proxyCommand('/url', 'POST', {
      url
    });
  }

  return await _appiumIosDriver.iosCommands.general.setUrl.call(this, url);
};

commands.getViewportRect = _appiumIosDriver.iosCommands.device.getViewportRect;

commands.getScreenInfo = async function () {
  return await this.proxyCommand('/wda/screen', 'GET');
};

commands.getStatusBarHeight = async function () {
  const {
    statusBarSize
  } = await this.getScreenInfo();
  return statusBarSize.height;
};

commands.getDevicePixelRatio = async function () {
  const {
    scale
  } = await this.getScreenInfo();
  return scale;
};

commands.mobilePressButton = async function (opts = {}) {
  const {
    name
  } = opts;

  if (!name) {
    _logger.default.errorAndThrow('Button name is mandatory');
  }

  return await this.proxyCommand('/wda/pressButton', 'POST', {
    name
  });
};

commands.mobileSiriCommand = async function (opts = {}) {
  const {
    text
  } = opts;

  if (!_appiumSupport.util.hasValue(text)) {
    _logger.default.errorAndThrow('"text" argument is mandatory');
  }

  return await this.proxyCommand('/wda/siri/activate', 'POST', {
    text
  });
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
