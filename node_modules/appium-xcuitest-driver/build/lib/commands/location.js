"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

const IDEVICELOCATION = 'idevicelocation';
const MINUS_MARKER = '--';
let commands = {};
exports.commands = commands;

function formatLocationArg(value) {
  value = `${value}`.trim();
  return value.startsWith('-') ? [MINUS_MARKER, value] : [value];
}

commands.setGeoLocation = async function (location) {
  let {
    latitude,
    longitude
  } = location;

  if (!_appiumSupport.util.hasValue(latitude) || !_appiumSupport.util.hasValue(longitude)) {
    _logger.default.errorAndThrow(`Both latitude and longitude should be set`);
  }

  if (this.isSimulator()) {
    await this.opts.device.setGeolocation(`${latitude}`, `${longitude}`);
    return;
  }

  try {
    await _appiumSupport.fs.which(IDEVICELOCATION);
  } catch (e) {
    _logger.default.errorAndThrow(`${IDEVICELOCATION} doesn't exist on the host. ` + 'Check https://github.com/JonGabilondoAngulo/idevicelocation on how to install the tool.');
  }

  let args = [];
  args.push(...formatLocationArg(latitude));
  args.push(...formatLocationArg(longitude));

  if (args.includes(MINUS_MARKER) && _lodash.default.countBy(args)[MINUS_MARKER] > 1) {
    args = [MINUS_MARKER, ..._lodash.default.without(args, MINUS_MARKER)];
  }

  args = ['-u', this.opts.udid, ...args];

  _logger.default.debug(`Executing ${IDEVICELOCATION} with args ${JSON.stringify(args)}`);

  try {
    await (0, _teen_process.exec)(IDEVICELOCATION, args);
  } catch (e) {
    _logger.default.errorAndThrow(`Can't set the location on device '${this.opts.udid}'. Original error: ${e.message}`);
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9sb2NhdGlvbi5qcyJdLCJuYW1lcyI6WyJJREVWSUNFTE9DQVRJT04iLCJNSU5VU19NQVJLRVIiLCJjb21tYW5kcyIsImZvcm1hdExvY2F0aW9uQXJnIiwidmFsdWUiLCJ0cmltIiwic3RhcnRzV2l0aCIsInNldEdlb0xvY2F0aW9uIiwibG9jYXRpb24iLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsInV0aWwiLCJoYXNWYWx1ZSIsImxvZyIsImVycm9yQW5kVGhyb3ciLCJpc1NpbXVsYXRvciIsIm9wdHMiLCJkZXZpY2UiLCJzZXRHZW9sb2NhdGlvbiIsImZzIiwid2hpY2giLCJlIiwiYXJncyIsInB1c2giLCJpbmNsdWRlcyIsIl8iLCJjb3VudEJ5Iiwid2l0aG91dCIsInVkaWQiLCJkZWJ1ZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLGVBQWUsR0FBRyxpQkFBeEI7QUFDQSxNQUFNQyxZQUFZLEdBQUcsSUFBckI7QUFFQSxJQUFJQyxRQUFRLEdBQUcsRUFBZjs7O0FBRUEsU0FBU0MsaUJBQVQsQ0FBNEJDLEtBQTVCLEVBQW1DO0FBQ2pDQSxFQUFBQSxLQUFLLEdBQUksR0FBRUEsS0FBTSxFQUFULENBQVdDLElBQVgsRUFBUjtBQUVBLFNBQU9ELEtBQUssQ0FBQ0UsVUFBTixDQUFpQixHQUFqQixJQUF3QixDQUFDTCxZQUFELEVBQWVHLEtBQWYsQ0FBeEIsR0FBZ0QsQ0FBQ0EsS0FBRCxDQUF2RDtBQUNEOztBQUVERixRQUFRLENBQUNLLGNBQVQsR0FBMEIsZ0JBQWdCQyxRQUFoQixFQUEwQjtBQUNsRCxNQUFJO0FBQUNDLElBQUFBLFFBQUQ7QUFBV0MsSUFBQUE7QUFBWCxNQUF3QkYsUUFBNUI7O0FBRUEsTUFBSSxDQUFDRyxvQkFBS0MsUUFBTCxDQUFjSCxRQUFkLENBQUQsSUFBNEIsQ0FBQ0Usb0JBQUtDLFFBQUwsQ0FBY0YsU0FBZCxDQUFqQyxFQUEyRDtBQUN6REcsb0JBQUlDLGFBQUosQ0FBbUIsMkNBQW5CO0FBQ0Q7O0FBRUQsTUFBSSxLQUFLQyxXQUFMLEVBQUosRUFBd0I7QUFDdEIsVUFBTSxLQUFLQyxJQUFMLENBQVVDLE1BQVYsQ0FBaUJDLGNBQWpCLENBQWlDLEdBQUVULFFBQVMsRUFBNUMsRUFBZ0QsR0FBRUMsU0FBVSxFQUE1RCxDQUFOO0FBQ0E7QUFDRDs7QUFFRCxNQUFJO0FBQ0YsVUFBTVMsa0JBQUdDLEtBQUgsQ0FBU3BCLGVBQVQsQ0FBTjtBQUNELEdBRkQsQ0FFRSxPQUFPcUIsQ0FBUCxFQUFVO0FBQ1ZSLG9CQUFJQyxhQUFKLENBQW1CLEdBQUVkLGVBQWdCLDhCQUFuQixHQUNBLHlGQURsQjtBQUVEOztBQUNELE1BQUlzQixJQUFJLEdBQUcsRUFBWDtBQUNBQSxFQUFBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxHQUFHcEIsaUJBQWlCLENBQUNNLFFBQUQsQ0FBOUI7QUFDQWEsRUFBQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsR0FBR3BCLGlCQUFpQixDQUFDTyxTQUFELENBQTlCOztBQUNBLE1BQUlZLElBQUksQ0FBQ0UsUUFBTCxDQUFjdkIsWUFBZCxLQUErQndCLGdCQUFFQyxPQUFGLENBQVVKLElBQVYsRUFBZ0JyQixZQUFoQixJQUFnQyxDQUFuRSxFQUFzRTtBQUVwRXFCLElBQUFBLElBQUksR0FBRyxDQUFDckIsWUFBRCxFQUFlLEdBQUl3QixnQkFBRUUsT0FBRixDQUFVTCxJQUFWLEVBQWdCckIsWUFBaEIsQ0FBbkIsQ0FBUDtBQUNEOztBQUNEcUIsRUFBQUEsSUFBSSxHQUFHLENBQUMsSUFBRCxFQUFPLEtBQUtOLElBQUwsQ0FBVVksSUFBakIsRUFBdUIsR0FBR04sSUFBMUIsQ0FBUDs7QUFDQVQsa0JBQUlnQixLQUFKLENBQVcsYUFBWTdCLGVBQWdCLGNBQWE4QixJQUFJLENBQUNDLFNBQUwsQ0FBZVQsSUFBZixDQUFxQixFQUF6RTs7QUFDQSxNQUFJO0FBQ0YsVUFBTSx3QkFBS3RCLGVBQUwsRUFBc0JzQixJQUF0QixDQUFOO0FBQ0QsR0FGRCxDQUVFLE9BQU9ELENBQVAsRUFBVTtBQUNWUixvQkFBSUMsYUFBSixDQUFtQixxQ0FBb0MsS0FBS0UsSUFBTCxDQUFVWSxJQUFLLHNCQUFxQlAsQ0FBQyxDQUFDVyxPQUFRLEVBQXJHO0FBQ0Q7QUFDRixDQWhDRDs7ZUFtQ2U5QixRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgeyBmcywgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmNvbnN0IElERVZJQ0VMT0NBVElPTiA9ICdpZGV2aWNlbG9jYXRpb24nO1xuY29uc3QgTUlOVVNfTUFSS0VSID0gJy0tJztcblxubGV0IGNvbW1hbmRzID0ge307XG5cbmZ1bmN0aW9uIGZvcm1hdExvY2F0aW9uQXJnICh2YWx1ZSkge1xuICB2YWx1ZSA9IGAke3ZhbHVlfWAudHJpbSgpO1xuICAvLyBOZWdhdGl2ZSBjb29yZGluYXRlIHZhbHVlcyBzaG91bGQgYmUgcHJvcGVybHkgZm9ybWF0dGVkXG4gIHJldHVybiB2YWx1ZS5zdGFydHNXaXRoKCctJykgPyBbTUlOVVNfTUFSS0VSLCB2YWx1ZV0gOiBbdmFsdWVdO1xufVxuXG5jb21tYW5kcy5zZXRHZW9Mb2NhdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICBsZXQge2xhdGl0dWRlLCBsb25naXR1ZGV9ID0gbG9jYXRpb247XG5cbiAgaWYgKCF1dGlsLmhhc1ZhbHVlKGxhdGl0dWRlKSB8fCAhdXRpbC5oYXNWYWx1ZShsb25naXR1ZGUpKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYEJvdGggbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBzaG91bGQgYmUgc2V0YCk7XG4gIH1cblxuICBpZiAodGhpcy5pc1NpbXVsYXRvcigpKSB7XG4gICAgYXdhaXQgdGhpcy5vcHRzLmRldmljZS5zZXRHZW9sb2NhdGlvbihgJHtsYXRpdHVkZX1gLCBgJHtsb25naXR1ZGV9YCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBhd2FpdCBmcy53aGljaChJREVWSUNFTE9DQVRJT04pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYCR7SURFVklDRUxPQ0FUSU9OfSBkb2Vzbid0IGV4aXN0IG9uIHRoZSBob3N0LiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAnQ2hlY2sgaHR0cHM6Ly9naXRodWIuY29tL0pvbkdhYmlsb25kb0FuZ3Vsby9pZGV2aWNlbG9jYXRpb24gb24gaG93IHRvIGluc3RhbGwgdGhlIHRvb2wuJyk7XG4gIH1cbiAgbGV0IGFyZ3MgPSBbXTtcbiAgYXJncy5wdXNoKC4uLmZvcm1hdExvY2F0aW9uQXJnKGxhdGl0dWRlKSk7XG4gIGFyZ3MucHVzaCguLi5mb3JtYXRMb2NhdGlvbkFyZyhsb25naXR1ZGUpKTtcbiAgaWYgKGFyZ3MuaW5jbHVkZXMoTUlOVVNfTUFSS0VSKSAmJiBfLmNvdW50QnkoYXJncylbTUlOVVNfTUFSS0VSXSA+IDEpIHtcbiAgICAvLyBNb3ZlIC0tIG1hcmtlciBhdCB0aGUgc3RhcnQgb2YgdGhlIGFyZ3MgYXJyYXkgaWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBvY2N1cnJlbmNlXG4gICAgYXJncyA9IFtNSU5VU19NQVJLRVIsIC4uLihfLndpdGhvdXQoYXJncywgTUlOVVNfTUFSS0VSKSldO1xuICB9XG4gIGFyZ3MgPSBbJy11JywgdGhpcy5vcHRzLnVkaWQsIC4uLmFyZ3NdO1xuICBsb2cuZGVidWcoYEV4ZWN1dGluZyAke0lERVZJQ0VMT0NBVElPTn0gd2l0aCBhcmdzICR7SlNPTi5zdHJpbmdpZnkoYXJncyl9YCk7XG4gIHRyeSB7XG4gICAgYXdhaXQgZXhlYyhJREVWSUNFTE9DQVRJT04sIGFyZ3MpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYENhbid0IHNldCB0aGUgbG9jYXRpb24gb24gZGV2aWNlICcke3RoaXMub3B0cy51ZGlkfScuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvbG9jYXRpb24uanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
