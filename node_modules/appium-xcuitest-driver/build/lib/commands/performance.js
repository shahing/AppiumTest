"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger"));

var _utils = require("../utils");

var _asyncbox = require("asyncbox");

let commands = {};
exports.commands = commands;
const RECORDERS_CACHE = {};
const DEFAULT_TIMEOUT_MS = 5 * 60 * 1000;
const STOP_TIMEOUT_MS = 3 * 60 * 1000;
const START_TIMEOUT_MS = 15 * 1000;
const DEFAULT_PROFILE_NAME = 'Activity Monitor';
const DEFAULT_EXT = '.trace';

async function finishPerfRecord(proc, stopGracefully = true) {
  if (!proc.isRunning) {
    return;
  }

  if (stopGracefully) {
    _logger.default.debug(`Sending SIGINT to the running instruments process`);

    return await proc.stop('SIGINT', STOP_TIMEOUT_MS);
  }

  _logger.default.debug(`Sending SIGTERM to the running instruments process`);

  await proc.stop();
}

async function uploadTrace(localFile, remotePath = null, uploadOptions = {}) {
  try {
    return await (0, _utils.encodeBase64OrUpload)(localFile, remotePath, uploadOptions);
  } finally {
    await _appiumSupport.fs.rimraf(localFile);
  }
}

commands.mobileStartPerfRecord = async function (opts = {}) {
  if (!this.relaxedSecurityEnabled && !this.isRealDevice()) {
    _logger.default.errorAndThrow(`Appium server must have relaxed security flag set in order ` + `for Simulator performance measurement to work`);
  }

  const {
    timeout = DEFAULT_TIMEOUT_MS,
    profileName = DEFAULT_PROFILE_NAME,
    pid
  } = opts;
  const runningRecorders = RECORDERS_CACHE[profileName];

  if (_lodash.default.isPlainObject(runningRecorders) && runningRecorders[this.opts.device.udid]) {
    const {
      proc,
      localPath
    } = runningRecorders[this.opts.device.udid];
    await finishPerfRecord(proc, false);

    if (await _appiumSupport.fs.exists(localPath)) {
      await _appiumSupport.fs.rimraf(localPath);
    }

    delete runningRecorders[this.opts.device.udid];
  }

  if (!(await _appiumSupport.fs.which('instruments'))) {
    _logger.default.errorAndThrow(`Cannot start performance recording, because 'instruments' ` + `tool cannot be found in PATH. Are Xcode development tools installed?`);
  }

  const localPath = await _appiumSupport.tempDir.path({
    prefix: `appium_perf_${profileName}_${Date.now()}`.replace(/\W/g, '_'),
    suffix: DEFAULT_EXT
  });
  const args = ['-w', this.opts.device.udid, '-t', profileName, '-D', localPath, '-l', timeout];

  if (pid) {
    if (`${pid}`.toLowerCase() === 'current') {
      const appInfo = await this.proxyCommand('/wda/activeAppInfo', 'GET');
      args.push('-p', appInfo.pid);
    } else {
      args.push('-p', pid);
    }
  }

  const proc = new _teen_process.SubProcess('instruments', args);

  _logger.default.info(`Starting 'instruments' with arguments: ${args.join(' ')}`);

  proc.on('exit', code => {
    const msg = `instruments exited with code '${code}'`;

    if (code) {
      _logger.default.warn(msg);
    } else {
      _logger.default.debug(msg);
    }
  });
  proc.on('output', (stdout, stderr) => {
    (stdout || stderr).split('\n').filter(x => x.length).map(x => _logger.default.debug(`[instruments] ${x}`));
  });
  await proc.start(0);

  try {
    await (0, _asyncbox.waitForCondition)(async () => await _appiumSupport.fs.exists(localPath), {
      waitMs: START_TIMEOUT_MS,
      intervalMs: 500
    });
  } catch (err) {
    try {
      await proc.stop('SIGKILL');
    } catch (ign) {}

    _logger.default.errorAndThrow(`Cannot start performance monitoring for '${profileName}' profile in ${START_TIMEOUT_MS}ms. ` + `Make sure you can execute it manually.`);
  }

  RECORDERS_CACHE[profileName] = Object.assign({}, RECORDERS_CACHE[profileName] || {}, {
    [this.opts.device.udid]: {
      proc,
      localPath
    }
  });
};

commands.mobileStopPerfRecord = async function (opts = {}) {
  if (!this.relaxedSecurityEnabled && !this.isRealDevice()) {
    _logger.default.errorAndThrow(`Appium server must have relaxed security flag set in order ` + `for Simulator performance measurement to work`);
  }

  const {
    remotePath,
    user,
    pass,
    method,
    profileName = DEFAULT_PROFILE_NAME
  } = opts;
  const runningRecorders = RECORDERS_CACHE[profileName];

  if (!_lodash.default.isPlainObject(runningRecorders) || !runningRecorders[this.opts.device.udid]) {
    _logger.default.errorAndThrow(`There are no records for performance profile '${profileName}' ` + `and device ${this.opts.device.udid}. ` + `Have you started the profiling before?`);
  }

  const {
    proc,
    localPath
  } = runningRecorders[this.opts.device.udid];
  await finishPerfRecord(proc, true);

  if (!(await _appiumSupport.fs.exists(localPath))) {
    _logger.default.errorAndThrow(`There is no .trace file found for performance profile '${profileName}' ` + `and device ${this.opts.device.udid}. ` + `Make sure the profile is supported on this device. ` + `You can use 'instruments -s' command to see the list of all available profiles.`);
  }

  const zipPath = `${localPath}.zip`;
  const zipArgs = ['-9', '-r', zipPath, _path.default.basename(localPath)];

  _logger.default.info(`Found perf trace record '${localPath}'. Compressing it with 'zip ${zipArgs.join(' ')}'`);

  try {
    await (0, _teen_process.exec)('zip', zipArgs, {
      cwd: _path.default.dirname(localPath)
    });
    return await uploadTrace(zipPath, remotePath, {
      user,
      pass,
      method
    });
  } finally {
    delete runningRecorders[this.opts.device.udid];

    if (await _appiumSupport.fs.exists(localPath)) {
      await _appiumSupport.fs.rimraf(localPath);
    }
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
