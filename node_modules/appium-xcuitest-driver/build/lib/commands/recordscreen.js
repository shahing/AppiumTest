"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger"));

var _utils = require("../utils");

var _iproxy = _interopRequireDefault(require("../wda/iproxy"));

let commands = {};
exports.commands = commands;
const MAX_RECORDING_TIME_SEC = 60 * 30;
const DEFAULT_RECORDING_TIME_SEC = 60 * 3;
const DEFAULT_MJPEG_SERVER_PORT = 9100;
const DEFAULT_FPS = 10;
const DEFAULT_QUALITY = 'medium';
const DEFAULT_VCODEC = 'mjpeg';
const MP4_EXT = '.mp4';
const FFMPEG_BINARY = 'ffmpeg';

const ffmpegLogger = _appiumSupport.logger.getLogger(FFMPEG_BINARY);

const QUALITY_MAPPING = {
  low: 10,
  medium: 25,
  high: 75,
  photo: 100
};

class ScreenRecorder {
  constructor(udid, videoPath, opts = {}) {
    this.videoPath = videoPath;
    this.opts = opts;
    this.udid = udid;
    this.mainProcess = null;
    this.iproxy = null;
    this.timeoutHandler = null;
  }

  async start(timeoutMs) {
    try {
      await _appiumSupport.fs.which(FFMPEG_BINARY);
    } catch (err) {
      throw new Error(`'${FFMPEG_BINARY}' binary is not found in PATH. Install it using 'brew install ffmpeg'. ` + `Check https://www.ffmpeg.org/download.html for more details.`);
    }

    const localPort = this.opts.remotePort;

    if (this.opts.usePortForwarding) {
      await this.startIproxy(localPort);
    }

    const args = ['-f', 'mjpeg', '-i', `http://localhost:${localPort}`];

    if (this.opts.videoScale) {
      args.push('-vf', `scale=${this.opts.videoScale}`);
    }

    args.push('-vcodec', this.opts.videoType, '-y', this.videoPath);
    this.mainProcess = new _teen_process.SubProcess(FFMPEG_BINARY, args);
    this.mainProcess.on('output', (stdout, stderr) => {
      if (stderr && !stderr.includes('frame=')) {
        ffmpegLogger.info(`${stderr}`);
      }
    });
    await this.mainProcess.start(5000);

    _logger.default.info(`Starting screen capture on the device '${this.udid}' with command: '${FFMPEG_BINARY} ${args.join(' ')}'. ` + `Will timeout in ${timeoutMs}ms`);

    this.timeoutHandler = setTimeout(async () => {
      if (!(await this.interrupt())) {
        _logger.default.warn(`Cannot finish the active screen recording on the device '${this.udid}' after ${timeoutMs}ms timeout`);
      }
    }, timeoutMs);
  }

  async startIproxy(localPort) {
    this.iproxy = new _iproxy.default(this.udid, localPort, this.opts.remotePort);

    try {
      await this.iproxy.start();
    } catch (err) {
      _logger.default.warn(`Cannot start iproxy. Assuming it is already forwarding the remote port ${this.opts.remotePort} to ${localPort} ` + `for the device ${this.udid}. Set the custom value to 'mjpegServerPort' capability if this is an undesired behavior. ` + `Original error: ${err.message}`);

      this.iproxy = null;
    }
  }

  async stopIproxy() {
    if (!this.iproxy) {
      return;
    }

    const quitPromise = this.iproxy.quit();
    this.iproxy = null;

    try {
      await quitPromise;
    } catch (err) {
      _logger.default.warn(`Cannot stop iproxy. Original error: ${err.message}`);
    }
  }

  async interrupt(force = false) {
    let result = true;

    if (this.timeoutHandler) {
      clearTimeout(this.timeoutHandler);
      this.timeoutHandler = null;
    }

    if (this.mainProcess && this.mainProcess.isRunning) {
      const interruptPromise = this.mainProcess.stop(force ? 'SIGTERM' : 'SIGINT');
      this.mainProcess = null;

      try {
        await interruptPromise;
      } catch (e) {
        _logger.default.warn(`Cannot ${force ? 'terminate' : 'interrupt'} ${FFMPEG_BINARY}. ` + `Original error: ${e.message}`);

        result = false;
      }
    }

    if (this.opts.usePortForwarding) {
      await this.stopIproxy();
    }

    return result;
  }

  async finish() {
    await this.interrupt();
    return this.videoPath;
  }

  async cleanup() {
    if (await _appiumSupport.fs.exists(this.videoPath)) {
      await _appiumSupport.fs.rimraf(this.videoPath);
    }
  }

}

commands.startRecordingScreen = async function (options = {}) {
  const {
    videoType = DEFAULT_VCODEC,
    timeLimit = DEFAULT_RECORDING_TIME_SEC,
    videoQuality = DEFAULT_QUALITY,
    videoFps = DEFAULT_FPS,
    videoScale,
    forceRestart
  } = options;
  let result = '';

  if (!forceRestart) {
    _logger.default.info(`Checking if there is/was a previous screen recording. ` + `Set 'forceRestart' option to 'true' if you'd like to skip this step.`);

    result = await this.stopRecordingScreen(options);
  }

  const videoPath = await _appiumSupport.tempDir.path({
    prefix: `appium_${Math.random().toString(16).substring(2, 8)}`,
    suffix: MP4_EXT
  });
  const screenRecorder = new ScreenRecorder(this.opts.device.udid, videoPath, {
    remotePort: this.opts.mjpegServerPort || DEFAULT_MJPEG_SERVER_PORT,
    usePortForwarding: this.isRealDevice(),
    videoType,
    videoScale
  });

  if (!(await screenRecorder.interrupt(true))) {
    _logger.default.errorAndThrow('Unable to stop screen recording process');
  }

  if (this._recentScreenRecorder) {
    await this._recentScreenRecorder.cleanup();
    this._recentScreenRecorder = null;
  }

  const timeoutSeconds = parseFloat(timeLimit);

  if (isNaN(timeoutSeconds) || timeoutSeconds > MAX_RECORDING_TIME_SEC || timeoutSeconds <= 0) {
    _logger.default.errorAndThrow(`The timeLimit value must be in range [1, ${MAX_RECORDING_TIME_SEC}] seconds. ` + `The value of '${timeLimit}' has been passed instead.`);
  }

  let {
    mjpegServerScreenshotQuality,
    mjpegServerFramerate
  } = await this.proxyCommand('/appium/settings', 'GET');

  if (videoQuality) {
    const quality = _lodash.default.isInteger(videoQuality) ? videoQuality : QUALITY_MAPPING[_lodash.default.toLower(videoQuality)];

    if (!quality) {
      throw new Error(`videoQuality value should be one of ${JSON.stringify(_lodash.default.keys(QUALITY_MAPPING))} or a number in range 1..100. ` + `'${videoQuality}' is given instead`);
    }

    mjpegServerScreenshotQuality = mjpegServerScreenshotQuality !== quality ? quality : undefined;
  } else {
    mjpegServerScreenshotQuality = undefined;
  }

  if (videoFps) {
    const fps = parseInt(videoFps, 10);

    if (isNaN(fps)) {
      throw new Error(`videoFps value should be a valid number in range 1..60. ` + `'${videoFps}' is given instead`);
    }

    mjpegServerFramerate = mjpegServerFramerate !== fps ? fps : undefined;
  } else {
    mjpegServerFramerate = undefined;
  }

  if (_appiumSupport.util.hasValue(mjpegServerScreenshotQuality) || _appiumSupport.util.hasValue(mjpegServerFramerate)) {
    await this.proxyCommand('/appium/settings', 'POST', {
      mjpegServerScreenshotQuality,
      mjpegServerFramerate
    });
  }

  try {
    await screenRecorder.start(timeoutSeconds * 1000);
  } catch (e) {
    await screenRecorder.interrupt(true);
    await screenRecorder.cleanup();
    throw e;
  }

  this._recentScreenRecorder = screenRecorder;
  return result;
};

commands.stopRecordingScreen = async function (options = {}) {
  const {
    remotePath,
    user,
    pass,
    method
  } = options;

  if (!this._recentScreenRecorder) {
    _logger.default.info('Screen recording is not running. There is nothing to stop.');

    return '';
  }

  try {
    const videoPath = await this._recentScreenRecorder.finish();

    if (!(await _appiumSupport.fs.exists(videoPath))) {
      _logger.default.errorAndThrow(`The screen recorder utility has failed ` + `to store the actual screen recording at '${videoPath}'`);
    }

    return await (0, _utils.encodeBase64OrUpload)(videoPath, remotePath, {
      user,
      pass,
      method
    });
  } finally {
    await this._recentScreenRecorder.interrupt(true);
    await this._recentScreenRecorder.cleanup();
    this._recentScreenRecorder = null;
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
