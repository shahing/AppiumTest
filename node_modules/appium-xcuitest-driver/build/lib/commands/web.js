"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumIosDriver = require("appium-ios-driver");

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

const IPHONE_EXTRA_WEB_COORD_SCROLL_OFFSET = -15;
const IPHONE_EXTRA_WEB_COORD_NON_SCROLL_OFFSET = 10;
const IPHONE_WEB_COORD_OFFSET = -10;
const IPHONE_WEB_COORD_SMART_APP_BANNER_OFFSET = 84;
const IPHONE_X_EXTRA_WEB_COORD_SCROLL_OFFSET = -90;
const IPHONE_X_EXTRA_WEB_COORD_NON_SCROLL_OFFSET = -10;
const IPHONE_X_WEB_COORD_OFFSET = 40;
const IPAD_EXTRA_WEB_COORD_SCROLL_OFFSET = -10;
const IPAD_EXTRA_WEB_COORD_NON_SCROLL_OFFSET = 0;
const IPAD_WEB_COORD_OFFSET = 10;
const IPAD_WEB_COORD_SMART_APP_BANNER_OFFSET = 95;
const IPHONE_X_WIDTH = 375;
const IPHONE_X_HEIGHT = 812;
const ATOM_WAIT_TIMEOUT = 5 * 60000;
let extensions = {};
Object.assign(extensions, _appiumIosDriver.iosCommands.web);

extensions.getSafariIsIphone = async function getSafariIsIphone() {
  try {
    const userAgent = await this.execute('return navigator.userAgent');
    return userAgent.toLowerCase().includes('iphone');
  } catch (err) {
    _logger.default.warn(`Unable to find device type from useragent. Assuming iPhone`);

    _logger.default.debug(`Error: ${err.message}`);
  }

  return true;
};

extensions.getSafariIsIphoneX = async function getSafariIsIphone() {
  try {
    const script = 'return {height: window.screen.availHeight, width: window.screen.availWidth};';
    const {
      height,
      width
    } = await this.execute(script);
    return height === IPHONE_X_HEIGHT && width === IPHONE_X_WIDTH || height === IPHONE_X_WIDTH && width === IPHONE_X_HEIGHT;
  } catch (err) {
    _logger.default.warn(`Unable to find device type from useragent. Assuming not iPhone X`);

    _logger.default.debug(`Error: ${err.message}`);
  }

  return false;
};

const getElementHeightMemoized = _lodash.default.memoize(async function (key, driver, el) {
  el = _appiumSupport.util.unwrapElement(el);
  return (await driver.getNativeRect(el)).height;
});

extensions.getExtraTranslateWebCoordsOffset = async function (coords, webviewRect) {
  let offset = 0;
  const implicitWaitMs = this.implicitWaitMs;
  const isIphone = await this.getSafariIsIphone();
  const isIphoneX = isIphone && (await this.getSafariIsIphoneX());

  try {
    this.setImplicitWait(0);
    await this.findNativeElementOrElements('accessibility id', 'ReloadButton', false);

    if (isIphoneX) {
      offset += IPHONE_X_EXTRA_WEB_COORD_NON_SCROLL_OFFSET;
    } else if (isIphone) {
      offset += IPHONE_EXTRA_WEB_COORD_NON_SCROLL_OFFSET;
    } else {
      offset += IPAD_EXTRA_WEB_COORD_NON_SCROLL_OFFSET;
    }
  } catch (err) {
    try {
      const el = await this.findNativeElementOrElements('accessibility id', 'URL', false);
      offset -= await getElementHeightMemoized('URLBar', this, el);
    } catch (ign) {}
  } finally {
    this.setImplicitWait(implicitWaitMs);
  }

  if (coords.y > webviewRect.height) {
    if (isIphoneX) {
      offset += IPHONE_X_EXTRA_WEB_COORD_SCROLL_OFFSET;
    } else if (isIphone) {
      offset += IPHONE_EXTRA_WEB_COORD_SCROLL_OFFSET;
    } else {
      offset += IPAD_EXTRA_WEB_COORD_SCROLL_OFFSET;
    }
  }

  offset += isIphone ? IPHONE_WEB_COORD_OFFSET : IPAD_WEB_COORD_OFFSET;
  offset += isIphoneX ? IPHONE_X_WEB_COORD_OFFSET : 0;

  _logger.default.debug(`Extra translated web coordinates offset: ${offset}`);

  return offset;
};

extensions.getExtraNativeWebTapOffset = async function () {
  let offset = 0;
  const implicitWaitMs = this.implicitWaitMs;

  try {
    this.setImplicitWait(0);

    try {
      const el = await this.findNativeElementOrElements('-ios predicate string', `name LIKE '*, Tab' AND visible = 1`, false);
      offset += await getElementHeightMemoized('TabBar', this, el);
    } catch (ign) {}

    try {
      await this.findNativeElementOrElements('accessibility id', 'Close app download offer', false);
      offset += (await this.getSafariIsIphone()) ? IPHONE_WEB_COORD_SMART_APP_BANNER_OFFSET : IPAD_WEB_COORD_SMART_APP_BANNER_OFFSET;
    } catch (ign) {}
  } finally {
    this.setImplicitWait(implicitWaitMs);
  }

  _logger.default.debug(`Additional native web tap offset computed: ${offset}`);

  return offset;
};

async function tapWebElementNatively(driver, atomsElement) {
  try {
    let text = await driver.executeAtom('get_text', [atomsElement]);

    if (!text) {
      text = await driver.executeAtom('get_attribute_value', [atomsElement, 'value']);
    }

    if (text) {
      const el = await driver.findNativeElementOrElements('accessibility id', text, false);
      const rect = await driver.proxyCommand(`/element/${el.ELEMENT}/rect`, 'GET');
      const coords = {
        x: Math.round(rect.x + rect.width / 2),
        y: Math.round(rect.y + rect.height / 2)
      };
      await driver.clickCoords(coords);
      return true;
    }
  } catch (err) {
    _logger.default.warn(`Error attempting to click: ${err.message}`);
  }

  return false;
}

extensions.nativeWebTap = async function (el) {
  const atomsElement = this.useAtomsElement(el);

  if (await tapWebElementNatively(this, atomsElement)) {
    return;
  }

  _logger.default.warn('Unable to do simple native web tap. Attempting to convert coordinates');

  await this.executeAtom('get_size', [atomsElement]);
  await this.executeAtom('get_top_left_coordinates', [atomsElement]);
  const {
    width,
    height
  } = await this.executeAtom('get_size', [atomsElement]);
  let {
    x,
    y
  } = await this.executeAtom('get_top_left_coordinates', [atomsElement]);
  x += width / 2;
  y += height / 2;
  this.curWebCoords = {
    x,
    y
  };
  await this.clickWebCoords();
};

extensions.clickCoords = async function (coords) {
  await this.performTouch([{
    action: 'tap',
    options: coords
  }]);
};

extensions.translateWebCoords = async function (coords) {
  _logger.default.debug(`Translating coordinates (${JSON.stringify(coords)}) to web coordinates`);

  const implicitWaitMs = this.implicitWaitMs;
  let webview;

  try {
    this.setImplicitWait(0);
    webview = await (0, _asyncbox.retryInterval)(5, 100, async () => {
      return await this.findNativeElementOrElements('-ios predicate string', `type = 'XCUIElementTypeWebView' AND visible = 1`, false);
    });
  } finally {
    this.setImplicitWait(implicitWaitMs);
  }

  webview = _appiumSupport.util.unwrapElement(webview);
  const rect = await this.proxyCommand(`/element/${webview}/rect`, 'GET');
  const wvPos = {
    x: rect.x,
    y: rect.y
  };
  const realDims = {
    w: rect.width,
    h: rect.height
  };
  const cmd = '(function () { return {w: document.documentElement.clientWidth, h: document.documentElement.clientHeight}; })()';
  const wvDims = await this.remote.execute(cmd);
  const urlBarHeight = 64;
  wvPos.y += urlBarHeight;
  const realDimensionHeight = 108;
  realDims.h -= realDimensionHeight;
  let yOffset = this.opts.curOrientation === 'LANDSCAPE' ? this.landscapeWebCoordsOffset : 0;
  yOffset += await this.getExtraNativeWebTapOffset();
  coords.y += await this.getExtraTranslateWebCoordsOffset(coords, rect);

  if (wvDims && realDims && wvPos) {
    let xRatio = realDims.w / wvDims.w;
    let yRatio = realDims.h / wvDims.h;
    let newCoords = {
      x: wvPos.x + Math.round(xRatio * coords.x),
      y: wvPos.y + yOffset + Math.round(yRatio * coords.y)
    };

    _logger.default.debug(`Converted coordinates: ${JSON.stringify(newCoords)}`);

    _logger.default.debug(`    rect: ${JSON.stringify(rect)}`);

    _logger.default.debug(`    wvPos: ${JSON.stringify(wvPos)}`);

    _logger.default.debug(`    realDims: ${JSON.stringify(realDims)}`);

    _logger.default.debug(`    wvDims: ${JSON.stringify(wvDims)}`);

    _logger.default.debug(`    xRatio: ${JSON.stringify(xRatio)}`);

    _logger.default.debug(`    yRatio: ${JSON.stringify(yRatio)}`);

    _logger.default.debug(`    yOffset: ${JSON.stringify(yOffset)}`);

    _logger.default.debug(`Converted web coords ${JSON.stringify(coords)} ` + `into real coords ${JSON.stringify(newCoords)}`);

    return newCoords;
  }
};

extensions.checkForAlert = async function () {
  return false;
};

extensions.waitForAtom = async function (promise) {
  const started = process.hrtime();

  try {
    return this.parseExecuteResponse((await _bluebird.default.resolve(promise).timeout(ATOM_WAIT_TIMEOUT)));
  } catch (err) {
    if (err instanceof _bluebird.default.TimeoutError) {
      throw new Error(`Did not get any response after ${process.hrtime(started)[0]}s`);
    }

    throw err;
  }
};

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy93ZWIuanMiXSwibmFtZXMiOlsiSVBIT05FX0VYVFJBX1dFQl9DT09SRF9TQ1JPTExfT0ZGU0VUIiwiSVBIT05FX0VYVFJBX1dFQl9DT09SRF9OT05fU0NST0xMX09GRlNFVCIsIklQSE9ORV9XRUJfQ09PUkRfT0ZGU0VUIiwiSVBIT05FX1dFQl9DT09SRF9TTUFSVF9BUFBfQkFOTkVSX09GRlNFVCIsIklQSE9ORV9YX0VYVFJBX1dFQl9DT09SRF9TQ1JPTExfT0ZGU0VUIiwiSVBIT05FX1hfRVhUUkFfV0VCX0NPT1JEX05PTl9TQ1JPTExfT0ZGU0VUIiwiSVBIT05FX1hfV0VCX0NPT1JEX09GRlNFVCIsIklQQURfRVhUUkFfV0VCX0NPT1JEX1NDUk9MTF9PRkZTRVQiLCJJUEFEX0VYVFJBX1dFQl9DT09SRF9OT05fU0NST0xMX09GRlNFVCIsIklQQURfV0VCX0NPT1JEX09GRlNFVCIsIklQQURfV0VCX0NPT1JEX1NNQVJUX0FQUF9CQU5ORVJfT0ZGU0VUIiwiSVBIT05FX1hfV0lEVEgiLCJJUEhPTkVfWF9IRUlHSFQiLCJBVE9NX1dBSVRfVElNRU9VVCIsImV4dGVuc2lvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJpb3NDb21tYW5kcyIsIndlYiIsImdldFNhZmFyaUlzSXBob25lIiwidXNlckFnZW50IiwiZXhlY3V0ZSIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJlcnIiLCJsb2ciLCJ3YXJuIiwiZGVidWciLCJtZXNzYWdlIiwiZ2V0U2FmYXJpSXNJcGhvbmVYIiwic2NyaXB0IiwiaGVpZ2h0Iiwid2lkdGgiLCJnZXRFbGVtZW50SGVpZ2h0TWVtb2l6ZWQiLCJfIiwibWVtb2l6ZSIsImtleSIsImRyaXZlciIsImVsIiwidXRpbCIsInVud3JhcEVsZW1lbnQiLCJnZXROYXRpdmVSZWN0IiwiZ2V0RXh0cmFUcmFuc2xhdGVXZWJDb29yZHNPZmZzZXQiLCJjb29yZHMiLCJ3ZWJ2aWV3UmVjdCIsIm9mZnNldCIsImltcGxpY2l0V2FpdE1zIiwiaXNJcGhvbmUiLCJpc0lwaG9uZVgiLCJzZXRJbXBsaWNpdFdhaXQiLCJmaW5kTmF0aXZlRWxlbWVudE9yRWxlbWVudHMiLCJpZ24iLCJ5IiwiZ2V0RXh0cmFOYXRpdmVXZWJUYXBPZmZzZXQiLCJ0YXBXZWJFbGVtZW50TmF0aXZlbHkiLCJhdG9tc0VsZW1lbnQiLCJ0ZXh0IiwiZXhlY3V0ZUF0b20iLCJyZWN0IiwicHJveHlDb21tYW5kIiwiRUxFTUVOVCIsIngiLCJNYXRoIiwicm91bmQiLCJjbGlja0Nvb3JkcyIsIm5hdGl2ZVdlYlRhcCIsInVzZUF0b21zRWxlbWVudCIsImN1cldlYkNvb3JkcyIsImNsaWNrV2ViQ29vcmRzIiwicGVyZm9ybVRvdWNoIiwiYWN0aW9uIiwib3B0aW9ucyIsInRyYW5zbGF0ZVdlYkNvb3JkcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJ3ZWJ2aWV3Iiwid3ZQb3MiLCJyZWFsRGltcyIsInciLCJoIiwiY21kIiwid3ZEaW1zIiwicmVtb3RlIiwidXJsQmFySGVpZ2h0IiwicmVhbERpbWVuc2lvbkhlaWdodCIsInlPZmZzZXQiLCJvcHRzIiwiY3VyT3JpZW50YXRpb24iLCJsYW5kc2NhcGVXZWJDb29yZHNPZmZzZXQiLCJ4UmF0aW8iLCJ5UmF0aW8iLCJuZXdDb29yZHMiLCJjaGVja0ZvckFsZXJ0Iiwid2FpdEZvckF0b20iLCJwcm9taXNlIiwic3RhcnRlZCIsInByb2Nlc3MiLCJocnRpbWUiLCJwYXJzZUV4ZWN1dGVSZXNwb25zZSIsIkIiLCJyZXNvbHZlIiwidGltZW91dCIsIlRpbWVvdXRFcnJvciIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLG9DQUFvQyxHQUFHLENBQUMsRUFBOUM7QUFDQSxNQUFNQyx3Q0FBd0MsR0FBRyxFQUFqRDtBQUNBLE1BQU1DLHVCQUF1QixHQUFHLENBQUMsRUFBakM7QUFDQSxNQUFNQyx3Q0FBd0MsR0FBRyxFQUFqRDtBQUNBLE1B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NUQsb0JBQUlFLEtBQUosQ0FBVyx3QkFBdUI4QyxJQUFJLENBQUNDLFNBQUwsQ0FBZS9CLE1BQWYsQ0FBdUIsR0FBL0MsR0FDQyxvQkFBbUI4QixJQUFJLENBQUNDLFNBQUwsQ0FBZWlCLFNBQWYsQ0FBMEIsRUFEeEQ7O0FBRUEsV0FBT0EsU0FBUDtBQUNEO0FBQ0YsQ0E1REQ7O0FBOERBN0UsVUFBVSxDQUFDOEUsYUFBWCxHQUEyQixrQkFBa0I7QUFDM0MsU0FBTyxLQUFQO0FBQ0QsQ0FGRDs7QUFJQTlFLFVBQVUsQ0FBQytFLFdBQVgsR0FBeUIsZ0JBQWdCQyxPQUFoQixFQUF5QjtBQUNoRCxRQUFNQyxPQUFPLEdBQUdDLE9BQU8sQ0FBQ0MsTUFBUixFQUFoQjs7QUFDQSxNQUFJO0FBQ0YsV0FBTyxLQUFLQyxvQkFBTCxFQUEwQixNQUFNQyxrQkFBRUMsT0FBRixDQUFVTixPQUFWLEVBQ3BDTyxPQURvQyxDQUM1QnhGLGlCQUQ0QixDQUFoQyxFQUFQO0FBRUQsR0FIRCxDQUdFLE9BQU9XLEdBQVAsRUFBWTtBQUNaLFFBQUlBLEdBQUcsWUFBWTJFLGtCQUFFRyxZQUFyQixFQUFtQztBQUNqQyxZQUFNLElBQUlDLEtBQUosQ0FBVyxrQ0FBaUNQLE9BQU8sQ0FBQ0MsTUFBUixDQUFlRixPQUFmLEVBQXdCLENBQXhCLENBQTJCLEdBQXZFLENBQU47QUFDRDs7QUFDRCxVQUFNdkUsR0FBTjtBQUNEO0FBQ0YsQ0FYRDs7ZUFhZVYsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlvc0NvbW1hbmRzIH0gZnJvbSAnYXBwaXVtLWlvcy1kcml2ZXInO1xuaW1wb3J0IHsgcmV0cnlJbnRlcnZhbCB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCB7IHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuXG5cbmNvbnN0IElQSE9ORV9FWFRSQV9XRUJfQ09PUkRfU0NST0xMX09GRlNFVCA9IC0xNTtcbmNvbnN0IElQSE9ORV9FWFRSQV9XRUJfQ09PUkRfTk9OX1NDUk9MTF9PRkZTRVQgPSAxMDtcbmNvbnN0IElQSE9ORV9XRUJfQ09PUkRfT0ZGU0VUID0gLTEwO1xuY29uc3QgSVBIT05FX1dFQl9DT09SRF9TTUFSVF9BUFBfQkFOTkVSX09GRlNFVCA9IDg0O1xuY29uc3QgSVBIT05FX1hfRVhUUkFfV0VCX0NPT1JEX1NDUk9MTF9PRkZTRVQgPSAtOTA7XG5jb25zdCBJUEhPTkVfWF9FWFRSQV9XRUJfQ09PUkRfTk9OX1NDUk9MTF9PRkZTRVQgPSAtMTA7XG5jb25zdCBJUEhPTkVfWF9XRUJfQ09PUkRfT0ZGU0VUID0gNDA7XG5jb25zdCBJUEFEX0VYVFJBX1dFQl9DT09SRF9TQ1JPTExfT0ZGU0VUID0gLTEwO1xuY29uc3QgSVBBRF9FWFRSQV9XRUJfQ09PUkRfTk9OX1NDUk9MTF9PRkZTRVQgPSAwO1xuY29uc3QgSVBBRF9XRUJfQ09PUkRfT0ZGU0VUID0gMTA7XG5jb25zdCBJUEFEX1dFQl9DT09SRF9TTUFSVF9BUFBfQkFOTkVSX09GRlNFVCA9IDk1O1xuXG5jb25zdCBJUEhPTkVfWF9XSURUSCA9IDM3NTtcbmNvbnN0IElQSE9ORV9YX0hFSUdIVCA9IDgxMjtcblxuY29uc3QgQVRPTV9XQUlUX1RJTUVPVVQgPSA1ICogNjAwMDA7XG5cbmxldCBleHRlbnNpb25zID0ge307XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgaW9zQ29tbWFuZHMud2ViKTtcblxuXG5cbmV4dGVuc2lvbnMuZ2V0U2FmYXJpSXNJcGhvbmUgPSBhc3luYyBmdW5jdGlvbiBnZXRTYWZhcmlJc0lwaG9uZSAoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXNlckFnZW50ID0gYXdhaXQgdGhpcy5leGVjdXRlKCdyZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudCcpO1xuICAgIHJldHVybiB1c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnaXBob25lJyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy53YXJuKGBVbmFibGUgdG8gZmluZCBkZXZpY2UgdHlwZSBmcm9tIHVzZXJhZ2VudC4gQXNzdW1pbmcgaVBob25lYCk7XG4gICAgbG9nLmRlYnVnKGBFcnJvcjogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmV4dGVuc2lvbnMuZ2V0U2FmYXJpSXNJcGhvbmVYID0gYXN5bmMgZnVuY3Rpb24gZ2V0U2FmYXJpSXNJcGhvbmUgKCkge1xuICB0cnkge1xuICAgIGNvbnN0IHNjcmlwdCA9ICdyZXR1cm4ge2hlaWdodDogd2luZG93LnNjcmVlbi5hdmFpbEhlaWdodCwgd2lkdGg6IHdpbmRvdy5zY3JlZW4uYXZhaWxXaWR0aH07JztcbiAgICBjb25zdCB7aGVpZ2h0LCB3aWR0aH0gPSBhd2FpdCB0aGlzLmV4ZWN1dGUoc2NyaXB0KTtcbiAgICAvLyBjaGVjayBmb3IgdGhlIGNvcnJlY3QgaGVpZ2h0IGFuZCB3aWR0aFxuICAgIHJldHVybiAoaGVpZ2h0ID09PSBJUEhPTkVfWF9IRUlHSFQgJiYgd2lkdGggPT09IElQSE9ORV9YX1dJRFRIKSB8fFxuICAgICAgICAgICAoaGVpZ2h0ID09PSBJUEhPTkVfWF9XSURUSCAmJiB3aWR0aCA9PT0gSVBIT05FX1hfSEVJR0hUKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLndhcm4oYFVuYWJsZSB0byBmaW5kIGRldmljZSB0eXBlIGZyb20gdXNlcmFnZW50LiBBc3N1bWluZyBub3QgaVBob25lIFhgKTtcbiAgICBsb2cuZGVidWcoYEVycm9yOiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmNvbnN0IGdldEVsZW1lbnRIZWlnaHRNZW1vaXplZCA9IF8ubWVtb2l6ZShhc3luYyBmdW5jdGlvbiAoa2V5LCBkcml2ZXIsIGVsKSB7XG4gIGVsID0gdXRpbC51bndyYXBFbGVtZW50KGVsKTtcbiAgcmV0dXJuIChhd2FpdCBkcml2ZXIuZ2V0TmF0aXZlUmVjdChlbCkpLmhlaWdodDtcbn0pO1xuXG5leHRlbnNpb25zLmdldEV4dHJhVHJhbnNsYXRlV2ViQ29vcmRzT2Zmc2V0ID0gYXN5bmMgZnVuY3Rpb24gKGNvb3Jkcywgd2Vidmlld1JlY3QpIHtcbiAgbGV0IG9mZnNldCA9IDA7XG5cbiAgLy8ga2VlcCB0cmFjayBvZiBpbXBsaWNpdCB3YWl0LCBhbmQgc2V0IGxvY2FsbHkgdG8gMFxuICBjb25zdCBpbXBsaWNpdFdhaXRNcyA9IHRoaXMuaW1wbGljaXRXYWl0TXM7XG5cbiAgY29uc3QgaXNJcGhvbmUgPSBhd2FpdCB0aGlzLmdldFNhZmFyaUlzSXBob25lKCk7XG4gIGNvbnN0IGlzSXBob25lWCA9IGlzSXBob25lICYmIGF3YWl0IHRoaXMuZ2V0U2FmYXJpSXNJcGhvbmVYKCk7XG5cbiAgdHJ5IHtcbiAgICB0aGlzLnNldEltcGxpY2l0V2FpdCgwKTtcblxuICAgIC8vIGNoZWNrIGlmIHRoZSBmdWxsIHVybCBiYXIgaXMgdXBcbiAgICBhd2FpdCB0aGlzLmZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cygnYWNjZXNzaWJpbGl0eSBpZCcsICdSZWxvYWRCdXR0b24nLCBmYWxzZSk7XG5cbiAgICAvLyByZWxvYWQgYnV0dG9uIGZvdW5kLCB3aGljaCBtZWFucyBzY3JvbGxpbmcgaGFzIG5vdCBoYXBwZW5lZFxuICAgIGlmIChpc0lwaG9uZVgpIHtcbiAgICAgIG9mZnNldCArPSBJUEhPTkVfWF9FWFRSQV9XRUJfQ09PUkRfTk9OX1NDUk9MTF9PRkZTRVQ7XG4gICAgfSBlbHNlIGlmIChpc0lwaG9uZSkge1xuICAgICAgb2Zmc2V0ICs9IElQSE9ORV9FWFRSQV9XRUJfQ09PUkRfTk9OX1NDUk9MTF9PRkZTRVQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9mZnNldCArPSBJUEFEX0VYVFJBX1dFQl9DT09SRF9OT05fU0NST0xMX09GRlNFVDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIG5vIHJlbG9hZCBidXR0b24sIHdoaWNoIGluZGljYXRlcyBzY3JvbGxpbmcgaGFzIGhhcHBlbmVkXG4gICAgLy8gdGhlIFVSTCBiYXIgbWF5IG9yIG1heSBub3QgYmUgdmlzaWJsZVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBlbCA9IGF3YWl0IHRoaXMuZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzKCdhY2Nlc3NpYmlsaXR5IGlkJywgJ1VSTCcsIGZhbHNlKTtcbiAgICAgIG9mZnNldCAtPSBhd2FpdCBnZXRFbGVtZW50SGVpZ2h0TWVtb2l6ZWQoJ1VSTEJhcicsIHRoaXMsIGVsKTtcbiAgICB9IGNhdGNoIChpZ24pIHtcbiAgICAgIC8vIG5vIFVSTCBlbGVtZW50cyBmb3VuZCwgc28gY29udGludWVcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgLy8gcmV0dXJuIGltcGxpY2l0IHdhaXQgdG8gd2hhdCBpdCB3YXNcbiAgICB0aGlzLnNldEltcGxpY2l0V2FpdChpbXBsaWNpdFdhaXRNcyk7XG4gIH1cblxuICBpZiAoY29vcmRzLnkgPiB3ZWJ2aWV3UmVjdC5oZWlnaHQpIHtcbiAgICAvLyB3aGVuIHNjcm9sbGluZyBoYXMgaGFwcGVuZWQsIHRoZXJlIGlzIGEgdGljayBtb3JlIG9mZnNldCBuZWVkZWRcbiAgICBpZiAoaXNJcGhvbmVYKSB7XG4gICAgICBvZmZzZXQgKz0gSVBIT05FX1hfRVhUUkFfV0VCX0NPT1JEX1NDUk9MTF9PRkZTRVQ7XG4gICAgfSBlbHNlIGlmIChpc0lwaG9uZSkge1xuICAgICAgb2Zmc2V0ICs9IElQSE9ORV9FWFRSQV9XRUJfQ09PUkRfU0NST0xMX09GRlNFVDtcbiAgICB9IGVsc2Uge1xuICAgICAgb2Zmc2V0ICs9IElQQURfRVhUUkFfV0VCX0NPT1JEX1NDUk9MTF9PRkZTRVQ7XG4gICAgfVxuICB9XG5cbiAgLy8gZXh0cmEgb2Zmc2V0IG5lY2Vzc2FyeVxuICBvZmZzZXQgKz0gaXNJcGhvbmUgPyBJUEhPTkVfV0VCX0NPT1JEX09GRlNFVCA6IElQQURfV0VCX0NPT1JEX09GRlNFVDtcblxuICBvZmZzZXQgKz0gaXNJcGhvbmVYID8gSVBIT05FX1hfV0VCX0NPT1JEX09GRlNFVCA6IDA7XG5cbiAgbG9nLmRlYnVnKGBFeHRyYSB0cmFuc2xhdGVkIHdlYiBjb29yZGluYXRlcyBvZmZzZXQ6ICR7b2Zmc2V0fWApO1xuICByZXR1cm4gb2Zmc2V0O1xufTtcblxuZXh0ZW5zaW9ucy5nZXRFeHRyYU5hdGl2ZVdlYlRhcE9mZnNldCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgbGV0IG9mZnNldCA9IDA7XG5cbiAgLy8ga2VlcCB0cmFjayBvZiBpbXBsaWNpdCB3YWl0LCBhbmQgc2V0IGxvY2FsbHkgdG8gMFxuICBjb25zdCBpbXBsaWNpdFdhaXRNcyA9IHRoaXMuaW1wbGljaXRXYWl0TXM7XG4gIHRyeSB7XG4gICAgdGhpcy5zZXRJbXBsaWNpdFdhaXQoMCk7XG5cbiAgICAvLyBmaXJzdCB0cnkgdG8gZ2V0IHRhYiBvZmZzZXRcbiAgICB0cnkge1xuICAgICAgY29uc3QgZWwgPSBhd2FpdCB0aGlzLmZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cygnLWlvcyBwcmVkaWNhdGUgc3RyaW5nJywgYG5hbWUgTElLRSAnKiwgVGFiJyBBTkQgdmlzaWJsZSA9IDFgLCBmYWxzZSk7XG4gICAgICBvZmZzZXQgKz0gYXdhaXQgZ2V0RWxlbWVudEhlaWdodE1lbW9pemVkKCdUYWJCYXInLCB0aGlzLCBlbCk7XG4gICAgfSBjYXRjaCAoaWduKSB7XG4gICAgICAvLyBubyBlbGVtZW50IGZvdW5kLCBzbyBubyB0YWJzIGFuZCBubyBuZWVkIHRvIGRlYWwgd2l0aCBvZmZzZXRcbiAgICB9XG5cbiAgICAvLyBuZXh0IHRyeSB0byBzZWUgaWYgdGhlcmUgaXMgYW4gU21hcnQgQXBwIEJhbm5lclxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cygnYWNjZXNzaWJpbGl0eSBpZCcsICdDbG9zZSBhcHAgZG93bmxvYWQgb2ZmZXInLCBmYWxzZSk7XG4gICAgICBvZmZzZXQgKz0gYXdhaXQgdGhpcy5nZXRTYWZhcmlJc0lwaG9uZSgpID9cbiAgICAgICAgSVBIT05FX1dFQl9DT09SRF9TTUFSVF9BUFBfQkFOTkVSX09GRlNFVCA6XG4gICAgICAgIElQQURfV0VCX0NPT1JEX1NNQVJUX0FQUF9CQU5ORVJfT0ZGU0VUO1xuICAgIH0gY2F0Y2ggKGlnbikge1xuICAgICAgLy8gbm8gc21hcnQgYXBwIGJhbm5lciBmb3VuZCwgc28gY29udGludWVcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgLy8gcmV0dXJuIGltcGxpY2l0IHdhaXQgdG8gd2hhdCBpdCB3YXNcbiAgICB0aGlzLnNldEltcGxpY2l0V2FpdChpbXBsaWNpdFdhaXRNcyk7XG4gIH1cblxuICBsb2cuZGVidWcoYEFkZGl0aW9uYWwgbmF0aXZlIHdlYiB0YXAgb2Zmc2V0IGNvbXB1dGVkOiAke29mZnNldH1gKTtcbiAgcmV0dXJuIG9mZnNldDtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIHRhcFdlYkVsZW1lbnROYXRpdmVseSAoZHJpdmVyLCBhdG9tc0VsZW1lbnQpIHtcbiAgLy8gdHJ5IHRvIGdldCB0aGUgdGV4dCBvZiB0aGUgZWxlbWVudCwgd2hpY2ggd2lsbCBiZSBhY2Nlc3NpYmxlIGluIHRoZVxuICAvLyBuYXRpdmUgY29udGV4dFxuICB0cnkge1xuICAgIGxldCB0ZXh0ID0gYXdhaXQgZHJpdmVyLmV4ZWN1dGVBdG9tKCdnZXRfdGV4dCcsIFthdG9tc0VsZW1lbnRdKTtcbiAgICBpZiAoIXRleHQpIHtcbiAgICAgIHRleHQgPSBhd2FpdCBkcml2ZXIuZXhlY3V0ZUF0b20oJ2dldF9hdHRyaWJ1dGVfdmFsdWUnLCBbYXRvbXNFbGVtZW50LCAndmFsdWUnXSk7XG4gICAgfVxuXG4gICAgaWYgKHRleHQpIHtcbiAgICAgIGNvbnN0IGVsID0gYXdhaXQgZHJpdmVyLmZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cygnYWNjZXNzaWJpbGl0eSBpZCcsIHRleHQsIGZhbHNlKTtcbiAgICAgIC8vIHVzZSB0YXAgYmVjYXVzZSBvbiBpT1MgMTEuMiBhbmQgYmVsb3cgYG5hdGl2ZUNsaWNrYCBjcmFzaGVzIFdEQVxuICAgICAgY29uc3QgcmVjdCA9IGF3YWl0IGRyaXZlci5wcm94eUNvbW1hbmQoYC9lbGVtZW50LyR7ZWwuRUxFTUVOVH0vcmVjdGAsICdHRVQnKTtcbiAgICAgIGNvbnN0IGNvb3JkcyA9IHtcbiAgICAgICAgeDogTWF0aC5yb3VuZChyZWN0LnggKyByZWN0LndpZHRoIC8gMiksXG4gICAgICAgIHk6IE1hdGgucm91bmQocmVjdC55ICsgcmVjdC5oZWlnaHQgLyAyKSxcbiAgICAgIH07XG4gICAgICBhd2FpdCBkcml2ZXIuY2xpY2tDb29yZHMoY29vcmRzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gYW55IGZhaWx1cmUgc2hvdWxkIGZhbGwgdGhyb3VnaCBhbmQgdHJpZ2dlciB0aGUgbW9yZSBlbGFib3JhdGVcbiAgICAvLyBtZXRob2Qgb2YgY2xpY2tpbmdcbiAgICBsb2cud2FybihgRXJyb3IgYXR0ZW1wdGluZyB0byBjbGljazogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4dGVuc2lvbnMubmF0aXZlV2ViVGFwID0gYXN5bmMgZnVuY3Rpb24gKGVsKSB7XG4gIGNvbnN0IGF0b21zRWxlbWVudCA9IHRoaXMudXNlQXRvbXNFbGVtZW50KGVsKTtcblxuICBpZiAoYXdhaXQgdGFwV2ViRWxlbWVudE5hdGl2ZWx5KHRoaXMsIGF0b21zRWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbG9nLndhcm4oJ1VuYWJsZSB0byBkbyBzaW1wbGUgbmF0aXZlIHdlYiB0YXAuIEF0dGVtcHRpbmcgdG8gY29udmVydCBjb29yZGluYXRlcycpO1xuXG4gIC8vIGBnZXRfdG9wX2xlZnRfY29vcmRpbmF0ZXNgIHJldHVybnMgdGhlIHdyb25nIHZhbHVlIHNvbWV0aW1lcyxcbiAgLy8gdW5sZXNzIHdlIHByZS1jYWxsIGJvdGggb2YgdGhlc2UgZnVuY3Rpb25zIGJlZm9yZSB0aGUgYWN0dWFsIGNhbGxzXG4gIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2dldF9zaXplJywgW2F0b21zRWxlbWVudF0pO1xuICBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdnZXRfdG9wX2xlZnRfY29vcmRpbmF0ZXMnLCBbYXRvbXNFbGVtZW50XSk7XG5cbiAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gYXdhaXQgdGhpcy5leGVjdXRlQXRvbSgnZ2V0X3NpemUnLCBbYXRvbXNFbGVtZW50XSk7XG4gIGxldCB7eCwgeX0gPSBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdnZXRfdG9wX2xlZnRfY29vcmRpbmF0ZXMnLCBbYXRvbXNFbGVtZW50XSk7XG4gIHggKz0gd2lkdGggLyAyO1xuICB5ICs9IGhlaWdodCAvIDI7XG5cbiAgdGhpcy5jdXJXZWJDb29yZHMgPSB7eCwgeX07XG4gIGF3YWl0IHRoaXMuY2xpY2tXZWJDb29yZHMoKTtcbn07XG5cbmV4dGVuc2lvbnMuY2xpY2tDb29yZHMgPSBhc3luYyBmdW5jdGlvbiAoY29vcmRzKSB7XG4gIGF3YWl0IHRoaXMucGVyZm9ybVRvdWNoKFtcbiAgICB7XG4gICAgICBhY3Rpb246ICd0YXAnLFxuICAgICAgb3B0aW9uczogY29vcmRzLFxuICAgIH0sXG4gIF0pO1xufTtcblxuZXh0ZW5zaW9ucy50cmFuc2xhdGVXZWJDb29yZHMgPSBhc3luYyBmdW5jdGlvbiAoY29vcmRzKSB7XG4gIGxvZy5kZWJ1ZyhgVHJhbnNsYXRpbmcgY29vcmRpbmF0ZXMgKCR7SlNPTi5zdHJpbmdpZnkoY29vcmRzKX0pIHRvIHdlYiBjb29yZGluYXRlc2ApO1xuXG4gIC8vIGFic29sdXRpemUgd2ViIGNvb3Jkc1xuICBjb25zdCBpbXBsaWNpdFdhaXRNcyA9IHRoaXMuaW1wbGljaXRXYWl0TXM7XG4gIGxldCB3ZWJ2aWV3O1xuICB0cnkge1xuICAgIHRoaXMuc2V0SW1wbGljaXRXYWl0KDApO1xuICAgIHdlYnZpZXcgPSBhd2FpdCByZXRyeUludGVydmFsKDUsIDEwMCwgYXN5bmMgKCkgPT4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzKCctaW9zIHByZWRpY2F0ZSBzdHJpbmcnLCBgdHlwZSA9ICdYQ1VJRWxlbWVudFR5cGVXZWJWaWV3JyBBTkQgdmlzaWJsZSA9IDFgLCBmYWxzZSk7XG4gICAgfSk7XG4gIH0gZmluYWxseSB7XG4gICAgdGhpcy5zZXRJbXBsaWNpdFdhaXQoaW1wbGljaXRXYWl0TXMpO1xuICB9XG5cbiAgd2VidmlldyA9IHV0aWwudW53cmFwRWxlbWVudCh3ZWJ2aWV3KTtcbiAgY29uc3QgcmVjdCA9IGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvZWxlbWVudC8ke3dlYnZpZXd9L3JlY3RgLCAnR0VUJyk7XG4gIGNvbnN0IHd2UG9zID0ge3g6IHJlY3QueCwgeTogcmVjdC55fTtcbiAgY29uc3QgcmVhbERpbXMgPSB7dzogcmVjdC53aWR0aCwgaDogcmVjdC5oZWlnaHR9O1xuXG4gIGNvbnN0IGNtZCA9ICcoZnVuY3Rpb24gKCkgeyByZXR1cm4ge3c6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgaDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodH07IH0pKCknO1xuICBjb25zdCB3dkRpbXMgPSBhd2FpdCB0aGlzLnJlbW90ZS5leGVjdXRlKGNtZCk7XG5cbiAgLy8gVE9ETzogaW52ZXN0aWdhdGUgd2hlcmUgdGhlc2UgY29tZSBmcm9tLiBUaGV5IGFwcGVhciB0byBiZSBjb25zdGFudHMgaW4gbXkgdGVzdHNcbiAgY29uc3QgdXJsQmFySGVpZ2h0ID0gNjQ7XG4gIHd2UG9zLnkgKz0gdXJsQmFySGVpZ2h0O1xuXG4gIGNvbnN0IHJlYWxEaW1lbnNpb25IZWlnaHQgPSAxMDg7XG4gIHJlYWxEaW1zLmggLT0gcmVhbERpbWVuc2lvbkhlaWdodDtcblxuICAvLyBhZGQgc3RhdGljIG9mZnNldCBmb3Igc2FmYXJpIGluIGxhbmRzY2FwZSBtb2RlXG4gIGxldCB5T2Zmc2V0ID0gdGhpcy5vcHRzLmN1ck9yaWVudGF0aW9uID09PSAnTEFORFNDQVBFJyA/IHRoaXMubGFuZHNjYXBlV2ViQ29vcmRzT2Zmc2V0IDogMDtcblxuICAvLyBhZGQgZXh0cmEgb2Zmc2V0IGZvciBwb3NzaWJsZSBleHRyYSB0aGluZ3MgaW4gdGhlIHRvcCBvZiB0aGUgcGFnZVxuICB5T2Zmc2V0ICs9IGF3YWl0IHRoaXMuZ2V0RXh0cmFOYXRpdmVXZWJUYXBPZmZzZXQoKTtcbiAgY29vcmRzLnkgKz0gYXdhaXQgdGhpcy5nZXRFeHRyYVRyYW5zbGF0ZVdlYkNvb3Jkc09mZnNldChjb29yZHMsIHJlY3QpO1xuXG4gIGlmICh3dkRpbXMgJiYgcmVhbERpbXMgJiYgd3ZQb3MpIHtcbiAgICBsZXQgeFJhdGlvID0gcmVhbERpbXMudyAvIHd2RGltcy53O1xuICAgIGxldCB5UmF0aW8gPSByZWFsRGltcy5oIC8gd3ZEaW1zLmg7XG4gICAgbGV0IG5ld0Nvb3JkcyA9IHtcbiAgICAgIHg6IHd2UG9zLnggKyBNYXRoLnJvdW5kKHhSYXRpbyAqIGNvb3Jkcy54KSxcbiAgICAgIHk6IHd2UG9zLnkgKyB5T2Zmc2V0ICsgTWF0aC5yb3VuZCh5UmF0aW8gKiBjb29yZHMueSksXG4gICAgfTtcblxuICAgIC8vIGFkZGl0aW9uYWwgbG9nZ2luZyBmb3IgY29vcmRpbmF0ZXMsIHNpbmNlIGl0IGlzIHNvbWV0aW1lcyBicm9rZW5cbiAgICAvLyAgIHNlZSBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL2FwcGl1bS9pc3N1ZXMvOTE1OVxuICAgIGxvZy5kZWJ1ZyhgQ29udmVydGVkIGNvb3JkaW5hdGVzOiAke0pTT04uc3RyaW5naWZ5KG5ld0Nvb3Jkcyl9YCk7XG4gICAgbG9nLmRlYnVnKGAgICAgcmVjdDogJHtKU09OLnN0cmluZ2lmeShyZWN0KX1gKTtcbiAgICBsb2cuZGVidWcoYCAgICB3dlBvczogJHtKU09OLnN0cmluZ2lmeSh3dlBvcyl9YCk7XG4gICAgbG9nLmRlYnVnKGAgICAgcmVhbERpbXM6ICR7SlNPTi5zdHJpbmdpZnkocmVhbERpbXMpfWApO1xuICAgIGxvZy5kZWJ1ZyhgICAgIHd2RGltczogJHtKU09OLnN0cmluZ2lmeSh3dkRpbXMpfWApO1xuICAgIGxvZy5kZWJ1ZyhgICAgIHhSYXRpbzogJHtKU09OLnN0cmluZ2lmeSh4UmF0aW8pfWApO1xuICAgIGxvZy5kZWJ1ZyhgICAgIHlSYXRpbzogJHtKU09OLnN0cmluZ2lmeSh5UmF0aW8pfWApO1xuICAgIGxvZy5kZWJ1ZyhgICAgIHlPZmZzZXQ6ICR7SlNPTi5zdHJpbmdpZnkoeU9mZnNldCl9YCk7XG5cbiAgICBsb2cuZGVidWcoYENvbnZlcnRlZCB3ZWIgY29vcmRzICR7SlNPTi5zdHJpbmdpZnkoY29vcmRzKX0gYCArXG4gICAgICAgICAgICAgIGBpbnRvIHJlYWwgY29vcmRzICR7SlNPTi5zdHJpbmdpZnkobmV3Q29vcmRzKX1gKTtcbiAgICByZXR1cm4gbmV3Q29vcmRzO1xuICB9XG59O1xuXG5leHRlbnNpb25zLmNoZWNrRm9yQWxlcnQgPSBhc3luYyBmdW5jdGlvbiAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5leHRlbnNpb25zLndhaXRGb3JBdG9tID0gYXN5bmMgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgY29uc3Qgc3RhcnRlZCA9IHByb2Nlc3MuaHJ0aW1lKCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VFeGVjdXRlUmVzcG9uc2UoYXdhaXQgQi5yZXNvbHZlKHByb21pc2UpXG4gICAgICAudGltZW91dChBVE9NX1dBSVRfVElNRU9VVCkpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAoZXJyIGluc3RhbmNlb2YgQi5UaW1lb3V0RXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRGlkIG5vdCBnZXQgYW55IHJlc3BvbnNlIGFmdGVyICR7cHJvY2Vzcy5ocnRpbWUoc3RhcnRlZClbMF19c2ApO1xuICAgIH1cbiAgICB0aHJvdyBlcnI7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy93ZWIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
