"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateProjectFile = updateProjectFile;
exports.resetProjectFile = resetProjectFile;
exports.checkForDependencies = checkForDependencies;
exports.setRealDeviceSecurity = setRealDeviceSecurity;
exports.fixForXcode7 = fixForXcode7;
exports.fixForXcode9 = fixForXcode9;
exports.generateXcodeConfigFile = generateXcodeConfigFile;
exports.setXctestrunFile = setXctestrunFile;
exports.killProcess = killProcess;
exports.randomInt = randomInt;
exports.getWDAUpgradeTimestamp = getWDAUpgradeTimestamp;
exports.WDA_RUNNER_BUNDLE_ID = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

const WDA_RUNNER_BUNDLE_ID = 'com.facebook.WebDriverAgentRunner';
exports.WDA_RUNNER_BUNDLE_ID = WDA_RUNNER_BUNDLE_ID;
const PROJECT_FILE = 'project.pbxproj';
const XCUICOORDINATE_FILE = 'PrivateHeaders/XCTest/XCUICoordinate.h';
const FBMACROS_FILE = 'WebDriverAgentLib/Utilities/FBMacros.h';
const XCUIAPPLICATION_FILE = 'PrivateHeaders/XCTest/XCUIApplication.h';
const FBSESSION_FILE = 'WebDriverAgentLib/Routing/FBSession.m';
const CARTHAGE_ROOT = 'Carthage';

async function replaceInFile(file, find, replace) {
  let contents = await _appiumSupport.fs.readFile(file, 'utf8');
  let newContents = contents.replace(find, replace);

  if (newContents !== contents) {
    await _appiumSupport.fs.writeFile(file, newContents, 'utf8');
  }
}

async function updateProjectFile(agentPath, newBundleId) {
  let projectFilePath = `${agentPath}/${PROJECT_FILE}`;

  try {
    await _appiumSupport.fs.copyFile(projectFilePath, `${projectFilePath}.old`);
    await replaceInFile(projectFilePath, new RegExp(WDA_RUNNER_BUNDLE_ID.replace('.', '\.'), 'g'), newBundleId);

    _logger.default.debug(`Successfully updated '${projectFilePath}' with bundle id '${newBundleId}'`);
  } catch (err) {
    _logger.default.debug(`Error updating project file: ${err.message}`);

    _logger.default.warn(`Unable to update project file '${projectFilePath}' with ` + `bundle id '${newBundleId}'. WebDriverAgent may not start`);
  }
}

async function resetProjectFile(agentPath) {
  let projectFilePath = `${agentPath}/${PROJECT_FILE}`;

  try {
    if (!(await _appiumSupport.fs.exists(`${projectFilePath}.old`))) {
      return;
    }

    await _appiumSupport.fs.mv(`${projectFilePath}.old`, projectFilePath);

    _logger.default.debug(`Successfully reset '${projectFilePath}' with bundle id '${WDA_RUNNER_BUNDLE_ID}'`);
  } catch (err) {
    _logger.default.debug(`Error resetting project file: ${err.message}`);

    _logger.default.warn(`Unable to reset project file '${projectFilePath}' with ` + `bundle id '${WDA_RUNNER_BUNDLE_ID}'. WebDriverAgent has been ` + `modified and not returned to the original state.`);
  }
}

async function checkForDependencies(bootstrapPath, useSsl = false) {
  try {
    let carthagePath = await _appiumSupport.fs.which('carthage');

    _logger.default.debug(`Carthage found: '${carthagePath}'`);
  } catch (err) {
    _logger.default.errorAndThrow('Carthage binary is not found. Install using `brew install carthage` if it is not installed ' + 'and make sure the root folder, where carthage binary is installed, is present in PATH environment variable. ' + `The current PATH value: '${process.env.PATH ? process.env.PATH : "<not defined for the Appium process>"}'`);
  }

  const carthageRoot = _path.default.resolve(bootstrapPath, CARTHAGE_ROOT);

  let areDependenciesUpdated = false;

  if (!(await _appiumSupport.fs.hasAccess(carthageRoot))) {
    _logger.default.debug('Running WebDriverAgent bootstrap script to install dependencies');

    try {
      let args = useSsl ? ['-d', '-D'] : ['-d'];
      await (0, _teen_process.exec)('Scripts/bootstrap.sh', args, {
        cwd: bootstrapPath
      });
      areDependenciesUpdated = true;
    } catch (err) {
      for (let std of ['stdout', 'stderr']) {
        for (let line of (err[std] || '').split('\n')) {
          if (!line.length) {
            continue;
          }

          _logger.default.error(line);
        }
      }

      await _appiumSupport.fs.rimraf(carthageRoot);
      throw err;
    }
  }

  if (!(await _appiumSupport.fs.hasAccess(`${bootstrapPath}/Resources`))) {
    _logger.default.debug('Creating WebDriverAgent resources directory');

    await _appiumSupport.fs.mkdir(`${bootstrapPath}/Resources`);
    areDependenciesUpdated = true;
  }

  if (!(await _appiumSupport.fs.hasAccess(`${bootstrapPath}/Resources/WebDriverAgent.bundle`))) {
    _logger.default.debug('Creating WebDriverAgent resource bundle directory');

    await _appiumSupport.fs.mkdir(`${bootstrapPath}/Resources/WebDriverAgent.bundle`);
    areDependenciesUpdated = true;
  }

  return areDependenciesUpdated;
}

async function setRealDeviceSecurity(keychainPath, keychainPassword) {
  _logger.default.debug('Setting security for iOS device');

  await (0, _teen_process.exec)('security', ['-v', 'list-keychains', '-s', keychainPath]);
  await (0, _teen_process.exec)('security', ['-v', 'unlock-keychain', '-p', keychainPassword, keychainPath]);
  await (0, _teen_process.exec)('security', ['set-keychain-settings', '-t', '3600', '-l', keychainPath]);
}

async function fixXCUICoordinateFile(bootstrapPath, initial = true) {
  const file = _path.default.resolve(bootstrapPath, XCUICOORDINATE_FILE);

  let oldDef = '- (void)pressForDuration:(double)arg1 thenDragToCoordinate:(id)arg2;';
  let newDef = '- (void)pressForDuration:(NSTimeInterval)duration thenDragToCoordinate:(XCUICoordinate *)otherCoordinate;';

  if (!initial) {
    [oldDef, newDef] = [newDef, oldDef];
  }

  await replaceInFile(file, oldDef, newDef);
}

async function fixFBSessionFile(bootstrapPath, initial = true) {
  const file = _path.default.resolve(bootstrapPath, FBSESSION_FILE);

  let oldLine = 'return [FBApplication fb_activeApplication] ?: self.testedApplication;';
  let newLine = 'FBApplication *application = [FBApplication fb_activeApplication] ?: self.testedApplication;\n' + '  return application;';

  if (!initial) {
    [oldLine, newLine] = [newLine, oldLine];
  }

  await replaceInFile(file, oldLine, newLine);
}

async function fixForXcode7(bootstrapPath, initial = true, fixXcode9 = true) {
  if (fixXcode9) {
    await fixForXcode9(bootstrapPath, !initial, false);
  }

  await fixXCUICoordinateFile(bootstrapPath, initial);
  await fixFBSessionFile(bootstrapPath, initial);
}

async function fixFBMacrosFile(bootstrapPath, initial = true) {
  const file = _path.default.resolve(bootstrapPath, FBMACROS_FILE);

  let oldDef = '#define FBStringify(class, property) ({if(NO){[class.new property];} @#property;})';
  let newDef = '#define FBStringify(class, property) ({@#property;})';

  if (!initial) {
    [oldDef, newDef] = [newDef, oldDef];
  }

  await replaceInFile(file, oldDef, newDef);
}

async function fixXCUIApplicationFile(bootstrapPath, initial = true) {
  const file = _path.default.resolve(bootstrapPath, XCUIAPPLICATION_FILE);

  let oldDef = '@property(nonatomic, readonly) NSUInteger state; // @synthesize state=_state;';
  let newDef = '@property XCUIApplicationState state;';

  if (!initial) {
    [oldDef, newDef] = [newDef, oldDef];
  }

  await replaceInFile(file, oldDef, newDef);
}

async function fixForXcode9(bootstrapPath, initial = true, fixXcode7 = true) {
  if (fixXcode7) {
    await fixForXcode7(bootstrapPath, !initial, false);
  }

  await fixFBMacrosFile(bootstrapPath, initial);
  await fixXCUIApplicationFile(bootstrapPath, initial);
}

async function generateXcodeConfigFile(orgId, signingId) {
  _logger.default.debug(`Generating xcode config file for orgId '${orgId}' and signingId ` + `'${signingId}'`);

  let contents = `DEVELOPMENT_TEAM = ${orgId}
CODE_SIGN_IDENTITY = ${signingId}
`;
  let xcconfigPath = await _appiumSupport.tempDir.path('appium-temp.xcconfig');

  _logger.default.debug(`Writing xcode config file to ${xcconfigPath}`);

  await _appiumSupport.fs.writeFile(xcconfigPath, contents, "utf8");
  return xcconfigPath;
}

async function setXctestrunFile(isRealDevice, udid, platformVersion, bootstrapPath, wdaRemotePort) {
  let xctestrunDeviceFileName = `${udid}_${platformVersion}.xctestrun`;

  let xctestrunFilePath = _path.default.resolve(bootstrapPath, xctestrunDeviceFileName);

  if (!(await _appiumSupport.fs.exists(xctestrunFilePath))) {
    let xctestBaseFileName = isRealDevice ? `WebDriverAgentRunner_iphoneos${platformVersion}-arm64.xctestrun` : `WebDriverAgentRunner_iphonesimulator${platformVersion}-x86_64.xctestrun`;

    let originalXctestrunFile = _path.default.resolve(bootstrapPath, xctestBaseFileName);

    if (!(await _appiumSupport.fs.exists(originalXctestrunFile))) {
      _logger.default.errorAndThrow(`if you are using useXctestrunFile capability then you need to have ${originalXctestrunFile} file`);
    }

    await _appiumSupport.fs.copyFile(originalXctestrunFile, xctestrunFilePath);
  }

  let xctestRunContent = await _appiumSupport.plist.parsePlistFile(xctestrunFilePath);
  let updateWDAPort = {
    WebDriverAgentRunner: {
      EnvironmentVariables: {
        USE_PORT: wdaRemotePort
      }
    }
  };

  let newXctestRunContent = _lodash.default.merge(xctestRunContent, updateWDAPort);

  await _appiumSupport.plist.updatePlistFile(xctestrunFilePath, newXctestRunContent, true);
  return xctestrunFilePath;
}

async function killProcess(name, proc) {
  if (proc && proc.proc) {
    _logger.default.info(`Shutting down ${name} process (pid ${proc.proc.pid})`);

    try {
      await proc.stop('SIGTERM', 1000);
    } catch (err) {
      if (!err.message.includes(`Process didn't end after`)) {
        throw err;
      }

      _logger.default.debug(`${name} process did not end in a timely fashion: '${err.message}'. ` + `Sending 'SIGKILL'...`);

      try {
        await proc.stop('SIGKILL');
      } catch (err) {
        if (err.message.includes('not currently running')) {
          return;
        }

        throw err;
      }
    }
  }
}

function randomInt(low, high) {
  return Math.floor(Math.random() * (high - low) + low);
}

async function getWDAUpgradeTimestamp(bootstrapPath) {
  const carthageRootPath = _path.default.resolve(bootstrapPath, CARTHAGE_ROOT);

  if (await _appiumSupport.fs.exists(carthageRootPath)) {
    const {
      mtime
    } = await _appiumSupport.fs.stat(carthageRootPath);
    return mtime.getTime();
  }

  return null;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
