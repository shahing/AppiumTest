"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YouiEngineDriver = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _desiredCaps = _interopRequireDefault(require("./desired-caps"));

var _logger = _interopRequireDefault(require("./logger"));

var _index = _interopRequireDefault(require("./commands/index"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _asyncbox = require("asyncbox");

var _appiumAndroidDriver = _interopRequireDefault(require("appium-android-driver"));

var _appiumIosDriver = _interopRequireDefault(require("appium-ios-driver"));

var _appiumXcuitestDriver = _interopRequireDefault(require("appium-xcuitest-driver"));

var _appiumMacDriver = _interopRequireDefault(require("appium-mac-driver"));

const TO_PROXY_COMMON = ['background', 'closeApp', 'getLog', 'getLogTypes', 'getOrientation', 'getStrings', 'launchApp', 'lock', 'removeApp', 'setOrientation'];
const TO_PROXY_IOS_ONLY = ['mobileShake'];
const TO_PROXY_ANDROID_ONLY = ['getNetworkConnection', 'isAppInstalled', 'isLocked', 'longPressKeyCode', 'pressKeyCode', 'setNetworkConnection', 'toggleLocationServices', 'unlock'];
const TO_PROXY_IOS = TO_PROXY_IOS_ONLY.concat(TO_PROXY_COMMON);
const TO_PROXY_ANDROID = TO_PROXY_ANDROID_ONLY.concat(TO_PROXY_COMMON);
const TO_PROXY_MAC = TO_PROXY_COMMON;
const MAX_RETRY_COUNT = 10;
const RETRY_BACKOFF = 3000;

class YouiEngineDriver extends _appiumBaseDriver.BaseDriver {
  resetYouiEngine() {
    this.ready = false;
    this.socket = null;
    this.locatorStrategies = ['id', 'name', 'class name', 'accessibility id'];
    this.proxydriver = null;
    this.proxyAllowList = '';
  }

  constructor(opts, shouldValidateCaps) {
    super(opts, shouldValidateCaps);
    this.desiredCapConstraints = _desiredCaps.default;
    this.settings = new _appiumBaseDriver.DeviceSettings({
      'TimeDilation': 1,
      'SourceTreeFilter': ''
    }, this.onSettingsUpdate.bind(this));
    this.resetYouiEngine();
  }

  validateLocatorStrategy(strategy) {
    super.validateLocatorStrategy(strategy, false);
  }

  async createSession(caps) {
    try {
      let [sessionId] = await super.createSession(caps);

      if (caps.platformName !== null) {
        let appPlatform = caps.platformName.toLowerCase();

        if (appPlatform === "ios") {
          await this.startIOSSession(caps);
        } else if (appPlatform === "android") {
          await this.startAndroidSession(caps);
        } else if (appPlatform === "mac") {
          await this.startMacSession(caps);
        } else if (appPlatform === "yimac") {
          this.startYIMacSession(caps);
        } else if (appPlatform === "bluesky") {
          this.startBlueSkySession(caps);
        } else if (appPlatform === "yitvos") {
          this.startYITVOSSession(caps);
        }
      }

      await this.connectSocket();
      return [sessionId, this.opts];
    } catch (e) {
      await this.deleteSession();
      throw e;
    }
  }

  async onSettingsUpdate(key, value) {
    if (key === "TimeDilation") {
      await this.setTimeDilation(value);
    } else if (key === "SourceTreeFilter") {
      await this.setSourceTreeFilter(value);
    }
  }

  async stop() {
    this.ready = false;
  }

  async deleteSession() {
    _logger.default.debug("Deleting YouiEngine session");

    if (this.caps.platformName !== null) {
      let appPlatform = this.caps.platformName.toLowerCase();

      if (appPlatform === "yimac") {
        this.endYIMacSession(this.caps);
      } else if (appPlatform === "yitvos") {
        this.endYITVOSSession(this.caps);
      }
    }

    if (this.proxydriver !== null) {
      await this.proxydriver.deleteSession();
    }

    await super.deleteSession();
    await this.stop();
  }

  driverShouldDoProxyCmd(command) {
    if (!this.proxydriver) {
      return false;
    }

    for (let allowedCommand of this.proxyAllowList) {
      if (allowedCommand === command) {
        return true;
      }
    }

    return false;
  }

  async executeCommand(cmd, ...args) {
    if (cmd === 'receiveAsyncResponse') {
      _logger.default.debug(`Executing YouiEngineDriver response '${cmd}'`);

      return await this.receiveAsyncResponse(...args);
    } else if (this.ready) {
      if (this.driverShouldDoProxyCmd(cmd)) {
        _logger.default.debug(`Executing proxied WebDriver command '${cmd}'`);

        this.clearNewCommandTimeout();
        let result = this.proxydriver.executeCommand(cmd, ...args);
        this.startNewCommandTimeout(cmd);
        return result;
      } else {
        _logger.default.debug(`Executing YouiEngine WebDriver command '${cmd}'`);

        return super.executeCommand(cmd, ...args);
      }
    } else {
      _logger.default.debug(`Command Error '${cmd}'`);

      throw new _appiumBaseDriver.errors.NoSuchDriverError(`Driver is not ready, cannot execute ${cmd}.`);
    }
  }

  validateDesiredCaps(caps) {
    let res = super.validateDesiredCaps(caps);

    if (!res) {
      return res;
    }

    if (caps.platformName.toLowerCase() !== 'noproxy') {
      if (!caps.youiEngineAppAddress) {
        let msg = 'The desired capabilities must include youiEngineAppAddress';

        _logger.default.errorAndThrow(msg);
      }

      if (!caps.app) {
        let msg = 'The desired capabilities must include app';

        _logger.default.errorAndThrow(msg);
      }

      if (caps.deviceName.toLowerCase() === 'android') {
        if (!caps.avd) {
          let msg = 'The desired capabilities must include avd';

          _logger.default.errorAndThrow(msg);
        }
      }
    }

    return true;
  }

  async setupNewIOSDriver(caps) {
    let iosArgs = {
      javascriptEnabled: true
    };
    let iosdriver = new _appiumIosDriver.default(iosArgs);

    if (caps.platformVersion) {
      let majorVer = caps.platformVersion.toString().split(".")[0];

      if (parseInt(majorVer, 10) >= 10) {
        iosdriver = new _appiumXcuitestDriver.default(iosArgs);
      }
    }

    let capsCopy = _lodash.default.cloneDeep(caps);

    capsCopy.newCommandTimeout = 0;
    await iosdriver.createSession(capsCopy);
    return iosdriver;
  }

  async startIOSSession(caps) {
    _logger.default.info("Starting an IOS proxy session");

    this.proxyAllowList = TO_PROXY_IOS;
    this.proxydriver = await this.setupNewIOSDriver(caps);
  }

  async setupNewAndroidDriver(caps) {
    let androidArgs = {
      javascriptEnabled: true
    };
    let androiddriver = new _appiumAndroidDriver.default(androidArgs);

    let capsCopy = _lodash.default.cloneDeep(caps);

    capsCopy.newCommandTimeout = 0;
    await androiddriver.createSession(capsCopy);
    return androiddriver;
  }

  async startAndroidSession(caps) {
    _logger.default.info("Starting an Android proxy session");

    this.proxyAllowList = TO_PROXY_ANDROID;
    this.proxydriver = await this.setupNewAndroidDriver(caps);
  }

  async setupNewMacDriver(caps) {
    let macArgs = {
      javascriptEnabled: true
    };
    let macdriver = new _appiumMacDriver.default(macArgs);

    let capsCopy = _lodash.default.cloneDeep(caps);

    capsCopy.newCommandTimeout = 0;
    await macdriver.createSession(capsCopy);
    return macdriver;
  }

  async startMacSession(caps) {
    _logger.default.info("Starting a Mac proxy session");

    this.proxyAllowList = TO_PROXY_MAC;
    this.proxydriver = await this.setupNewMacDriver(caps);
  }

  startYIMacSession(caps) {
    _logger.default.info("Killing app if run");

    let shell = require('shelljs');

    let process_name = caps.app.substring(caps.app.lastIndexOf("/") + 1);
    shell.exec("killall " + process_name);

    _logger.default.info("Launching macOS app");

    this.validateAppLocation(caps.app);

    let spawn = require('child_process').spawn,
        ls = spawn(caps.app);

    ls.stdout.on('data', function (data) {
      if (data != null && caps.showXcodeLog === true) {
        _logger.default.debug('Xcode Log Output: ' + data.toString());
      }
    });
    ls.stderr.on('data', function (data) {
      if (data != null && caps.showXcodeLog === true) {
        _logger.default.debug('Xcode Log Error: ' + data.toString());
      }
    });
    ls.on('exit', function (code) {
      if (code != null && caps.showXcodeLog === true) {
        _logger.default.debug('Application exited with code ' + code.toString());
      }
    });
  }

  endYIMacSession(caps) {
    _logger.default.info("Deleting app");

    let shell = require('shelljs');

    let process_name = caps.app.substring(caps.app.lastIndexOf("/") + 1);
    shell.exec("killall " + process_name);
  }

  startBlueSkySession(caps) {
    _logger.default.info("Launching BlueSky app");

    this.validateAppLocation(caps.app);

    let shell = require('shelljs');

    let bluesky_install_script = "curl -v -# -f -i --user '" + caps.username + ":" + caps.password + "' --digest --progress-bar -F 'mysubmit=Install' -F 'archive=@" + caps.app + "' -F 'passwd=' http://" + caps.youiEngineAppAddress + "/plugin_install | grep '<font color' | sed 's/<font color=\'red\'>//' ";
    shell.exec(bluesky_install_script);
  }

  startYITVOSSession(caps) {
    _logger.default.info("Launching tvOS app");

    this.validateAppLocation(caps.app);

    let shell = require('shelljs');

    if (caps.udid) {
      shell.exec("ios-deploy --id " + caps.udid + " --uninstall --justlaunch --bundle " + caps.app);
    } else {
      shell.exec("ios-deploy --uninstall --justlaunch --bundle " + caps.app);
    }
  }

  endYITVOSSession(caps) {
    _logger.default.info("Deleting app");

    let shell = require('shelljs');

    let bundleid = shell.exec(`osascript -e 'id of app "${caps.app}"'`);

    if (caps.udid) {
      shell.exec("ios-deploy --id " + caps.udid + " --uninstall_only --bundle_id " + bundleid);
    } else {
      shell.exec("ios-deploy --uninstall_only --bundle_id " + bundleid);
    }
  }

  validateAppLocation(app) {
    const fs = require('fs');

    const path = require('path');

    if (!fs.existsSync(app)) {
      let absolutepath = path.resolve(app);
      let msg = 'The app could not be found in following location: ' + absolutepath;

      _logger.default.errorAndThrow(msg);
    }
  }

  async connectSocket() {
    let retryCount = 0;
    let connected = false;

    while (retryCount < MAX_RETRY_COUNT && !connected) {
      if (retryCount > 0) {
        _logger.default.info("Waiting " + RETRY_BACKOFF / 1000 + " seconds before trying...");

        await (0, _asyncbox.sleep)(RETRY_BACKOFF);
      }

      _logger.default.info("Attempt #" + (retryCount + 1));

      let connectedPromise = new _bluebird.default(resolve => {
        let net = require('net');

        let HOST = this.opts.youiEngineAppAddress;
        let PORT = 12345;

        _logger.default.info('Connecting to WebDriver: ' + HOST + ':' + PORT);

        this.socket = new net.Socket();
        this.socket.on('error', function (ex) {
          _logger.default.error(ex);

          _logger.default.error('Check that WebDriver is enabled in application, if a device ensure the proper IP address is used.');

          resolve(false);
        });
        this.socket.on('close', function () {
          _logger.default.info('Connection closed');
        });
        this.socket.on('timeout', function () {
          _logger.default.error('Connection timed out');

          resolve(false);
        });
        this.socket.connect(PORT, HOST, function () {
          _logger.default.info('Connected');

          resolve(true);
        });
      });
      retryCount++;
      connected = await connectedPromise;

      if (!connected && retryCount === MAX_RETRY_COUNT - 1) {
        _logger.default.errorAndThrow("Failed to connect " + MAX_RETRY_COUNT + " times. Aborting.");
      }
    }

    retryCount = 0;
    this.ready = connected;
  }

  async executeSocketCommand(cmd) {
    if (!this.socket.writable) {
      _logger.default.info("Socket is not writable. Trying to reconnect.");

      await this.connectSocket();
    }

    let cmdPromise = new _bluebird.default(resolve => {
      _logger.default.debug('COMMAND: ' + cmd);

      let totaldata = [];
      let endMarker = new Buffer("youiend");
      let socketClient = this.socket;

      let dataHandler = function (data) {
        if (data.length >= endMarker.length) {
          let dataend = new Buffer(endMarker.length);
          let startIndex = data.length - endMarker.length;
          data.copy(dataend, 0, startIndex, startIndex + endMarker.length);

          if (dataend.equals(endMarker)) {
            let lastData = data.slice(0, startIndex);
            totaldata.push(lastData);
            socketClient.removeListener('data', dataHandler);
            resolve(Buffer.concat(totaldata));
          } else {
            totaldata.push(data);
          }
        }
      };

      socketClient.write(cmd + "\n", "UTF8", () => {
        socketClient.on('data', dataHandler);
      });
    });
    return await cmdPromise;
  }

}

exports.YouiEngineDriver = YouiEngineDriver;

for (let [cmd, fn] of _lodash.default.toPairs(_index.default)) {
  YouiEngineDriver.prototype[cmd] = fn;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
