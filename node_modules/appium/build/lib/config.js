"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBuildInfo = getBuildInfo;
exports.validateServerArgs = validateServerArgs;
exports.checkNodeOk = checkNodeOk;
exports.showConfig = showConfig;
exports.warnNodeDeprecations = warnNodeDeprecations;
exports.validateTmpDir = validateTmpDir;
exports.getNonDefaultArgs = getNonDefaultArgs;
exports.getDeprecatedArgs = getDeprecatedArgs;
exports.getGitRev = getGitRev;
exports.checkValidPort = checkValidPort;
exports.updateBuildInfo = updateBuildInfo;
exports.APPIUM_VER = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _teen_process = require("teen_process");

var _utils = require("./utils");

var _logger = _interopRequireDefault(require("./logger"));

const APPIUM_VER = require(_path.default.resolve(_utils.rootDir, 'package.json')).version;

exports.APPIUM_VER = APPIUM_VER;
const GIT_META_ROOT = '.git';
const GIT_BINARY = `git${_appiumSupport.system.isWindows() ? '.exe' : ''}`;
const GITHUB_API = 'https://api.github.com/repos/appium/appium';
const BUILD_INFO = {
  version: APPIUM_VER
};

function getNodeVersion() {
  let version = process.version.match(/^v(\d+)\.(\d+)/);
  return [Number(version[1]), Number(version[2])];
}

async function updateBuildInfo(useGithubApiFallback = false) {
  const sha = await getGitRev(useGithubApiFallback);

  if (!sha) {
    return;
  }

  BUILD_INFO['git-sha'] = sha;
  const built = await getGitTimestamp(sha, useGithubApiFallback);

  if (!_lodash.default.isEmpty(built)) {
    BUILD_INFO.built = built;
  }
}

async function getGitRev(useGithubApiFallback = false) {
  if (await _appiumSupport.fs.exists(_path.default.resolve(_utils.rootDir, GIT_META_ROOT))) {
    try {
      const {
        stdout
      } = await (0, _teen_process.exec)(GIT_BINARY, ['rev-parse', 'HEAD'], {
        cwd: _utils.rootDir
      });
      return stdout.trim();
    } catch (ign) {}
  }

  if (!useGithubApiFallback) {
    return null;
  }

  try {
    const response = await _requestPromise.default.get(`${GITHUB_API}/tags`, {
      headers: {
        'User-Agent': `Appium ${APPIUM_VER}`
      }
    });

    const resBodyObj = _appiumSupport.util.safeJsonParse(response);

    if (_lodash.default.isArray(resBodyObj)) {
      for (const _ref of resBodyObj) {
        const {
          name,
          commit
        } = _ref;

        if (name === `v${APPIUM_VER}` && commit && commit.sha) {
          return commit.sha;
        }
      }
    }
  } catch (ign) {}

  return null;
}

async function getGitTimestamp(commitSha, useGithubApiFallback = false) {
  if (await _appiumSupport.fs.exists(_path.default.resolve(_utils.rootDir, GIT_META_ROOT))) {
    try {
      const {
        stdout
      } = await (0, _teen_process.exec)(GIT_BINARY, ['show', '-s', '--format=%ci', commitSha], {
        cwd: _utils.rootDir
      });
      return stdout.trim();
    } catch (ign) {}
  }

  if (!useGithubApiFallback) {
    return null;
  }

  try {
    const response = await _requestPromise.default.get(`${GITHUB_API}/commits/${commitSha}`, {
      headers: {
        'User-Agent': `Appium ${APPIUM_VER}`
      }
    });

    const resBodyObj = _appiumSupport.util.safeJsonParse(response);

    if (resBodyObj && resBodyObj.commit) {
      if (resBodyObj.commit.committer && resBodyObj.commit.committer.date) {
        return resBodyObj.commit.committer.date;
      }

      if (resBodyObj.commit.author && resBodyObj.commit.author.date) {
        return resBodyObj.commit.author.date;
      }
    }
  } catch (ign) {}

  return null;
}

function getBuildInfo() {
  return BUILD_INFO;
}

function checkNodeOk() {
  let [major, minor] = getNodeVersion();

  if (major < 6) {
    let msg = `Node version must be >= 6. Currently ${major}.${minor}`;

    _logger.default.errorAndThrow(msg);
  }
}

function warnNodeDeprecations() {
  let [major] = getNodeVersion();

  if (major < 8) {
    _logger.default.warn("Appium support for versions of node < 8 has been " + "deprecated and will be removed in a future version. Please " + "upgrade!");
  }
}

async function showConfig() {
  await updateBuildInfo(true);
  console.log(JSON.stringify(getBuildInfo()));
}

function getNonDefaultArgs(parser, args) {
  let nonDefaults = {};

  for (let rawArg of parser.rawArgs) {
    let arg = rawArg[1].dest;

    if (args[arg] && args[arg] !== rawArg[1].defaultValue) {
      nonDefaults[arg] = args[arg];
    }
  }

  return nonDefaults;
}

function getDeprecatedArgs(parser, args) {
  let deprecated = {};

  for (let rawArg of parser.rawArgs) {
    let arg = rawArg[1].dest;
    let defaultValue = rawArg[1].defaultValue;
    let isDeprecated = !!rawArg[1].deprecatedFor;

    if (args[arg] && args[arg] !== defaultValue && isDeprecated) {
      deprecated[rawArg[0]] = rawArg[1].deprecatedFor;
    }
  }

  return deprecated;
}

function checkValidPort(port, portName) {
  if (port > 0 && port < 65536) return true;

  _logger.default.error(`Port '${portName}' must be greater than 0 and less than 65536. Currently ${port}`);

  return false;
}

function validateServerArgs(parser, args) {
  let exclusives = [['noReset', 'fullReset'], ['ipa', 'safari'], ['app', 'safari'], ['forceIphone', 'forceIpad'], ['deviceName', 'defaultDevice']];

  for (let exSet of exclusives) {
    let numFoundInArgs = 0;

    for (let opt of exSet) {
      if (_lodash.default.has(args, opt) && args[opt]) {
        numFoundInArgs++;
      }
    }

    if (numFoundInArgs > 1) {
      throw new Error(`You can't pass in more than one argument from the ` + `set ${JSON.stringify(exSet)}, since they are ` + `mutually exclusive`);
    }
  }

  const validations = {
    port: checkValidPort,
    callbackPort: checkValidPort,
    bootstrapPort: checkValidPort,
    selendroidPort: checkValidPort,
    chromedriverPort: checkValidPort,
    robotPort: checkValidPort,
    backendRetries: r => {
      return r >= 0;
    }
  };
  const nonDefaultArgs = getNonDefaultArgs(parser, args);

  for (let [arg, validator] of _lodash.default.toPairs(validations)) {
    if (_lodash.default.has(nonDefaultArgs, arg)) {
      if (!validator(args[arg], arg)) {
        throw new Error(`Invalid argument for param ${arg}: ${args[arg]}`);
      }
    }
  }
}

async function validateTmpDir(tmpDir) {
  try {
    await (0, _appiumSupport.mkdirp)(tmpDir);
  } catch (e) {
    throw new Error(`We could not ensure that the temp dir you specified ` + `(${tmpDir}) exists. Please make sure it's writeable.`);
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
