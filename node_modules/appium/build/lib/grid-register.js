"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("./logger"));

const hubUri = config => {
  const protocol = config.hubProtocol || 'http';
  return `${protocol}://${config.hubHost}:${config.hubPort}`;
};

async function registerNode(configFile, addr, port) {
  let data;

  try {
    data = await _appiumSupport.fs.readFile(configFile, 'utf-8');
  } catch (err) {
    _logger.default.error(`Unable to load node configuration file to register with grid: ${err.message}`);

    return;
  }

  if (!data) {
    _logger.default.error('No data found in the node configuration file to send to the grid');

    return;
  }

  postRequest(data, addr, port);
}

async function registerToGrid(options_post, jsonObject) {
  try {
    let response = await (0, _requestPromise.default)(options_post);

    if (response === undefined || response.statusCode !== 200) {
      throw new Error('Request failed');
    }

    let logMessage = `Appium successfully registered with the grid on ${hubUri(jsonObject.configuration)}`;

    _logger.default.debug(logMessage);
  } catch (err) {
    _logger.default.error(`Request to register with grid was unsuccessful: ${err.message}`);
  }
}

function postRequest(data, addr, port) {
  let jsonObject;

  try {
    jsonObject = JSON.parse(data);
  } catch (err) {
    _logger.default.errorAndThrow(`Syntax error in node configuration file: ${err.message}`);
  }

  if (!jsonObject.hasOwnProperty('configuration')) {
    let configuration = {};

    for (let property in jsonObject) {
      if (jsonObject.hasOwnProperty(property) && property !== 'capabilities') {
        configuration[property] = jsonObject[property];
        delete jsonObject[property];
      }
    }

    jsonObject.configuration = configuration;
  }

  if (!jsonObject.configuration.url || !jsonObject.configuration.host || !jsonObject.configuration.port) {
    jsonObject.configuration.url = `http://${addr}:${port}/wd/hub`;
    jsonObject.configuration.host = addr;
    jsonObject.configuration.port = port;
  }

  if (!jsonObject.configuration.id) {
    jsonObject.configuration.id = `http://${jsonObject.configuration.host}:${jsonObject.configuration.port}`;
  }

  data = JSON.stringify(jsonObject);
  let post_headers = {
    'Content-Type': 'application/json',
    'Content-Length': data.length
  };
  let post_options = {
    url: `${hubUri(jsonObject.configuration)}/grid/register`,
    method: 'POST',
    body: data,
    headers: post_headers,
    resolveWithFullResponse: true
  };

  if (jsonObject.configuration.register !== true) {
    _logger.default.debug(`No registration sent (${jsonObject.configuration.register} = false)`);

    return;
  }

  let registerCycleTime = jsonObject.configuration.registerCycle;

  if (registerCycleTime !== null && registerCycleTime > 0) {
    let first = true;

    _logger.default.debug(`Starting auto register thread for grid. Will try to register every ${registerCycleTime} ms.`);

    setInterval(async function () {
      if (first !== true) {
        let isRegistered = await isAlreadyRegistered(jsonObject);

        if (isRegistered !== null && isRegistered !== true) {
          await registerToGrid(post_options, jsonObject);
        }
      } else {
        first = false;
        await registerToGrid(post_options, jsonObject);
      }
    }, registerCycleTime);
  }
}

async function isAlreadyRegistered(jsonObject) {
  let id = jsonObject.configuration.id;

  try {
    let response = await (0, _requestPromise.default)({
      uri: `${hubUri(jsonObject.configuration)}/grid/api/proxy?id=${id}`,
      method: 'GET',
      timeout: 10000,
      resolveWithFullResponse: true
    });

    if (response === undefined || response.statusCode !== 200) {
      throw new Error(`Request failed`);
    }

    let responseData = JSON.parse(response.body);

    if (responseData.success !== true) {
      _logger.default.debug(`Grid registration error: ${responseData.msg}`);
    }

    return responseData.success;
  } catch (err) {
    _logger.default.debug(`Hub down or not responding: ${err.message}`);
  }
}

var _default = registerNode;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
